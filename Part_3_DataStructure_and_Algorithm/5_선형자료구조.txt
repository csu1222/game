

    선형 자료구조 (Linear Data Structure)


선형 자료구조 개론에 대해 얘기하겠습니다. 

먼저 선형 자료구조란 무엇인지를 알아보겠습니다. 

자료구조에는 선형, 비선형 두가지가 있습니다. 

선형 자료구조 : 자료를 순차적으로 나열한 형태
- 배열
- 연결 리스트 
- 스택 / 큐 

비선형 자료구조 : 하나의 자료뒤에 여러개의 자료가 올 수 있는 형태 
- 트리 
- 그래프 

선형 자료구조가 기초가 되고 더 쉬운 개념이라고 할 수 있습니다. 

이중에서 오늘 다뤄볼 내용은 
    배열 vs 동적배열 vs 연결리스트 
입니다. 
이 세가지 자료구조는 어떤 프로그래밍 언어건 간에 다 존재 합니다. C++ 기준으로는 기본 배열 문법도 있지만 STL 의 Array 를 지원하고 
동적 배열은 vector 에 해당하고 연결리스트는 List 에 해당합니다. 
언어마다 명칭이 다른데 예를들어 C# 에서는 List는 동적배열을 의미합니다. 

이 3가지 자료구조에 대해 면접에서 물어볼수 있는데 이부분에서 잘못대답한다면 큰 마이너스가 될겁니다. 
그정도로 기초적인 질문입니다. 

어떤 개념을 그냥 정의만으로 공부하는것 보다는 다른 비유를 들어서 연상하는 방법으로 공부하면 더 효율이 높습니다. 
그래서 개념들을 실생활의 호텔에 비유하면서 배워보겠습니다. 
사실 우리가 RAM 에 저장 공간을 할당 받아서 데이터를 저장하는것 자체가 RAM 이라는 호텔에 방을 예약하는것과 많이 닮았습니다.

순서대로 설명하겠습니다. 


    1. 배열 
    - 사용할 방의 개수를 고정해서 예약하고 (절대 변경 불가)
    - 연속된 방으로 배정 받아 사용
    장점 : 연속된 방
    단점 : 방을 추가/축소 불가

    이 호텔은 기본으로 1인 1실이 규칙입니다. 현재 친구 3명이서 놀러왔는데 방을 빌리려면 연속된 방을 빌리는게 서로 왕래하거나 놀기 편할겁니다.
    배열의 경우 위에서 말한대로 처음에 방을 예약할때 먼저 몇개의 방을 빌릴건지 정해야 하고 한번 빌리면 방의 개수를 변경하는게 불가능합니다.
    만약 3명의 친구가 놀다가 나중에 4번째 친구가 온다고 해도 불행히도 더 추가로 방을 빌릴 수 없고 
    또 3명이 놀다가 한 친구가 먼저 집에 간다고 할 때도 그 방을 환불 받지 못하고 방을 비워둔 채로 지내야 합니다. 

배열이 불편해서 개선을 한 것이 동적 배열입니다. 

    2. 동적배열
    - 사용할 방 개수를 유동적으로 계약
    - 연속된 방을 배정받아 사용
    문제점 : 이사 비용은 어떻게?

    동적 배열도 배열은 배열이다보니까 연속적인 방을 예약할 수 있다는것은 동일합니다. 거기에 더해서 중간에 방을 더 빌리고 싶을때 늘려서 방을 빌릴 수 있습니다. 
    하지만 3개의 방을 빌리고 있다가 한 방을 추가로 빌리고 싶을 때 바로옆의 방이 비어있다고 보장하지 못합니다. 다른 투숙객이 있을 수 있습니다. 
    그래서 총 4개의 방이 연속적으로 비어있는곳을 찾아서 그곳으로 기존에 있던 3명도 함께 이동해야합니다. 
    여기서 약간의 문제가 생깁니다. 먼저 있던 3명의 친구들이 짐이 얼마 없다면 모르겠지만 만약 짐이 엄청 많았다면 그 많은 짐을 다 들고 이동해야 합니다. 
    이런 이사비용은 어떻게 해야하는지가 문제입니다. 한번은 이사할 수 있다고 하지만 다른 친구 한명이 또 와서 총 5명이 되었다면?
    방을 늘리는게 계속 일어난다면 그때 마다 이사를 해야합니다. 
    이사의 문제점을 어느정도 개선하는 방법이 있습니다. 

    동적 배열 할당 정책 : 
    - 실제로 사용할 방보다 많이. 여유분을 두고 (대략 1.5 ~ 2 배쯤) 예약
    - 이사 횟수를 최소화 

    이게 개념으로 보면 이해가 잘가지 않을 수 있는데 예시를 다시 들어보겠습니다. 
    이번에는 친구가 4명이 놀러왔습니다. 호텔에서 방을 4개만 빌리기는하는데 그 뒤로 연속된 2개의 방을 추가로 비워둡니다. 이렇게 하면 
    실제로 빌린방은 4개지만 이후로 5번째 친구, 6번째 친구가 와도 빈 방에 이어서 방을 빌리면 되기 때문에 두 번 이사할것을 넘기게 되는 이득이 생깁니다. 
    하지만 이 방법은 약간 조삼모사 같이 느껴집니다. 몇번 이사 횟수를 줄인다고 해도 결국 이사를 해야하는건 마찬가지인것 같지만 그래도 생각보다 괜찮은 방법인 
    이유가 있습니다. 여유분을 1.5 ~ 2 배로 설정한다는 점이 괜찮은 점인데 처음에 동적배열이 작을때는 잦은 이사를 해야 겠지만 크기가 어느정도 커졌을 때는 
    여유 공간도 따라서 크게 늘어납니다. 그러면 데이터가 끝도 없이 늘어나는것이 아닌 어느정도 크기에서 늘었다 줄었다 한다면 그 정도 크기 변화는 
    여유분때문에 이사를 하지 않고 그냥 넘어갈 수 있을 겁니다. 
    
    장점과 단점을 알아 보겠습니다. 
    
    장점 : 연속적이고 유동적인 계약 (방의 여유분 추가로 이사 횟수 최소화)
    단점 : 중간 삽입/삭제 비효율적이다.

    장점 부분은 위에서 알아 봤고 단점이 어떤 의미인지 알아보겟습니다. 
    우선 중간 삽입/삭제가 어렵다는 것은 동적 배열만의 문제가 아니라 그냥 배열도 해당하는 문제 입니다. 
    예시로 101, 102, 103, 104, 105 호를 빌렸다고 하겠습니다. 이중에 103 호의 친구가 갑자기 일이 생겨서 집에 가봐야합니다. 
    이러면 5개의 방에서 중간 103 호만 비워두고 사용할수 없습니다. 동적 배열은 연속적이어야 하기 때문입니다. 연속적이기 위해서 104, 105 호의 친구가 
    한방씩 땡겨서 이사를 해야합니다. 
    이번엔 반대로 중간 삽입의 경우를 보겠습니다. 3번 친구가 집에 간 이후에 6번 친구가 새로 놀러왔습니다. 그런데 이 친구가 맨 뒤에 번호의 방을 받는게 아니라 
    2번 친구와 너무 친해서 그 옆방에 방을 빌리려고 합니다. 그런데 이미 지금은 4번 5번 친구가 한칸씩 땡겨서 이사해서 103 호 방이 비어있지 않습니다. 
    이러면 103 호 부터 뒤쪽의 친구들은 한 방씩 뒤로 이동을 해서 방을 비워둔 다음 거기에 6번 친구가 짐을 풀어야 합니다. 
    이렇게 동적배열의 개론을 살펴 봤습니다. 

나머지 자료구조 연결리스트의 내용을 이어서 살펴보겠습니다. 

    3. 연결리스트 
    - 연속되지 않은 방을 사용
    장점 : 중간 삽입/삭제 용이 
    단점 : N번째 방을 바로 찾을 수 없음 (임의 접근 Random Access 불가)

    특이하게 배열, 동적배열의 단점이었던 중간 삽입/삭제가 장점입니다. 
    그건 그렇고 연속되지 않은 방을 사용이라는 말이 어떤 의미인지를 먼저 살펴보겠습니다. 4명의 친구가 호텔에 방을 빌릴때 101호, 202호, 304호, 205호 
    이런 식으로 방을 배정을 받는다는 의미입니다. 서로 순서나 연관없이 일단 각 1방을 배정받습니다. 
    하지만 친구들끼리 서로 어디에 있는지는 알고 있어야 합니다. 101호의 1번 친구는 202호의 2번 친구의 방번호를 알고 있고 2번 친구는 304호의 3번 친구 방번호를 알고 ,
    3번 친구는 205호의 4번 친구의 방번호를 알고 있는식입니다. 
    다른 방으로 넘어갈때는 자신을 기준으로 앞과 뒤의 방으로만 넘어갈수 있는 식입니다. 

    이럴때 중간에 3번 친구가 집에 가게 되었다고 하겠습니다. 그러면 2번친구가 4번 친구의 방번호를 기억하도록하고 4번 친구도 2번의 방번호를 기억하게 하면 
    중간에 3번 방은 없어지면서 중간 삭제가 됩니다. 
    중간 삽입도 비슷하게 중간에 기억할 방번호를 바꾸면 중간에 방을 추가할 수 있습니다.
    그래서 방을 추가, 삭제를 할때 이사비용이 들지 않고 서로 기억하고 있는 방번호만 바꿔주면 된다는 장점이 있습니다. 

    그리고 단점으로 꼽은 N번째 방을 바로 찾을 수 없다. 임의 접근이 무슨말인지를 살펴보겠습니다.
    임의 접근은 N번째 방이 무엇이냐고 퀴즈를 내었을때 한쪽은 배열이나 동적배열, 다른 쪽은 연결리스트라고 하겠습니다. 
    배열측은 방들이 연속적으로 붙어있다는 특징이 있기 때문에 N번째 방이 무엇이냐고 물었을때 바로 찾을 수 있습니다. 첫번째 방의 번호를 알면 방들이 연속해 있기 때문에 
    첫번째 방번호 + N 을 하면 바로 찾으려는 방의 번호를 알 수 있습니다. 
    반면 연결리스트 같은 경우는 서로 연결된 방 번호 사이의 별다른 규칙이 없고 서로 앞 뒤의 방번호만 알고 있기 때문에 N번째 방을 찾으려면 
    첫번째 방에서 출발해서 N번 다음 방을 들려서 찾아야 합니다. Big O 표기법으로 하면 배열은 O(1) 이고 연결 리스트는 O(N) 인겁니다. 

    위의 임의 접근의 예시에서 우리예시가 방의 개수를 많아 봐야 5개 6개 정도 범위라서 잘 와닿지 않을 수 있지만 
    만약에 방의 갯수가 10만개가 있다고 하면 차이가 더 확 와닿습니다. 배열, 동적배열같은경우는 5만번째 방을 찾을때 바로 빵 찾을 수 있지만 
    연결리스트의 경우에는 첫번째 방에서 부터 다음 방을 찾아가는 행위를 5만번 반복해야합니다.


이번시간에 선형 자료구조중 배열, 동적배열, 연결리스트 의 개론을 살펴보았고 
다음시간부터는 각각의 간단한 구현같은 실습도 해보겠습니다. 