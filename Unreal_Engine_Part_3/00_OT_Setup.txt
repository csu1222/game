


    언리얼 엔진 파트 3 : 3D 게임 

지금까지 언리얼에서 처음 본 블루 프린트라는 그래픽적인 언어를 만나 이것에 대해 익숙해져 보는 시간들을 가져 왔습니다. 

하지만 우리의 목표인 언리얼엔진으로 3D 게임들을 만들기 위해서는 언리얼 엔진 자체의 기능에 대해 더 깊숙히 알아봐야 합니다.
특히 3D게임을 만들려면 메쉬, 머테리얼, 게임 프레임워크, 충돌, AI 등이 중요합니다. 
이런 기능들을 간단한 TPS 게임을 만들면서 각 기능들을 훑어보는걸 목표로합니다. 

이번 파트의 목표는 TPS 슈터 게임을 만들어 볼건데 플레이어를 움직이고 또 총을 쏘고 몬스터도 있고 몬스터는 일정 공간을 배회하다가 플레이어가 근처에 오면 
추격해오는 식으로 만들겁니다. 게임으로써는 완성도 있는 게임이라고 보기는 어렵지만 우리 목적인 언리얼 기능들을 하나씩 다루는것은 충분할겁니다. 


    환경설정

이미 언리얼 엔진을 설치하는것 까지는 이미 알것이고 최신 언리얼 엔진을 설치해 사용하면되겠습니다. 
새로운 프로젝트를 시작할건데 게임 중 빈 게임을 선택하고 아직 이번 파트까지는 블루 프린트로 프로그래밍 할것이고 시작 컨텐츠는 언제든지 추가해줄 수 있으니 지금은 포함하지 않겠습니다. 
경로와 프로젝트이름을 설정하고 프로젝트 시작을 합니다. 

첫 레벨은 어떤 임의의 맵이 띄워져있는데 새 레벨을 만들고 Basic 레벨로 만들고 이걸 저장해줄건데 밑에있는 컨텐츠 브라우저에서 컨텐츠 폴더아래 Maps 폴더를 만든 다음 그 아래에 DevMap이라고 저장해줍니다. 
그리고 위의 편집옵션에서 프로젝트 세팅-> 맵&모드 -> 시작 맵, 기본 맵을 우리가 만든 DevMap으로 설정해줍니다. 

여기까지 파트들을 시작할때마다 해주던 초반 작업이었습니다. 

한번 언리얼 엔진을 종료한 다음 방금 만든 프로젝트가 있는 디렉토리로 가보면 uproject 라는 확장자 파일이 있습니다. 이걸 실행하면 방금 그 프로젝트가 열립니다. 
또 Saved, Intermediate, DeivedDataCache 그리고 나중에 Build 폴더는 지워버려도 상관이 없다고 합니다. 프로젝트를 실행하고 빌드, 저장하면 다시 생기는 폴더이기때문에 
만약 나중에 USB같은데에 프로젝트를 옮길때 용량이 부족하다고 하면 이것들을 빼고 옮겨도 되겠습니다. 

지금은 환경설정 시간이니깐 추가적으로 말하자면 2D 게임과 다르게 3D 게임은 에셋들이 용량이 큽니다. 2D에셋은 이미지 몇개를 빠르게 보여주는걸로 애니메이션을 다 처리했지만 
3D게임은 매쉬, 머테리얼등 다양한 에셋이 있기 때문입니다. 

이런 문제에 더불어서 가끔 처음 프로젝트를 하는 경우 버전 관리를 할때 프로젝트 폴더 자체를 복사 해 해당 날자를 입력해두는 경우가 있다고 합니다. 
위에서 말한것 처럼 3D 프로젝트는 용량이 크기 때문에 점점 감당하기 어렵게 될겁니다. 

이럴때 하는 것이 버전관리입니다. 버전관리는 모든 프로그래밍 직군에서 공통적으로 필요한 부분이고 그중 가장 유명한 git 을 사용하면 될겁니다. 
보통 버전관리 프로그램중 유명한게 3가지가 있는데 큰회사에서는 Perforce 를 많이 쓴다고 하고 작은 회사는 svn을 많이 쓴다고 하고 
그 중간 단계가 git 이라고 합니다. 

이 버전관리 프로그램을 조금 살펴보면 참여자들이 각자 작업한 작업물을 하나로 모아서 합치기도 하고 그중 브랜치를 뽑아서 중간에 다른 방향으로 개발해보기도하고 
또 각각의 버전을 날자별로 저장하기도 합니다. 게임의 세이브파일을 여러사람이 같이 사용한다고 할 수 있습니다. 
거기다 언제라도 이전 버전으로 이동해서 그 시점의 코드부터 작업을 다시 할 수도 있습니다. 각 버전사이에 수정된 코드를 볼 수 도있습니다. 

이 git을 웹에서 관리해주는 사이트가 github라고 합니다. 
여기서 새 저장소를 만들어 주소를 가져오고 이 저장소에서 git을 시작하면됩니다. 따로 git 강의를 배우면 알겠지만 git을 설치하면 같이 오는 git bash 라거나 
명령어 프롬프트에서 명령어를 써서 관리할 수도 있고 아니면 따로 툴을 사용해 UI로 깃을 사용할 수도 있습니다. 

이제 프로젝트를 진행하면서 어떤 파일들을 깃에 올릴건지 add 하고 다 올렸으면 commit을 한다음 로컬에 있는 커밋들을 깃허브로 보내는 push를 해주게 될겁니다. 
그런데 아까 말했다 싶이 3D게임은 에셋의 용량이 크고 쓸데없는 파일들, Saved, Intermediate, DeivedDataCache 같은 파일들은 굳이 관리할 필요가 없다고 했으니 빼고 add 하면 됩니다. 
이 제외할 파일들을 gitignore 파일로 관리해 줄 수 있습니다. 

텍스트 파일을하나 만들고 .gitignore 라고 이름을 바꿔주면 됩니다 이것을 아무 텍스트 편집기로 열어줍니다. 
여기에 검색엔진에서 git ignore unreal engine 을 검색해보면 어떤 템플릿이 나오는데 이걸 그대로 사용하면됩니다. 
이러면 언리얼엔진에서 굳이 버전관리하지 않아도 되는 파일들을 자동으로 걸러 주게 됩니다. 

버전관리를 꼭 해야하는것은 아니지만 지금쯤 부터 버전관리도 같이 연습을 시작하는게 좋기도 합니다. 
따로 검색을하며 따라 와봐도 될것 같습니다. 