


    애니메이션 몽타주 


이번 주제인 애니메이션 몽타주를 시작하기에 앞서 어떤 상황을 가정하고 실습하면 더 이해가 잘 될것 같습니다. 

어떤 컨텐츠를 만들것이냐면 우리가 게임을 시작하고 왼클릭을 할때 마다 가만히 있는게 아니라 총을 쏘는 슈팅 애니메이션을 틀어줄겁니다. 

그 전에 한가지만 수정해보자면 지금 캐릭터가 입력을 받아서 상하좌우로 이동을 잘 하고 있습니다. 하지만 애니메이션은 앞으로 가는 모션밖에 없어서 
재미가 없습니다. 이런것은 나중에 애니메이션 블랜딩이라는 주제를 배우면 앞뒤 좌우로 움직이는걸 혼합해 사용하면 되긴하지만 지금 다룰 내용은 아니기 때문에 
지금은 대강 캐릭터라 앞으로 가면 앞을 쳐다보고 뒤로 가면 뒤를 쳐다보고 좌우도 마찬가지로 해당 방향을 보면서 이동하는 식으로 만들어보겠습니다. 

지금 입력과 컨트롤러에 대한 내용이 계속 나오고 있는데 이것은 정말 많이 실습해보고 익숙해져야합니다. 
우리가 만들 게임이 FPS 일 수도 있고 TPS 일 수도 있고 롤같은 탑뷰 게임이나 아니면 RPG 게임 일 수도 있습니다. 
각 장르마다 다양한 조작법이 있을 수 있으니 입력과 컨트롤러에 익숙해져야합니다. 

먼저 BP_Player 를 열어보겠습니다. 일단 고쳐야 할 부분은 지금 캐릭터의 Yaw와 컨트롤러의 Yaw 가 일치해 좌우 회전이 같이 되고 있는데 이것을 수정하는법은 간단합니다. 
컴포넌트 창에서 BP_Player 를 선택하고 디테일즈를 보면 Pawn 옵션란에 Use Controller Rotation Yaw 옵션이 켜져 있는데 이걸 꺼주겠습니다. 이것이 컨트롤러의 Yaw와 캐릭터의 Yaw를 일치시키는 옵션이었습니다.

게임을 실행해보면 이제는 정말 카메라를 따라 회전하지 않고 자신을 기준으로 움직이고 있습니다. 
이 상태에서 카메라를 캐릭터의 앞방향과 일치하지 않게 둔 상태에서 앞으로 이동하는 키를 누르면 카메라 방향이 아니라 자기를 기준으로 앞을 가고 있는데 
이것은 와우에서 사용하는 방법이고 
지금 우리가 실습할 방법은 가만히 있을 때는 캐릭터가 카메라 방향을 따라 오지 않지만 앞으로 가는 키를 누르면 화면 기준 앞으로 이동하게끔 해주고 싶습니다. 

이것은 어떻게 만들면 될까요? 
캐릭터 무브먼트 의 디테일즈중 캐릭터 무브먼트(회전 세팅)이라는 것이 있습니다. 여기서 컨트롤러 선호 회전이라는 옵션이 있었는데 이것은 아예 캐릭터의 시점이 카메라에 고정되지는 않지만 
캐릭터 무브먼트 컴포넌트에 설정한 속도로 카메라를 향해 캐릭터가 서서히 돌아서게끔 해줍니다. 이 옵션이 아니라 그 밑에 있는 
Orient Rotation to Movement 무브먼트 방향으로 회전 조정 이라는 옵션이 있습니다. 이것을 켜고 실행해보겠습니다. 

게임을 실행해서 카메라를 움직이고 전진을 해보면 별로 달라진게 없어보입니다. 하지만 좌우로 움직여보면 이전과 다르게 입력한 방향으로 이동하는게 아니라 
그쪽 방향으로 회전을 하고 있습니다. 왜 제자리에서 돌고 있는지 이해하려면 방금 켠 옵션이 어떤 작용을 하는지를 알아야하겠습니다. 

원래의 상태에서 좌우 키를 누르면 해당 방향으로 좌표가 이동하는것이었는데 
무브먼트 방향으로 회전 조정이라는 옵션을 키면 그 이동한 좌표방향으로 회전이 같이 움직이는것입니다. 그래서 옆으로만 가도 뺑뺑 돌고 있습니다. 

BP_PlayerController 를 보면 앞으로 가는것과 옆으로 가는것을 어떻게 만들었냐면 플레이어 컨트롤러가 빙의된 플레이어의 방향을 기준으로 앞방향 혹은 오른쪽 방향으로 이동하게끔 설정해놨고 
입력에 따라 반대 부호로도 가게끔 해놨습니다. 이 현재 자신의 방향기준 오른쪽 방향을 주는 부분이 무브먼트 방향으로 회전 조정 옵션과 맞물려 이렇게 동작하는겁니다.

그러면 해결 방법은 어떻게 될까요? 
이동하는 벡터를 캐릭터 기준의 앞과 오른쪽으로 하는게 아닌 카메라가 바라 보고 있는 방향 기준의 앞과 오른쪽 방향으로 이동하게끔 수정해주면 될것 같습니다. 
그런데 지금 카메라의 방향은 컨트롤러의 방향과 일치하도록 해놨었습니다. BP_Player의 스프링 암 옵션중 Use Pawn Controller Rotation  이라는 옵션이 그것입니다. 
폰을 조종하는 컨트롤러의 Rotation을 스프링 암의 Rotation으로 삼겠다는것인데 
이 컨트롤러는 Turn, LookUp 이라는 축 맵핑 입력값대로 Add Yaw Input과 Add Pitch Input 을 받아서 Rotation을 삼았었습니다. 
그러면 카메라의 로테이션을 기준으로 앞과 오른쪽을 방향 벡터로 할것이라면 컨트롤러의 앞과 오른쪽을 방향 삼는다는것과 같습니다. 
즉 BP_PlayerController 에서 Add Movement Input 에 연결해주고 있던 방향벡터는 Get Player Pawn 이라는 컨트롤러가 빙의한 폰을 가져오고 이 폰의 앞 벡터 오른 벡터를 연결해주고 있었는데 
이것 대신 플레이어 컨트롤러 자신의 앞 벡터 오른 벡터를 Add Movement Input에 넘겨주면 되겠습니다.

이렇게 하고 게임을 시작해보면 이제 캐릭터를 움직여보면 카메라 기준의 앞뒤좌우로 이동하게 됩니다. 



다음으로 작업해보고 싶은 것은 마우스를 클릭할때마다 총을 쏘는것을 구현해보겠습니다. 먼저 총을 쏘는 애니메이션이 있는지 벨리카 리소스쪽에서 찾아보겠습니다. Fire 로 검색해보면 
몇가지 애니메이션 에셋이 나옵니다. 이 중에서 오늘 사용해볼것은 Primary_Fire_Fast 입니다. 이것을 우리가 출발과 정지 애니메이션을 수정했던 폴더 Animations로 복사해줍니다. 
이것 역시 파일이름 뒤에 _Edited 를 붙여서 수정버전이라고 티를 내겠습니다. 

Primary_Fire_Fast_Edited 에셋을 열어보면 캐릭터가 지향사격으로 한발씩 쏘는 애니메이션입니다. 그런데 만약 단발이 아닌 연사를 하고 싶다면 애니메이션을 조금 줄여 보겠습니다. 
한 10프레임 까지만 남기고 뒤는 날려주겠습니다. 

수정한 애니메이션을 어떻게 적용해야할지 살짝 고민이 됩니다. 애니메이션은 지금까지 ABP_Player 의 ChoseAnim 에서 또 새로 상태를 추가해 클릭시 이 Fire 애니메이션을 틀어주도록 하면 되지 않을까 
싶습니다. 하지만 이렇게 하면 문제가 생기는데 우리가 이동을 하는 중에 총을 쏘면 캐릭터가 이동모션이 끊기면서 총을 쏘게 될겁니다. 
다른 RPG 게임이라던가 롤 같은 게임은 그것이 이상하지 않을 수 있습니다. 하짐나 슈팅게임에서 총을 쏘려면 꼭 멈춰서 쏴야하는것은 어색합니다. 

그래서 오늘 알아볼 애니메이션 기법인 애니메이션 몽타주가 필요합니다. 
애니메이션 몽타주는 정말 온갖곳에 응용할 수 있는 기법입니다. 
오늘 만들어 볼것은 애니메이션을 섞어서 상반신은 총을 쏘는 애니메이션을하고 하반신은 이동하는 애니메이션으로 만든다건가 할 수 있습니다. 

애니메이션 몽타주의 원래 용도를 정확히 말하면 편집하는 개념에 가깝습니다. 
몽타주라는 단어의 정의를 검색해보면 영화나 사진 편집 구성의 한 방법이고 따로따로 촬영한 화면을 적절하게 떼어붙여 하나의 긴밀하고도 새로운 장면이나 내용으로 만즈는 일.
이라고 합니다. 
그리고 사실 언리얼의 애니메이션 몽타주도 매우 흡사한 개념입니다. 

애니메이션 몽타주를 사용하기 위해서는 Blueprints 폴더의 빈 곳을 우 클릭하고 애니메이션 란 중에서 애니메이션 몽타주를 추가하면 됩니다. 만들때 어떤 스켈레톤을 대상으로 할건지 
골라달라고 합니다. 우리가 작업하던 Belica_Skeleton을 골라주고 이 파일의 이름은 AM_Fire 라고 이름짓겠습니다.

이 AM_Fire를 열어보면 다른 애니메이션 파일과 비슷해보입니다.
몽타주는 여러 화면들을 접붙힐 수 있다고 했었습니다. 에셋 브라우저에서 Primary_Fire_Fast_Edited 를 가져와서 가운데 밑쪽에 재생바 같은 곳에 드래그 드롭해줍니다. 
그러면 일단 이 Primary_Fire_Fast_Edited 애니메이션을 실행할 수 있습니다.

여기서 끝이 아니고 다른 애니메이션을 덧붙힐 수 있는지 다른 애니메이션을 또 추가해보겠습니다. Cast 라는 시전 모션같은 애니메이션을 추가합니다. 또 다른 애니메이션 Death_A라고 하는 애니메이션도
추가해주면 위의 프리뷰에서 총을 쏘고 캐스팅을 하고 죽는 모션까지 연달아 진행이 됩니다. 
그런데 이렇게 3가지 애니메이션을 붙혔다고 해서 꼭 시작 부터 끝까지 틀어줘야한다는것은 아닙니다. 중간에 부분적으로 틀어 줄 수도 있습니다. 
언리얼 공식 문서의 애니메이션 몽타주 텍스트를 보면 이것을 음반에 비유을 합니다. 

몽타주를 사용할때 먼저 재생바를 잘 살펴보면 몽타주(Default Group)이라는것을 설정해주고 또 하나의 그룹안에는 여러개의 슬롯들로 이루어져있습니다. 
하나의 슬롯은 또 여러개의 섹션으로 이루어져있습니다. 지금은 Default 섹션 밖에 없는데 여기에 지금 애니메이션들을 연달아 배치해 놓은겁니다. 

다시 정리하면 애니메이션 몽타주는 그룹, 슬롯, 섹션 그 다음으로 실제 결과물이 온다는것입니다. 
이것을 언리얼 문서에서 말했던 음반의 비유를 들어보자면 
하나의 음반에는 곡들이 있을겁니다. 곡이 하나만 있을 수도 있고 여러 곡이 있을 수도 있는데 이 곡의 개념이 슬롯이라고 할 수 있습니다. 
또 하나의 곡 안에는 곡의 구간들이 있을겁니다. 이것이 섹션입니다. 

섹션을 나눌때 지금 추가한 애니메이션 기준으로 Cast 애니메이션 시작 지점을 우클릭해 New Montage Section 을 생성해 여기가 Cast 섹션이라고 만들고 또 죽는 모션도 Dead 섹션을 만들어 줄 수 있다던가 
합니다. 이미 있던 Default Section 이름도 Start 로 바꿔 줄 수도 있습니다.

그래서 구간별로 관리하게 되면 나중에 원하면 Start 섹션부터 Cast 섹션 전까지만 실행해줄 수 있습니다. 
어디서 이 작업을 하는가 하면 몽타주 창의 오른쪽 아래에 에셋 브라우저 탭 옆에 있는 몽타주 섹션 탭을 보면 Start > Cast > Death 로 이어져 있는데 이 화살표를 클릭해 링크 제거를 한 후 
다시 프리뷰를 보면 링크를 제거한 위치에서 이후 애니메이션이 재생되지 않습니다.  
Start 와 Cast 사이의 링크를 제거하고 프리뷰를 보면 그냥 총을 쏘는 모션이 반복되고 마찬가지로 Cast 와 Death가 이어져 있는 부분을 그냥 실행하면 두 애니메이션이 연달아 재생되지만 
그 사이의 링크를 제거하면 또 Cast 따로 Death따로 재생이 됩니다. 
이렇게 몽타주를 이어 붙히고 끊을 수 있다는 것입니다. 

현재 이렇게 작업한 것을 Start 섹션부터 재생하면 총을 쏘는 모션만 나올겁니다. 
만약에 RPG 게임에서 콤비네이션을 만든다고 했을때 한 버튼만 누른다고 연계기가 알아서 나가는게 아닌 연속해서 버튼을 눌러야 연계기가 나간다면 이렇게 섹션을 나눠서 
코드에서 특정 조건을 만족하면 다음 섹션을 재생해 준다던가 할 수 있을겁니다. 

섹션은 이런 내용이었고 그 윗단계인 슬롯은 음반에서 트랙, 곡의 개념이라고 했었습니다. 음반에는 곡들 중에서 타이틀 곡도 있을것이고 그냥 수록곡들도 있을겁니다. 

슬롯을 굳이 구분해 사용하는 이유는 말로 설명하기 보다 실습이 더 이해하기 좋습니다. 
슬롯 옆에 화살표를 눌러서 이미 만들어진 다른 슬롯으로 바꿀수 있습니다. 이 바꿀 수 있는 슬롯의 이름을 보면 Upper Body 라거나 Arms And Head 같은 이름입니다. 
이름을 보면 알겠지만 인체의 이름으로 슬롯의 이름이 지어져 있습니다.

그래서 슬롯별로 나눠서 관리를하면서 상반신은 총쏘는 애니메이션을 틀어주고 하반신은 앞으로 가는 애니메이션을골라줄 수 있습니다. 

우리의 실습을 어떻게 진행할것이냐면 우리가 사용할 그룹을 새로 만들어 줄겁니다. 먼저 AM_Fire 창을 연 상태에서 언리얼 옵션중 창 옵션을 열고 애님 슬롯 매니저라는 옵션을 클릭해 열어줍니다. 
그러면 몽타주 섹션 옆에 애님 슬롯 매니저라는 탭이 생깁니다. 이 탭에서 Add Slot 슬롯 추가를 해서 새 슬롯을 추가해주겠습니다. 새 슬롯 이름을 Fire 라고 하겠습니다.

그리고 나서 재생바에 슬롯을 우리가 만든 Fire 슬롯으로 바꿔줍니다. 이때 갑자기 프리뷰가 재생되지 않으면 다시 슬롯옵션을 열어서 프리뷰 슬롯이라는 옵션을 클릭해 주면 됩니다.
이제 Default Group의 Fire 슬롯은 현재 배치한 Fire, Cast, Death 애니메이션을 넣어주겠다 라는 상황인겁니다. 그런데 여기에 Fire 딱 하나만 관리하는게 아니라 여러개를 동시에 넣어 줄 수도 있습니다. 
Default Group의 화살표를 눌러서 새 슬롯을 추가할 수 있는데 Upper Body 슬롯을 추가하면 Fire와 UpperBody 두 슬롯을 설정한겁니다. 

이 두 슬롯중에서 아무 세션이 없는 UpperBody 슬롯을 프리뷰 슬롯으로 지정하면 위의 프리뷰 창이 또 아무런 애니메이션이 안 틀어집니다. 
지금 한것은 그냥 예시기 때문에 만들어 줬던 UpperBody 슬롯은 삭제하겠습니다.

지금껏 이야기가 길었는데 결국 애니메이션 몽타주를 실행하고 Start 섹션만 실행하면 총을 쏘는 애니메이션만 재생되고 넣어준 Fire 슬롯을 기억해서 나중에 애니메이션을 적절히 섞어주면 되겠다 라고 할 수 있습니다. 

이제 다시 오늘 할 작업을 진행해보겠습니다. 
총을 쏘는 입력을 받아야 하니 입력을 추가하겠습니다. 프로젝트 세팅 > 입력 > 액션 맵핑 에서 Fire라는 이름으로 왼클릭을 입력으로 받아주겠습니다. 
다음으로 코드를 만들어 줘야하는데 입력과 관련된것은 BP_PlayerController 에서 작업하고 있었습니다.

BP_PlayerController 이벤트 그래프에 Fire Action Input 이벤트를 추가하고 이 이벤트에서 입력이 들어오면 어떤 동작을 할지를 넣어주면 되는데 
그 동작이란것을 BP_Player 에 함수로 만들고 그걸 가져와 Fire 이벤트에 물려주겠습니다. 

BP_Player 로 왔습니다. FireWeapon 이라는 이름의 함수를 추가하고 자세한 내용은 일단 좀 있다 채울겁니다 잊기전에 BP_PlayerController의 Fire 이벤트에 물려줍니다. 
Get Player Character 를 하고 BP_Player로 캐스팅을 하고 이어서 FireWeapon을 호출해주면 됩니다. 

다시 BP_Player 의 FireWeapon 함수로 와서 내용을 채워주겠습니다. 
여기서는 그냥 간단하게 몽타주를 틀어주는 기능을 추가하겠습니다. 나중에가면 여기에 더해서 이펙트와 사운드를 입히고 또 겨냥하는 방향에 피격 가능한 물체가 있는지를 체크해서 피격 판정을 호출해줘야 하지만 
지금은 일단 애니메이션 몽타주를 실습하는 시간이니까 여기까지만 해줄 겁니다. 

몽타주를 틀어주기위해 Montage 로 함수를 검색해보면 알아보기 쉽게 Play Anim Montage 라는 함수가 나옵니다. 이 함수의 입력으로 어떤 몽타주를 실행할건지 골라줄 수 있는데 
우리가 만들었던 AM_Fire 를 선택해줍니다. 그리고 맨 밑의 입력에서는 Start Section Name 이라는 곳이 있는데 말 그대로 시작할 섹션의 이름 Start를 넣어주겠습니다.
이렇게 하면 이제 왼 클릭 입력을 받아서 플레이어의 FireWeapon 을 호출하고 또 여기서는 AM_Fire 몽타주를 실행해주는데 Start 섹션부터 실행해주겠다고 예상할 수 있습니다. 

한번 게임을 실행해 왼클릭을 해보면 아직은 아무 반응이 없습니다. 
왜 이런것이냐면 사실 몽타주만 실행해주는게 끝이 아니라 다시 ABP_Player로 가서 코드를 추가해주긴 해야합니다. 

몽타주를 실행해 줬다고는 해도 결국은 애니메이션 블루프린트 상에서 최종적으로 재생할 애니메이션을 골라주는것이기 때문에 캐릭터 클래스에서 호출하는걸로 끝나는것은 아무 의미가 없습니다.

현재 ABP_Player의 AnimGraph에서 ChoseAnim 에서 재생해줄 애니메이션을 골라주고 있는데 여기에 원하는 애니메이션 몽타주의 슬롯을 가져와 섞어줄 수 있습니다. 
AnimGraph 에서 함수를 검색해볼겁니다. Slot 을 검색해보면 Montage 산하에 Slot'Default Slot' 이라는 노드가 있습니다. 이것을 배치해줍니다. 

Slot'Default Slot' 노드를 선택해보면 세팅의 슬롯이름이 Default Slot 으로 되어있는데 우리가 작업했던 슬롯은 Fire 슬롯 이니까 그것을 선택해주겠습니다. 그러면 노드의 이름이 Slot'Fire'로 바뀝니다.
그러고 나서 언제든지 실행하고 있는 애니메이션 몽타주중에서 Default 그룹에 Fire 라는 슬롯이 재생되고 있다면 덮어 씌우겠다는 의미로 ChoseAnim 의 핀을 Slot'Fire'로 이어주고 여기서 다시 
Output pose 노드에 연결해주겠습니다. 
이러면 만약 Slot'Fire' 가 실행되지 않은 상태면 그냥 ChoseAnim의 애니메이션이 재생 될거지만 만약 실행되면 Slot'Fire'가 동작해 총쏘는 애니메이션이 적용될겁니다. 

게임을 실행해보면 이제 클릭을 하면 총을 쏘는 애니메이션이 섞입니다. 

그런데 이 다음 문제는 이동을 하면서 총을 쏘면 이동과 총쏘기가 같이 되기는한데 어색합니다. 두 애니메이션이 잘 섞이지 않아서 생기는 문제인데 
상체는 Fire, 나머지는 Jog_Fwd 를 재생하도록 반반 쪼개주겠습니다. 

이제 본격적으로 애니메이션을 섞어주는 내용인겁니다. 
다시 ABP_Player 의 AnimGraph 를 수정해줘야합니다. 우리가 블루프린트 클래스를 사용할때 어떤 함수의 반환값을 나중에 재사용할 것 같으면 변수로 승격해 저장해 둔다음 필요할때 가져와 사용하곤 했습니다. 
애니메이션 블루프린트도 비슷합니다. 

ChoseAnim 의 반환 핀을 끌어서 빈곳에 놓고 Cash 라고 검색해보면 New Saved Cached pose 라는 기능이 있습니다. 이것이 골라준 애니메이션 에셋을 임시로 저장하겠다 라는 것입니다.

지금까지 ChoseAnim 이라고 사용했던 State Machine 을 보통 문서에서는 Locomotion 이라고 부릅니다. 용어를 문서와 통일하기위해 앞으로는 이렇게 이름을 바꿔주겠습니다.
임시 저장한 Cached Pose는 임시 저장했다는 뜻으로 Cached Locomotion 이라고 이름짓겠습니다.

이렇게 저장한 Cached Locomotion과 Slot'Fire'를 섞어주기 위해 빈 공간에서 Use Cached Pose 'Cached Locomotion' 을 배치하고 그 반환 핀을 Slot'Fire'에 연결해줍니다.
이러면 아까처럼 Slot'Fire'가 실행되고 있다면 두 애니메이션이 섞인 결과물이 나오는데 이 새로운 결과물도 또 Cached 를 해줍니다. 이름을 Cached Fire 라고 짓겠습니다.

그러면 이제 Cached Locomotion 과 Cached Fire 두가지 임시저장 애니메이션이 생깁니다. 이 두가지 애니메이션을 섞어줄겁니다. 둘을 섞어주기 위해서 사용하는 기능으로 
Layered blend per bone 이 있습니다. 이 함수에 섞어줄 두 Pose를 넣어주고 어떤 Bone을 기준으로 섞을지를 명시해주면 됩니다. 
Cached Locomotion 과 Cached Fire 를 연결해줍니다. 

Cached Locomotion을 BasePose에 연결해주고 Cached Fire를 Blend Pose 0 에 연결해주었습니다. 

다음으로 어떤 뼈를 기준으로 섞어줄지 명시할 차례인데 Layered blend per bone 의 디테일즈를 보면 레이어 설정이라는 옵션이 있습니다. 
이 옵션을 펼쳐서 레이어 설정>인덱스[0]>분기필터 를 보면 옆에 + 버튼으로 뭔가를 넣어줄 수 있습니다. 누르면 본 이름과 뎁스 블랜드값을 넣어줄 수 있습니다.

이 본 네임에 넣어준 뼈를 기준으로 그 위 아래를 설정하게끔 유도해줘야합니다. 
아까 사용했던 애니메이션을 보면 어떤 본을 기준으로 할지 찾아야하는데 우리 리소스인 Belica 의 경우에는 spine_01 이라는 bone이 상체와 하체를 잇는 bone입니다. 
그래서 Layered blend per bone 의 디테일즈 분기 필터에 spine_01 이름을 적어줍니다. 

그리고 나서 Layered blend per bone 의 반환 핀을 Output Pose에 연결해주면 최종적으로 두 레이어가 석여서 상하체가 적절하게 나오게 됩니다.

아직 잘 이해가 안가겠다 싶으면 역시 공식 문서를 읽어보면 됩니다. 공식문서에서는 Blend Weight 값이 1.0이면 Blend pose 100퍼센트 사용하겠다는것이고 
0.0을 주면 Blend Pose를 사실상 무시하겠다라는 뜻입니다. 아까 설정해준 spind_01 기준으로 그 위쪽은 Cached Fire를 1.0으로 적용하겠다 가 지금 우리 코드 상황입니다.


마지막으로 한가지 더 알아보겠습니다 이런 질문이 많다고합니다. 만약 총게임인데 내가 장비하고 있는 총에따라 모션이 달라져야하면 어떻게 해야할지 가 궁금합니다.
지금 Belica 라는 리소스는 총기를 한가지만 사용하는 사양이지만 만약 카운터 스트라이크 같은 게임의 경우는 여러 총기를 사용하는 게임인경우는 
각각 애니메이션이 달라질겁니다. 이것도 당연히 기능이 만들어져있습니다.

DevMap의 컨텐츠 브라우저를 보면 AM_Fire를 우클릭해보면 이전에 블루프린트 클래스를 상속받은 자식 클래스를 만드는것처럼 애니메이션 몽타주도 자식 몽타주를 만들어 줄 수 있습니다.
만약 AM_Fire의 자식 몽타주를 만들었다면 기본적인 기능들은 다 상속받지만 우리가 원하는 변경점을 수정하면 그 부분만 오버라이드 됩니다. 
이 자식몽타주의 Fire 애니메이션을 각 총기에 맞는 애니메이션으로 바꿔주면 적은 반복작업으로 여러 애니메이션 몽타주를 사용할 수 있습니다.


이렇게 해서 애니메이션 몽타주를 알아봤습니다. 이 애니메이션 몽타주는 고급 기법이기는하지만 언리얼이라는 툴에서 많은 부분 도와주고 있기 때문에 아주 어렵게 사용하는것은 아닐겁니다.

다시 정리를 해보자면 이번시간에 애니메이션 몽타주를 만들었는데 몽타주라는것은 영화난 사진에서 여러 화면을 자르거나 덧붙히는 편집기법이었습니다. 이것을 애니메이션에도 사용하는것이 
애니메이션 몽타주였습니다. 또 애니메이션 몽타주를 이루는 단위로 가장 큰 단위는 Group 이 있고 이것은 말하자면 '음반'이라고 할 수 있습니다. 그 아래 단위로 Slot 이라고 해서 '곡'에 해당하는 단위가 있었고 
이 곡의 각각 파트를 Section 이라고 했습니다. 
이 Slot에 원하는 애니메이션들을 나열하고 원하는 프레임에 Section을 생선하면 되었습니다. 

그리고 원하는대로 애니메이션 몽타주를 만들었다면 코드에 적용시켜야합니다. 몽타주를 실행할 함수를 만들어 안에서 Play Anim Montage 함수를 호출하는데 사용할 몽타주 이름과 시작 세션의 이름을 적어줍니다. 
입력을 받는 컨트롤러 클래스에서 호출을해주는데 여기까지한다고 해서 애니메이션이 그냥 재생되는것은 아니었습니다. 
결국 애니메이션을 재생하는곳은 애니메이션 블루프린트이고 우리가 사용하는 ABP_Player 에서 몽타주를 적용해야합니다. AnimGraph 에서 작업을 하는데 
이전 시간까지 애니메이션을 골라주던 상태기계인 Locomotion 과 몽타주를 섞어줘야합니다. 먼저 상태기계의 출력 Pose를 임시저장 Cached 를 해주고 이 Cached Locomotion을  
Slot'Default' 라고 하는 몽타주에서 가져온 슬롯을 연결해줍니다. 기본이 Slot'Default'인데 만약 우리가 섹션에 애니메이션을 넣어줫던 슬롯을 Fire 라고하면 Slot'Default'의 디테일즈에서 Fire 슬롯을 골라줍니다. 
그러면 Slot'Fire' 라고 이름이 바뀝니다. 

Cached Locomotion 을 연결한 Slot'Fire'의 반환핀을 또 다신 Cached 해서 Cached Fire 라고 합니다. 
이렇게 Cached Locomotion 과 Cached Fire를 Layered blend per bone 함수에 넘겨주어서 어떤 본을 기준으로 레이어를 나눠 블랜드 해줄 수 있습니다. 
어떤 본을 기준으로 나눌지를 Layered blend per bone의 옵션중 레이어 설정의 분기 필터에 추가해주는데 분기될 본의 이름을 넣어주면됩니다.
그리고 나서 이 Layered blend per bone 함수의 출력 Pose를 Output Pose에 연결해주면 끝입니다.