

    충돌 기초


충돌에 대해 알아보겠습니다. 

사실 3D 게임에서는 충돌없이는 아무것도 만들 수 없습니다. 그만큼 중요한 개념입니다. 

충돌이라는 단어는 많이 들어봤을겁니다. 현실세계에서도 충돌이라는 말을 많이 합니다. 그럼 게임에서 충돌은 뭘까요?

일단 기본적으로 만들었던 DevMap 의 Floor 도 충돌체이기 때문에 PlayerStart 지점에 플레이어를 스폰한다음 Floor에 서 있을 수 있었습니다.

실습을위해서 큐브모양 충돌체를 하나 만들어주겠습니다.
블루프린트 클래스하나를 만들어줄건데 Actor를 상속받아서 BP_Box 라고 이름짓겠습니다.
그리고 Box Collision 을 하나 추가해주고 스케일을 5배씩으로 늘립니다. 그리고 옵션중에 Hidden In Game 게임에서 숨기기를 false 로 꺼줍니다. 게임을 실행했을때 
콜리전을 표시해준다는것입니다. 

그러고 나서 DevMap 에 그냥 드래그드롭으로 배치해줍니다. 처음엔 땅에 박혀있을테지 적절히 뽑아서 땅위로 올립니다. 
게임을 실행해보면 맵에 큐브모양 윤곽선이 있습니다. 하지만 플레이어로 다가가도 딱히 막히거나 하진 않습니다. 

이제 충돌중에서 가장 기본적인 충돌인 벽같이 이 영역을 지나갈수 없게끔 해주는 실습을 해보겠습니다.

먼저 BP_Player 도 역시 캡슐 컴포넌트를 가지고 있어서 플레이어역시 충돌 오브젝트입니다. 지금 Collision Cylinder 라고  양끝이 둥근 원통형태의 충돌 범위를 가지고 
있습니다. 물론 이렇게 대강 원통모양 말고 캐릭터 메쉬 그자체를 충돌 범위로 삼을 수도 있지만 그렇게 하면 게임에 부하가 심할겁니다. 
캐릭터 메쉬는 무수한 정점들과 정점을 잇는 삼각형들로 이뤄져있는데 이 삼각형들에 충돌했는지 판별하는것보다는 간편한 범위를 체크하는게 좋습니다.
물론 이렇게 하면 섬세한 충돌체크는 못할거긴합니다. FPS 게임을 만들거라면 이 캡슐 컴포넌트만으로는 부족하고 메쉬 자체보다는 간소화된 히트박스를 사용하게 될겁니다. 

그건 그렇고 우리가 지금 관심있는 충돌과 관련된 옵션은 디테일즈에 Collision 영역에 있습니다. 이 영역에 여러 옵션들이 있지만 먼저 콜리전 프리셋이 접혀있는데 한번 열어보겠습니다. 
기본적으로 Pawn으로 되어있는데 이 Pawn 인 상태에서는 다른 디테일한 옵션은 선택할 수 없지만 그래도 확인은 할 수 있는데 여러 영역에 대해 
Ignore, Overlap, Block 을 골라줄 수 있습니다. 이걸 테스트하기위해서 콜리전 프리셋을 Custom 으로 바꿔보겠습니다.
콜리전 프리셋으로 Custom 으로 바꾸니까 이제는 그 아래의 Visibility, Camera, WorldStatic , WorldDynamics 같은것들을 마음대로 수정할 수 있게 되었습니다.

BP_Box 도 마찬가지로 디테일즈에 콜리전 영역이 있습니다. Box는 콜리전 프리셋이 OverlapAllDynamic 이라고 되어있는데 이것도 Custom으로 바꿔서 작업해보겠습니다.

기본적으로 플레이어와 박스를 만들었는데 둘 다 콜리전 프리셋 안에 오브젝트 타입이라는 속성이 존재합니다. Box 같은 경우는 WorldDynamic 이라고 되어있고 
플레이어는 Pawn 타입으로 되어있습니다.

그래서 세가지 속성이 있다고 했었습니다. Ignore, Overlap, Block 세가지 속성의 뜻은 Ignore 는 충돌을 무시하겠다 라는 것이고 
Block 은 여기를 못가게 막겠다 라는 겁니다. 
아까 하려고 했던 플레이어가 Box 를 통과하지 못하게 하고 싶다고 했었는데 이 Block을 사용하면 될것 입니다.  

플레이어의 콜리전 프리셋 옵션을 보면 WorldDynamic 을 대상으로 Ignore 할지 Overlap 할지 Block 할 지를 정해줄 수 있습니다. 여기서 Block 으로 설정하겠습니다. 
이러면 플레이어의 오브젝트 타입인 Pawn은 WorldDynamic 라는 것을 막아주겠다라는 말이됩니다.
마찬가지로 Box 에서도 콜리전 프리셋을 찾아보면 여기는 Pawn 에 대해 Overlap 으로만 되어있는데 Block으로 설정해주겠습니다.
이런식으로 양쪽에서 대칭적으로 블록해줘야합니다. 

이상태에서 게임을 실행해보면 이제 플레이어는 box를 통과할수 없는 상태가 됩니다.

그러면 양쪽다 Block 이 아니라 한쪽은 Block, 한쪽은 아니라면 어떻게될까요 사실 이게 첨에 Box를 배치한 첫번테 테스트입니다. 그냥 통과가 되는상황입니다. 

다음으로 Overlap은 뭘까요 유니티 기준으로는 Block 을 Collision 이라고 하고 Overlap를 Trigger 라고 부릅니다.
즉 두 오브젝트가 포개져서 두 영역이 곂친다는걸 뜻합니다. 

간단하게 실험해보자면 Box 쪽에서 다시 Pawn에 대해 Overlap 을 하도록 하고 플레이어는 그냥 그대로 Block 을하건 Overlap을 하건 상관이없다고합니다.
일단 이렇게 설정하고 BP_Player 의 캡슐 컴폰넌트 디테일의 아랫쪽으로 가보면 여러 이벤트들이 있습니다. 여기서 On Component Hit 를 추가하고 
또 On Component Begin Overlap, On Component End Overlap 이벤트를 추가해주겠습니다. 
그러면 이 이벤트들이 이벤트 그래프에 배치됩니다. 이것들이 무엇인지 한번 로그를 찍어보겠습니다. 각각 이벤트에 PrintText 를 연결하고 각각 Player Hit, Player Begin Overlap,
Player End Overlap 이라는 로그를 찍도록했습니다. 이어서 Box에서도 마찬가지로 세 이벤트를 추가하고 Box Hit 등등 로그를 찍도록 연결해주었습니다.

각 이벤트가 언제 발생할지를 예상해보자면 먼저 Component Hit 이벤트는 아까처럼 Pawn 과 WorldDynamic 둘다 Block 일때 발생하는 이벤트 입니다.
이 On Component Hit 이벤트의 핀을 보면 여러 정보들이 있습니다. 예를들어서 부딛힝 상대 액터를 Other Actor 로 가져다가 사용할 수 있습니다.
다음으로 Overlap 계열 이벤트들은 곂치기 시작할때와 곂치는게 끝날때를 나눠서 이벤트가 있는것 같습니다. 

먼저 Overlap을 하려면 두 물체 중 하나는 Overlap 을 켜줘야 합니다. 아무거나 상대의 오브젝트 타입을 Overlap 하도록 바꿔줍니다.
이 상태에서 게임을 실행해 플레이어가 박스를 들락날락하면 해당 로그가 뜨는걸 확인 할 수 있었습니다. 

이번에는 둘 중 하나라도 Ignore 일때는 어떻게 될까요 뜻 자체가 무시하겠다는것입니다. 역시 플레이어와 박스 둘 중 하나를 Ignore로 바꾸고 다시 실험해보겠습니다. 
역시나 아무 로그가 뜨지 않는걸 볼 수 있습니다.

즉, 충돌 이벤트는 일종의 보안레벨과 같은데 둘 모두 Block 일때는 두 충돌체가 가로 막을수 있고 둘 중 하나라도 Overlap가 되면 Overlap 이벤트가 호출되고
또 한쪽이라도 Ignore 라면 아예 충돌을 무시하게 됩니다.


그러면 이런 것들을 어떻게 응용할 수 있을까요 

Block 은 그냥 갈수 없는 지역을 뜻한다고 하면 될것인데 Overlap 같이 갈 수 는 있는데 이 영역과 곂쳐지면 뭔가 동작이 일어나야하는경우를 생각해보면 사실 
은근히 많습니다. 맵단위 이동하는 게임이라고 하면 어느 맵에 도착해서 다음 맵으로 넘어갈때 맵의 끝에 도착하면 다음맵으로 갈 조건을 체크할때 사용할 수도 있고 
아니면 다크소울이나 와우에서 어느 지역에 도착하면 웅장한 사운드와 지역의 이름을 화면에 띄워준다던지 또 땅에 떨어진 아이템에 가까이 다가가서 내가 주울수 있는 거리인지를 체크하는데에도 
사용될겁니다.

다시 BP_Player 로 돌아와 콜리전 프리셋 옵션을 보다보면 지금까지 건드렸던건 Object Response 였는데 그 위쪽에 Trace Response 라는 것은 뭘까요 
이 영역에는 Visibility, Camera 라는것이 있는데 이건 물체는 아니지만 충돌과 관련된 처리를 해줘야 하는것입니다. 
예를들어서 Camera 의 충돌이란것이 무슨말인가하면 게임을 실행하고 박스를 지나가보면 카메라도 여전히 같이 통과하면서 똑같은 화면을 볼 수 있습니다. 
그런데 만약 이 박스가 벽이었고 와우처럼 벽에 카메라가 닿으면 그만큼 카메라가 땅겨져서 보이는 식의 게임이 많은데 
이런걸 할때도 충돌의 개념이 사용됩니다. 

한번 실습해보겠습니다. 현재 BP_Box 는 Camera 에 대해 Overlap 하도록 열어놓았는데 Block 으로 닫아준다고 하겠습니다. 그리고 나서 게임을 실행해 플레이어가 박스를 등지게 해보면 
아까 말했던 대로 카메라가 박스를 투시하지 않고 카메라가 당겨집니다.

지금 알아본 이 실습은 카메라 라는 대상을 오브젝트 타입으로 사용한것은 아니고 카메라라는 기능 자체가 다른 물체들과 어떻게 충돌할것인지를 결정해주는 개념입니다.

그러니깐 Object Response 는 실제 월드에 배치된 물체와 어떤 출돌 반응을 할지를 골라주는것이고 Camera 가 포함된 Trace Response 는 실제 물체는 아니지만 충돌 연산이 필요한 것들을 다루고 있다고 할 수 있습니다. 

또 한가지 예를 들면 나중에 실습할것이긴 한데 우리가 왼클릭을 해서 총을 쏘면 화면 정중앙으로 총알이 날아가도록 할건데 이 총알이라고 하는 공격선상에 몬스터의 충돌체가 있으면 피격판정을 계산한다거나 
아니면 슈팅게임이 아니라 RPG 게임이라 근접 공격을 한다면 캐릭터의 공격 범위를 체크해 해당 범위내에 충돌체를 테스트 한다거나 할때 
이런 총의 궤적이나 칼을 휘두르는 범위는 일종의 가상의 물체 라고 할 수 있으니깐 Trace Response 를 사용할 수 있을겁니다. 

다음으로 알아보고 싶은것은 지금까지 Trace 와 Object의 Response를 설정하는것은 알았는데 설정할 수 있는 오브젝트 타입은 이미 언리얼에서 주어지는 타입만 사용해야할까요? 
직접 사용하고 싶은 오브젝트 타입을 늘리고 싶다면 어떻게 해야할지 궁금합니다. 일단은 현재 콜리전 프리셋 옵션내에서 추가할 수는 없고 따로 만들어 줘야합니다. 

우선 DevMap 으로 나와서 위의 메뉴창에서 편집 > 프로젝트 세팅 을 열어줍니다. 프로젝트 세팅 엔진 옵션들중에 콜리젼이라는 것이 있습니다. 
이 콜리젼 옵션에는 Object Channels, Trace Channels 그리고 Preset 들이 있습니다. Preset을 보면 기존에 만들어져있던 기본제공 오브젝트들이 들어 있습니다. 
여기에 우리가 임의로 오브젝트나 트레이스가 필요하다면 위의 Channels 에서 작업해줄겁니다. 

예를 들어 새로운 Object 가 필요하다면 Object Channels 에서 New Object Channels 를 클릭합니다. 그러면 이름을 지을 수 있고 기본적인 속성을 고를 수 있는데 속성은 Ignore, Overlap, Block 중에서 고를 수 있습니다. 
MyCharacter 라는 이름이고 Block 이 기본 속성이라면 MyCharacter 라는 Object는 기본적으로 다른 충돌체들을 막는 속성을 지닌다고 할 수 있습니다.
새 트레이스 채널도 하나 만들어 줄건데 MyAttackRange 라는 이름에 기본으로 Overlap 속성을 가지고 있다고 하겠습니다.

이렇게 우리가 채널을 추가한 다음 아래의 Preset 을 살펴보면 우리가 추가한 채널 대상으로도 규칙이 생성되어 있다는걸 볼 수 있습니다.
예를 들어 프리셋의 Pawn 을 더블 클릭해 규칙을 보면 MyCharacter 대상으로는 Block 을 하고 있고 MyAttackRange를 대상으로는 Overlap 을 하고 있습니다.
채널 관리를 좀 더 꼼꼼하게하려면 새로 채널을 만들때 마다 프리셋의 채널들의 규칙을 하나씩 체크해주는게 좋습니다. 하지만 물론 너무 많으니까 이걸 굳이 하나하나 해야할까 싶기도 하지만 
그래도 첨에 한번씩만 하면되니 왠만하면 한번씩 체크해보는걸 권장한다고 합니다. 

한번 프리셋을 보자면 맨위에 NoCollision 은 콜리전이 없다 라는 의미같은데 Object Type 들은 모두 Block 으로 되어있고 Trace Type 들은 MyAttackRange 만 Overlap, 나머지는 Ignore로 되어있습니다. 
아마 MyAttackRange은 기본이 Overlap 으로 해놓고 MyCharacter는 기본을 Block 으로 해놔서 같습니다. MyAttackRange 를 Ignore 로 바꿔주고 저장했습니다. 
이런식으로 각 프리셋들을 둘러보면서 규칙에 맞게끔 만져주면 되겠습니다.

그리고 우리가 만든 MyAttackRange, MyCharacter는 일단 모든 타입들에 대해 Overlap 혹은 Block으로 규칙을 정해줬다고 할 수 있는데 이게 정말로 그런지 확인하려면 
프리셋 창에 추가해서 확인 할 수 있습니다.

프리셋의 새 프로파일 버튼을 눌러 추가해 줄 수 있는데 MyCharacter를 추가해보겠습니다. 이름 밑에서는 Collision Enabled를 고를 수 있는데 Collision Enabled(Query and Physics) 로 골라줍니다. 
왜 이걸로 골라주는지는 다음시간에 알아볼겁니다. 오브젝트 타입도 고를 수 있는데 MyCharacter 를 골라줍니다. 그리고 설명 Description 도 적을 수 있습니다. 
그 아래로는 Trace, Object 들에 대해 규칙을 정해주는 칸이 있습니다. 

콜리전 프리셋을 사용하는 이유는 그냥 아까 BP_Player에서 실습 했을 때 처럼 클래스마다 콜리전 프리셋에 가서 설정을 해 줄 수도 있지만 앞으로 큰 게임을 만든다고 하면 
매 클래스마다 이런식으로 설정해주는것보다 같은 성질을 공유하는 콜리전 프리셋을 만들어 사용하는것이 좋을것입니다.


정리해보겠습니다. 
이번시간에는 간단한 오브젝트 채널이나 트레이스 채널을 추가해보기도 하고 충돌체 끼리 Block, Overlap, Ignore도 로그를 찍어가면서 확인해봤습니다.
나중에가면 실질적으로 아이템을 줍는다거나 하는 코드를 콜리전 이벤트에 추가하면 그런 기능이 동작하게 되는겁니다. 

다음시간에는 지금처럼 맵에서 플레이어가 그냥 걸어다니는 것 말고 총을 쏘거나 상호작용을 할때 기능들을 추가하면 더욱 게임같을겁니다. 
본격적으로 충돌 정보를 이용해 게임의 완성도를 높여보겠습니다.