

    메쉬와 머티리얼


이전 시간에 실습했던것들은 모두 날려주고 시작하겠습니다. 

스타터 컨텐츠만 다뤄봐도 이 수많은 아트 리소스들을 어떻게 다뤄야할지 막막해질 수 있습니다. 
처음 포트폴리오를 만들때만해도 어떤 리소스가 필요한지도 모를텐데 프로그래머 지망 입장이다 보니 그런것이고 아트직군 이었다면 다 이미 알고 있는 파일들일겁니다. 

이 다양한 아트 리소스중에서 Shapes 라는 폴더에 있는 메쉬와 Textures, Materials 라는 폴더의 내용들일 이번시간의 핵심입니다. 
아주 전문적인 내용이라기보다는 프로그래밍을 할때 필요한정도의 기초적인 내용들을 다뤄볼겁니다.

Props 폴더에보면 SM_Chair 라는 파일을 배치해보면 노란색 의자가 배치가 됩니다. 이 의자가 어떻게 그래픽적으로 배치가 되는지를 알아보겠습니다.

DirectX 기준으로 그래픽스를 설명하자면 렌더링 파이프라인이라는 과정을 거쳐 물체를 그립니다. 
가장 처음 Input Assembler 라고 물체를 그리기 위해 필요한 여러 데이터를 받는 부분부터해서 Vertex 정점을 이어 선으로 가장 기본이 되는 모양을 잡는 Vertex Shader 단계 
이후 여러 단계를 거쳐 결국 Output Merge 단계에서 최종적으로 화면에 어떻게 그려져야할지를 정하게되는 것이 렌더링 파이프라인입니다. 

이 중 인풋 어셈블리에서 메쉬라는 단어가 처음 등장하게 됩니다. 
다시 의자물체를 보면 결과물을 보면 지금은 그냥 당연한 의자이지만 아주 자세히 보면 이것은 어떤 물체를 깍아 만든것이 아닌 무수한 삼각형들이 이어붙어서 의자의 형태를 하고 있는것입니다. 
의자 뿐만아니라 기본 셰이프인 큐브 같은것들도 마찬가지로 삼각형들로 모양을 잡아 놓은겁니다.
이런 삼각형에 대한 정보들을 모아서 인풋 어셈블러에 넣어주게 됩니다. 

그리고 나서 이 물체를 카메라가 어떤 각도로 찍는지에 따라 화면이 출력되는 좌표도 달라질것이고 또 어떤 색상으로 보일것인지 등을 계산해주게 됩니다. 

그러면 이 장황한 렌더링 파이프라인 을 어떻게 접근하는가 하면 언리얼에서 중간에 코드로 제어할 수 있도록 되어있는데 이것을 셰이더 Shader 라고합니다. 
셰이더는 이 그래픽스에 사용하는 일종의 함수라고 할 수 있습니다. 셰이더 코드에 따라 어떻게 표현할지를 정해주는데 함수에는 어떤 인자를 받아 동작하는데 
이 인자를 셰이더에서는 머티리얼을 뜻합니다. 

하고싶은 이야기는 메쉬는 물체의 형태만을 이루는 덩어리이고 여기에 색상을 입혀야 하는데 그것이 머티리얼이다 라는 말입니다. 


DevMap 에 기본 큐브를 하나 배치하고 여기에 우리만의 머테리얼을 적용해보는 실습을 해보겠습니다. 
콘텐츠 폴더에서 우클릭을 해 기본 에셋 생성중 머티리얼을 추가해보겠습니다. 이름은 그냥 M_Test라고 하겠습니다. 이 파일을 열어보면 연결해줄 것이 많이 있습니다. 
아까 말했던 셰이더라고 그래픽 파이프라인의 함수같은것이 있고 거기에 인자역할을 할 머테리얼 전해줘야 한다고 했는데 그 인자들을 머테리얼에 담아 한번에 건내주는 것입니다. 

좀 더 쉽게 이해하기 위해서는 간단하게 말해 어떤 물체가 어떻게 보여야하는지 그 속성들을 머테리얼에 담는다고 할 수 있습니다. 
머테리얼을 한글로 말하면 재질 이라고 할 수 있는 만큼 이 물체의 재질이 어떤지를 뜻합니다. 

머티리얼의 인자들을 살펴볼건데 가장위에 Base Color 말그대로 기본 색상을 말하는데 이 인자를 넣어주기 위해서는 숫자 3을 누른 상태에서 빈곳을 왼클릭하게되면 
x, y, z 3가지 값을 받는 노드가 하나 생기고 이걸 Base Color 부분에 이어줍니다. RGB값을 뜻하는것 같은데 빈곳을 더블 클릭하면 색상 팔레트가 나와 원하는 색을 고를 수 있고 
아니면 색상 rgb 코드를 직접 입력해줄 수 도 있습니다. 
일단 그렇게 어떤 색상을 지정해 베이스 컬러로 설정해주고 저장 후 닫아줍니다. 

아까 배치해놨던 큐브에 M_Test 를 드래그 드롭해보면 지정했던 베이스 컬러로 색상이 칠해지는걸 볼 수 있습니다. 
그리고 이 큐브의 디테일즈에서 머티리얼 항목을 가보면 M_Test가 연결되어있는걸 확인할 수 있습니다. 

결국은 이 엑터라는것은 여러가지 정보를 가질 수 있는데 그 중 재질에 관한 정보를 머티리얼이라는 타입의 파일로관리하는것입니다. 


여기까지만 말하면 메쉬와 머티리얼의 관계는 간단합니다. 메쉬는 물체의 형태, 머티리얼은 그 물체의 색상밑 재질을 뜻하는데 여기서 끝이 아닙니다. 

방금만든 큐브는 단순한 큐브형태에 단일 베이스 색상만 발라주었습니다. 이런 간단한 물체가 아니라 몬스터나 플레이어 캐릭터라던가 아니면 스타터 컨텐츠에 있던 의자만 보더라도 
단일색생이 아니고 좀더 복잡한 색상 조합이라는걸 알수 있습니다. 
이런 복잡한 색상은 아까 만든 베이스 컬러로는 어떻게 만들수 있을까요? 

물체 메쉬의 좌표별로 색상을 지정해줘야 가능해지는데 그 역할을하는것이 Texture 라고 합니다. 텍스쳐를 비유하자면 단색 색종이를 붙히는게 아니라 어떤 무늬가 있는 시트지를 붙이는 것입니다. 
텍스쳐도 여러종류가 있는데 색상에 대한 텍스쳐가 있는가 하면 반사정도 같은 정보를 가지고 있는 텍스쳐도 있습니다. 

텍스쳐 실습을 해보기 위해 스타터 컨텐츠 Textures 폴더의 가장 첫 텍스쳐를 복사해 아까 만든 M_Test 머티리얼이 있는 폴더에 붙여 넣어봅니다. 
이 복사한 텍스쳐를 M_Test에서 가져와 적용해줘도 되지만 좀 더 간단하게는 텍스쳐자체를 드래그 드롭으로 큐브에 끌어다 놓으면 해당 텍스쳐를 색으로 삼은 머티리얼 파일이 만들어 집니다. 
이렇게 만들어진 머티리얼 파일을 열어보면 베이스 컬러에 연결된 노드가 있는데 Texture Sample 이라는 노드입니다. 

텍스쳐이미지와 물체의 세부적인 좌표를 매칭해서 각 픽셀에 색을 정해주는것인데 이 세부적인 색상과 좌표매칭에 대한 내용은 좀 더 깊이 들어가서 UV 좌표에 대해 알아야합니다.
UV 좌표를 쉽게 설명해보자면 큐브의 정점별로 텍스쳐를 어떻게 매핑해야 할지 지정이 되어있습니다. 꼭지점 왼쪽위를 UV 좌표계에서 (0,0)이라고 하면 텍스쳐에서도 (0,0) 좌표의 색을 지정하게되는 것입니다. 
이것은 모델링을하면서 메쉬와 텍스쳐를 매칭해 만들어주시는것이고 어쨋든이렇게 색을 입혀줄 수 있습니다. 

머티리얼의 인자중 베이스 컬러에 대해 알아봤구 한가지만 더 실습을 해보고 싶은데 Normal 이라는 인자를 알아보겠습니다. 
Texture Sample 노드를 하나 더 복사하고 여기서 이미지를 위에서 가져온 색상 텍스쳐 말고 끝이 N 이라고 되어있는 Normal 텍스쳐로 세팅합니다. 그리고 머티리얼 Normal 핀에 연결해주면 됩니다. 
왼쪽의 샘플 이미지를 보면 차이를 알 수 있는데 이전에는 그냥 밋밋하게 평면이었는데 노멀을 추가하고 나서는 벽돌사이의 굴곡이 있는것처럼 보입니다. 
그래픽적으로 빛의 반사를 잘 조절해서 마치 표면에 굴곡이 있는것처럼 표현하는것입니다. 실제로 굴곡이 있는것은 아니고 원래대로 삼각형들로 이루어진 큐브입니다. 

이제 아까 보았던 의자 물체의 머티리얼이 어떻게 되어있는지 궁금해져서 한번 디테일즈에서 따라 열어보았습니다. 
알아봤던데로 컬러 텍스쳐와 노멀 텍스쳐가 있는데 처음보는 이름 뒤에 M이 붙은 텍스쳐도 있습니다. 이런저런 계산을 해서 머티리얼 노드에 최종적으로 연결해주고 있습니다. 
이것의 자세한 부분은 모델러 분들께서 하시는 작업이고 프로그래머 입장에서는 머티리얼이 어떤일을 하는건지를 알고 넘어가는게 중요합니다.  


정리해보자면 
먼저 메쉬는 그래픽스 파이프라인의 인풋 어셈블리로 부터 어떤 물체를 그릴것인지 정보를 받아 여러 정점들과 정점들을 이어 만든 삼각형들을 이어 붙혀 물체의 형상을 만든것이 메쉬 입니다. 
이 메쉬의 색을 입혀주는것이 셰이더와 셰이더에 넘겨주는 머티리얼인데 머티리얼이 받는 색상을 텍스쳐 라는 이미지파일로 관리해 준다는겁니다. 
또 이 텍스쳐는 색상뿐만아니라 빛 반사를 조절해 물체의 굴곡을 표현합니다. 

나중에 가면 지금 처럼 간단한 스태틱 메쉬가 아니라 애니메이션을 이용해 이동하는 메쉬도 알아볼겁니다. 그래도 이 기본적인 아이디어 자체는 바뀌지 않습니다. 