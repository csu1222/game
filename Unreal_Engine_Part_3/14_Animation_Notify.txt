

    애니메이션 노티파이


이전 시간에 애니메이션이 끝났다고 했지만 한가지를 빼먹어서 이것까지 추가로 다뤄보겠습니다.

먼저 애니메이셔 노티파이가 무엇인지를 알아보겠습니다. 알아보기 위해서 자주 사용하던 애니메이션 에셋 Jog_Fwd 를 예로 들어보겠습니다.

이 Jog_Fwd 같은 경우는 앞으로 뛰어가는 애니메이션이었습니다. 그런데 이 애니메이션에 언젠가 발자국소리를 틀어주고 싶다고 하겠습니다.
그런데 이 발자국 소리가 아무렇게나 틀면 안되고 정확히 애니메이션에서 발을 내딛는 순간에 발자국 소리를 틀어주는게 일반적일겁니다. 
마찬가지로 총소리 칼을 휘두르는소리도 마찬가지로 모션에 맞춰서 틀어줘야할겁니다.
결국 실제로 3D 게임을 만들때 애니메이션 타이밍에 맞춰서 사운드를 넣어줘야합니다. 
그러면 이것을 어떻게 할까 생각해보면 각 애니메이션 마다 재생한지 몇초에 발을 디뎠는지 같은걸 기억하고 그에 맞춰 사운드를 재생하는 것을 생각할 수 있는데 
잠깐 생각한것만으로 이 방법은 매우 비효율 적이라고 알 수 있습니다. 만약 이렇게 억지로 맞춰 준다면 나중에 혹시 이동속도가 상승해 앞으로 뛰어가는 애니메이션을 
빨리 재생한다고 하면 그때는 사운드가 빗나가게 될겁니다.

그래서 애니메이션에다가 어느 시점에 어떤 이벤트를 호출해 달라고 키를 심어 놓을 수 있는데 그것을 애니메이션 노티파이 라고 합니다. 
사용하는 방법은 애니메이션 에셋 창에서 이전에 커브를 추가하던 곳 위쪽에 노티파이라는 부분이 있습니다. 보통 1 이라는 하나만 있을 텐데 당연히 더 추가할 수 있습니다. 
옆에 화살표를 눌러 추가할 수 있는데 2 까지 하나 늘려서 실습해보겠습니다. 지금 실습하고 있는 Jog_Fwd 애니메이션은 8프레임쯤에서 첫 한발을 내딛으니 여기세 
노티파이를 추가해보겠습니다. 8프레임에 진행바를 두고 우클릭해보면 노티파이와 관련된 여러 기능이 있는걸 볼 수 있습니다.
가장 기본이 되는 기능은 Play Sound, Play Particle Effect 같은 기본기능이 있습니다. 지금 하려는 발자국같은 경우는 Play Sound 를 사용하면 될겁니다. 
추가하고 나서 이 노티파이의 디테일을보면 이때 재생할 사운드 에셋을 골라줄 수 있습니다. 지금은 따로 발자국 에셋이 없으니 실습하기위해서 추가해보겠습니다. 

발자국 소리 에셋은 프로젝트에 컨텐츠 팩을 추가해서 가져올겁니다. DevMap 컨텐츠 브라우저에 추가버튼을 누르고 피쳐 또는 컨텐츠 팩 추가 를 누릅니다. 
아마도 1인칭 컨텐츠 팩은 발자국 소리를 사용할것습니다. 아니면 그냥 스타터 컨텐츠에는 아마 원하는 에셋이 있을것 같습니다.

스타터 컨텐츠를 추가한 상황에서 보면 StarterContent/Audio 폴더에 아무 사운드 에셋을 아까 추가한 노티파이에서 재생하도록 해주겠습니다. 
그런데 보통 이런 사운드 에셋은 그냥 틀면 너무 소리가 큽니다. 적절히 조절해주겠습니다.
받은 사운드 에셋중에 Explosion01 을 고르고 밑에 볼륨 배수를 0.3으로 줬습니다. 
다른 예제로 아까 살펴봤던 Play Particle Effect 노티파이를 배치하고 P_Explosion 이펙트를 골라주겠습니다. 그러면 애니메이션 재생중에 해당 시간이 되면 
파티클이 실행됩니다. 

이렇게 사운드를 틀거나 이펙트를 터트리는것 뿐만아니라 우리만의 특수한 기능을 넣고 싶다면 당연히 그에 대한 기능도 있습니다. 
다시 노티파이를 추가하는 우클릭을 해보겠습니다. 그러면 기본 노티파이라고 했던것 말고 스켈레톤 노티파이라는것이 있습니다.
이것은 스켈레톤에 포함이 되는 정보라고 할 수 있습니다. 지금보면 스켈레톤 노티파이에 이미 4개의 노티파이가 있습니다. 이것은 아마 Belica 에셋에 딸려오는 내용같습니다.
만약 새로운 스켈레톤 노티파이를 만들고 싶다면 새 노티파이 라는 것이 있습니다. 이름을 Footstap 이라고 지어보겠습니다. 

새로만든 노티파이는 지금은 딱히 Play Sound 나 Play Particle Effect 같이 뭘 하고 있지는 않는데 이제부터 여기에 Footstap 라고 새 노티파이를 만들어 줬으면 
나중에 ABP_Player 에서 Footstap을 받아서 코드를 작성할수 있습니다. 

한번 실습해보겠습니다. 
ABP_Player 이벤트 그래프에서 Footstap 으로 검색해보면 AnimationNotify_Footstap 이라는 이벤트를 검색할 수 있게 되었습니다. 여기서 무언거 코드를 이어나가면 되는데 
테스트만 할것이니 PrintText 로 "뚜벅 뚜벅" 이라는 문자열만 출력해주겠습니다. 
게임을 실행해주고 앞으로 걸어가면 Explosion01 사운드와 P_Explosion 이펙트, 뚜벅뚜벅 텍스트도 잘 출력됩니다. 
앞으로 가면서 좌우 45정도 까지 각도는 여전히 노티파이가 적용되고 45도가 넘어가면 적용되지 않습니다. 
이동 애니메이션을 우리가 Blend Space로 전후좌우 애니메이션을 섞어 틀어주도록 했었는데 Jog_Fwd 가 포함되는것은 전방 90까지만 이라서 그렇습니다.

그런데 이렇게 Footstap 을 넣어서 custom Skeleton Notify 로 만들어서 ABP_Player 에서 받아주는것 까지는 알겠는데 
만약에 애니메이션이 너무 많아 진다면 각 애니메이션의 노티파이를 각각 ABP_Player 에서 받아주는건 버거울겁니다. 
참고로 지금 Jog_Fwd 에서 넣어준 노티파이를 꼭 Jog_Fwd 안에서만 사용해야하는것은 아니고 다른 애니메이션 예를들어서 Idle_Turn_90_Left_Edited 같은 애니메이션을 열고 
여기서 노티파이를 추가하려고 해보면 스켈레톤 노티파이에 아까 만든 Footstap 을 고를수 있게 되어있습니다. 이런식으로 Belica 애니메이션에서 추가한것들이 보이는겁니다.
그래서 이곳 저곳에서 사용되는 공통된 노티파이는 한번에 관리할 수 있습니다. 

이것 말고 또 다른 대안은 Jog_Fwd 를 예로 들면 Nofity 레이어? 라고 할까요 1, 2 라고 되어있는 그곳을 우클릭 하고 노티파이 추가로 가고 난 후 스켈레톤 노티파이의 새 노티파일 추가를 했었는데 
이거 말고 Play Sound, Play Particle Effect 같은 종류로 만들어줄 수도 있는데 일단 블루프린트 클래스를 하나 만들어줘야합니다. 

블루프린트 클래스를 만들때 상속받을 클래스는 AnimNotify 라는 클래스를 상속받아주겠습니다. 이름도 줄임말로 AN_FootStap 이라고 하겠습니다.
내용은 일단 냅두고 다시 Jog_Fwd 에서 노티파일를 만들어보려고 하면 Play Sound 그 같은 란에 AN_FootStap 이 추가되어있습니다. 이렇게 해서 만드는 노티파이를 커스텀 노티파이라고 합니다. 

그럼이제 AN_FootStap 자체를 살펴봐보겠습니다. 
이 클래스에는 내 블루프린트 라는 창에 함수, 변수, 이벤트 디스패쳐 같은걸 표시해주는창이 있고 가운데에 컴파일러 결과라고해서 로그가 찍히는창, 오른쪽에는 디테일즈 창이 있습니다. 
먼저 내 블루프린트 창에서 함수쪽을 보겠습니다. 함수에서 오버라이드를 할때 열어주던 화살표를 눌러보면 그 중에 Receive Notify 라는 것이 있습니다. 이것이 중요합니다. 
실제로 Notify 를 받으면 뭘 해줄것인가 라는 함수인데 이것을 오버라이드 해서 원하는 내용을 채워주면됩니다. 게다가 AN_FootStap 자체가 그냥 블루프린트 클래스다보니까 
원하는 변수를 멤버변수 혹은 로컬변수로 만들어 사용할 수 있습니다. 예를들어서 PrintText를 호출해 로그를 찍을 수 있는겁니다. 

그런데 Receive Nofity 의 시작 노드를 보면 Mesh Comp, Animation, Event Reference 를 반환해주고 있습니다. 
Mesh Comp 같은 경우는 노티파이가 있는 애니메이션이 적용된 메쉬를 뜻합니다. 또 이 메쉬의 owner를 가져오면 BP_Player 같은 캐릭터 블루프린트 클래스를 가져올수 있습니다. 
이렇게 AnimNotify 클래스에도 다른 블루프린트 클래스처럼 온갖 코드를 넣을 수 있습니다. 

위와같은 방법으로 애니메이션 동작에 싱크를 맞춰 여러 기능들을 넣을 수 있습니다. 


추가로 몇가지 더 알아보겠습니다. 

노티파이를 추가할때 그냥 노티파이 추가 외에 다른 것들도 있었습니다. 
노티파이 스테이트 추가 라는 것이 있는데 여기에서 있는 노티파이들의 특징은 그냥 이벤트가 시작하는 지점만 지정하는게 아니라 어떤 이벤트가 시작하고 끝나는 범위를 지정할수 있는것들입니다.
또 한가질 Add Sync Maker 라는것이 있습니다. 이 기능은 사실 노티파이 라인중 1번에 있는 초록색으로 되어있는 RightPlant, LeftPlant 같은걸 Sync Maker 라고 합니다. 
그리고 우리가 실습하고있는 Belica 의 애니메이션들에는 다 RightPlant, LeftPlant 가 있습니다. 

이제 Sync Maker 라고 하는건 무슨일을하는것인지 알아보겠습니다.
지금까지 실습했던 Jog_Fwd 를 두개 복사해서 이름뒤에 하나는 Jog_Fwd_1, 또 다른 하나는 Walk_Fwd_1 이라고 이름 붙혀서 구분하겠습니다. 
Walk_Fwd_1 을 열어서 프리뷰를 재생해보면 앞으로 뛰어가는 모션인데 속도를 좀 줄이기 위해서 에셋 디테일에서 속도 스케일 Rate Scale을 다섯배 느리게 0.2 라는 값을 줍니다.
프리뷰를 보면 5배 느리게 움직이는 애니메이션이 됩니다. 
다음으로 Jog_Fwd_1 을 열어서 Sync Maker 외의 노티파이를 다 정리해줍니다. 

준비가 되었으면 ABP_Player 의 AnimGraph 로 가보겠습니다. 여기서는 이런저런 조건과 입력에 따라 자연스러운 애니메이션은 재생하고 있었는데 
실제 재생하는 Output Pose 노드를 잠시 끊어서 테스트를 할겁니다. 방금 추가했던 Jog_Fwd_1, Walk_Fwd_1 를 배치하였습니다.

만약 우리가 이 두 애니메이션을 어떤 조건에 따라 섞어서 쓰고 싶다고 하겠습니다. Blend 함수를 이용하면 될건데 
각각 50% 씩 섞도록 알파 값을 0.5 줬습니다. 
이렇게해서 섞으면 그냥 중간속도로 움직이지 않을까 싶지만 컴파일을 해서 프리뷰를 보면 제대로 이동하지않고 스탭이 꼬이는걸 볼 수 있습니다.
그 이유는 두 애니메이션의 재생속도가 다르기때문에 그렇습니다. 제대로 섞어주려면 두 애니메이션에 오른발 왼발을 잘 맞춰줘야합니다. 
이걸 예방하기위한게 Sync Maker 입니다. 

Belica 애니메이션들에 포함된 Sync Maker인 RightPlant, LeftPlant 를 어떻게 사용하는가 하면 
AnimGraph 에 배치된 Jog_Fwd_1 노드를 클릭하고 디테일즈를 보면 Sync 동기화 라는 옵션 란이 있습니다.
동기화 그룹을 설정해 줄 수 있는데 그룹이름, 그룹 룰, 매서드를 설정할 수 있습니다. 
그룹 이름은 Walk 라고 하고 매서드가 지금은 Do Not Sync Group 으로 되어있는데 이걸 Sync Group으로 바꿔줍니다.
마찬가지로 Walk_Fwd_1 도 설정을해주고 컴파일 해보겠습니다.
그러면 프리뷰에서 정상적으로 애니메이션이 재생되는걸 볼 수 있습니다.

Sync Maker 를 가지고 두 애니메이션이 자연스럽게 섞이도록 보간을 해주었습니다.

이 기능이 유용해 보이니까 자주 사용할 것 같지만 여태껏 이 sync Maker는 버그가 많이 발생하는 기능이어서 그다지 많이 사용하지는 않는다고 합니다.

이렇게 해서 애니메이션 노티파이에 대해 알아봤습니다. 

앞으로 우리 프로젝트에서 적용할 내용은 아니기 때문에 이번에 실습한 내용들은 모두 복원시켜주겠습니다.ㄴ