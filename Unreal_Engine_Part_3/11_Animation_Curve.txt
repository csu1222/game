


    애니메이션 커브


지난시간까지 루트 본 회전이라는 기법을 적용해서 캐릭터의 로테이션이 회전해도 캐릭터의 메쉬는 그대로 앞을 주시하고 있게끔하는 작업을 했습니다. 
거기에 메쉬와 캐릭터 로테이션의 각도 차이가 90도 이상 벌어지면 해당 방향으로 회전하는 애니메이션을 틀어주도록도 작업했습니다.
이 방법의 장점으로는 바라보는 방향으로 바로 이동해야한다거나 어떤 상호작용을 해야한다면 바로 진행할 수 있다는것이 유용합니다.

하지만 아직 실제로 그방향으로 돌아보지는 않고 있습니다. 
돌아보는게 뚝 끊어져서 회전하는것보다는 스르르 해당방향으로 이동하는게 좋을것같습니다.

그러면 어떻게 캐릭터 메쉬를 회전시킬지가 고민입니다. 
그냥 어느방향으로 어느속도로 이동할지 물리공식을 이용해 계산해 회전시키는게 아니라 
진짜로 회전할 각도 자체를 그래프로 만들어서 관리할겁니다. 이것이 애니메이션 커브라고 하고 굉장히 유용한 기능입니다. 
상용엔진을 사용하는 장점중 하나입니다.

작업을 시작하기 위해서 회전에서 사용하던 에니매이션 에셋인 Idle_Turn_90_Left_Edited 를 열어보겠습니다.
프리뷰 창 밑에 재생바를 보면 여러 커브값들이 있습니다. 여기에 새로운 커브를 추가해줄겁니다. 커브라고 써있는 칸 오른쪽 화살표를 눌러보면 커브 추가 라는 게 있고 또 이것을 눌러보면 
여러 프리셋들이 있는데 이것들 말고 맨위에 커브 생성을 선택합니다. 이름은 Rotation 이라고 짓겠습니다. 
Rotation 커브를 더블클릭해 들어가보겠습니다. 여기서 우리만의 그래프를 그려줘야합니다.

마우스 스크롤로 줌을 멀리 해서 보면 대충 0프레임에서 24 프레임까지 애니메이션이 동작하는걸 볼 수 있습니다. 이 범위는 각자 편집한 만큼 달라집니다.
여기다 우리가 필요한 정보를 기입해서 나중에 코드상에서 우리가 그린 그래프만큼의 수치를 추출해 사용할 수 있습니다.

그래서 이걸 어떻게 응용할거냐면 회전값을 이용햘 수도 있고 응용할수 있는 방법은 무궁무진합니다.

먼저 그래프 모형을 만들기 위해서 Key 라는것을 추가해야합니다. 그래프에서 오른클릭을 하면 Add Key 라는 버튼이 있습니다. 옆에 마우스 가운데 버튼이 단축키라고 나옵니다.
즉, 스크롤 버튼을 클릭해 만들 수 있습니다. 이 Key를 애니메이션 시작할때, 중간, 끝날때 이렇게 세 곳에 만들어 주겠습니다. 
이 키 세개를 가지고 그래프를 만들어 줄겁니다. 

처음에는 90도에서 시작해서 점차 진행해 애니메이션이 끝날때는 0도로 떨어지는 그래프를 그려줄겁니다. 
첫번째 키의 값을 90, 두번째는 45, 세번째는 그대로 0 을 줍니다. 그러면 그래프가 아주 급격하게 경사가 지는데 스크롤을 내려서 세 키가 다 보이게끔 화면을 조절하고 드래그를해 
세 키를 한번에 선택합니다. 그러고 나서 위의 옵션중에 Zoom to Fit 이라고 딱 맞게 줌을 해주는 기능이 있습니다. 단축키는 F 키입니다.
이걸 누르면 화면에 보기좋게 줌이되어 표시됩니다.

이 상태에서 우리가 여러가지 그래프를 만들 수 있습니다. 그래프의 빈곳을 우틀릭하고 자동 Auto 를 켜주면 Cubic Interpolation 큐빅 보간, 자동 탄젠트로 만들어 지는걸 볼 수 있습니다. 
이그래프의 곡률를 언제든지 조절해서 좀 더 원하는 모양으로 만들 수 있습니다. 그러면 코드에서는 애니메이션을 시작하는 위치에 따라서 90도에서부터 0도 까지 내려가는 
Rotation 이라는 커브를 만들었습니다.

그런데 이 Rotation 이 90에서 0까지 내려가는건 알겠는데 이게 진짜 실행이 되고 있는지를 알고 싶습니다. 직접 이 값을 체크해 알 수도 있지만 
언리얼 이라는 툴을 이용해 체크하는 더 좋은 방법은 여기서 메타 데이터 라는것을 이용하는 방법입니다. 아까 처럼 커브를 추가하는 곳에서 그 밑에 메타데이터 추가하는 곳이 있습니다.
새 메타데이터 추가를 하고 이름을 Turning 이라고해서 지금 돌고 있는지를 확인하기 위함을 표현해줍니다. 만들자 마자는 아무것도 설정하지 않았으니까 
그냥 값이 1로 설정되어있습니다. 그렇다는것은 우리가 Turning이라는 값을 추출해봐서 1이라는값이 나오면 회전하는 상태이고 그게아니고 0이라는 값이 나오면 회전하고 있지 않다고 할 수 있습니다.

사실 이번 시간에는 다른 커브는 무시하고 Rotation 커브와 Turning 메타데이터만 가지고 실습을 할겁니다. 

이제 Idle_Turn_90_Right_Edited 버전에서 똑같은걸 다시해주겠습니다. 그런데 이제는 이미 Rotation 과 Turning 이 있어서 바로 만들 수 있습니다. 
여기서 Rotation 을 열어보면 아직 수치조정들이 안돼있는데 Right 버전에서는 -90 에서 0 값을 가지도록 해줍니다. 또 역시 큐빅 보간으로 탄젠트형으로 자동 설정을 해주는데 
이렇게 곡선을 넣으면 처음에는 비교적 급격하게 움직였다가 모션이 끝날때에는 완만하게 움직이도록 해줍니다. 지금은 캐릭터가 돌아보는곳에 사용하지만 예를 들어 게임에서 문을 여닫을때 
처음에 벌컥열었다가 닫을때는 스르륵 닫는 식입니다. 

그리고 Right 버전도 마찬가지로 Turning 이라는 메타데이터를 추가해주겠습니다.

이제 이것들을 실습하기위해서 다시 ABP_Player 를 열어보겠습니다. 
ABP_Player 의 이벤트 그래프를 열어보면 지금까지 했던 작업은 Event Bluprint Initialize Animation 에서 애니메이션 블루프린트가 적용되고 있는 플레이어를 변수에 저장하고 
Event Bluprint Update Animation 에서는 UpdateMovement 와 UpdateTurn 이라는 함수를 호출해주고 있었습니다. 
UpdateMovement는 Speed, bMoving, Movement Offset Yaw 값을 세팅해주고 있습니다. UpdateTurn 은 PrevCharacterYaw, CharacterYaw, Root Yaw Offset 를 세팅해주고 있습니다.

우리가 추가하고 싶은것은 이 두 함수 뒤에서 하나의 함수를 더 파주겠습니다. 이름은 UpdateTurnAnimation 이라고 하겠습니다.

UpdateTurnAnimation 의 내용을 채워보겠습니다. 해야할것은 이전시간에서 Idle 상태일때 틀어줄 애니메이션을 IdleUpperBody 와 IdleLowerBody 로 나눠틀어주도록 했었습니다. 
이때 만약 RootYawOffset 이 90보다 크거나 아니면 -90보다 작을 경우에는 Turn_90 애니메이션을 틀어주도록 했습니다. 여기에 더해서 UpdateTurnAnimation 에서는 실제로 턴 애니메이션과 함께 
캐릭터도 회전하도록 하고 싶습니다. 그런데 이 UpdateTurnAnimation는 항상 호출되는 함수는 아니고 Idle_Turn_90_Left_Edited, Idle_Turn_90_Right_Edited 이 실행될때에만 
호출해줘야합니다. 그런데 이 애니메이션들이 재생되고 있는지는 아까 Turning 이라고 메타 데이터를 만들어 판별 할 수 있도록 했습니다.
이 Turning 을 이용해서 UpdateTurnAnimation을 호출할 체크를 해주겠습니다. 

Turning 을 체크하는 방법은 이 메타데이터도 커브에 속하므로 Get Curve Value 라는 함수를 호출하고 값을 확인할 커브의 이름을 적는데 거기에 Turning 이라고 적습니다. 이러면 
반환 값이 이 Turning 의 값이 되는데 이 값이 0보다 큰지를 체크하는 브랜치를 호출합니다.

만약 이 브랜치가 True 라면 Sequence 노드로 연결해주겠습니다. 
그런데 이전에 턴 애니메이션에서 Rotation 커브 그래프대로 움직이게끔 하기 위해서 변수 두가지를 추가해야합니다. 둘 다 Float 타입인데 이름은 각각 RotationCurve, PrevRotationCurve 라고 합니다.

이제 Sequence 0번에서 새로 추가한 두 변수의 값을 세팅해줘야하는데 먼저 PrevRotationCurve의 값을 RotationCurve 값으로 세팅해주고나서 RotationCurve 값을 새로 갱신해주면 이전프레임 값, 현재 프레임값이 됩니다. 
RotationCurve 값은 뭘로 세팅해주냐면 바로 턴 애니메이션의 Rotation 커브의 값입니다. 그렇기 때문에 Get Curve Value 를 호출하고 Rotation 값을 넘겨주면됩니다.

이렇게 이전프레임과 현재프레임 값 두가지를 동시에 관리하는이유는 지난시간에도 했던 CharacterYaw, PrevCharacterYaw 의 이유와 마찬가지입니다. 
두 값을 비교해서 이전 프레임 값이 현재 프레임 값보다 크다면 왼쪽으로 회전하는 것이고 반대라면 오른쪽으로 회전중이라는것입니다. 그리고 이 두 값의 차이를 매 프레임마다 더해주기위해서입니다.

즉, RotationCurve - PrevRotationCurve 을 하면 이번 프레임에 바뀐 값이 됩니다. 이 바뀐값을 RootYawOffset에 더해주겠습니다. 이 값을 RootYawOffset 에 덮어씌워주겠습니다. 

위의 코드가 하고 싶은 이야기가 뭐냐면 이 UpdateTurnAnimation 함수가 호출될때 캐릭터 메쉬의 방향을 원래 방향으로 유지하던 값인 RootYawOffset 에 조금씩 더해주고 있는겁니다.

다시 설명해보겠습니다. 
이전시간인 루트 본 회전을 RootYawOffset 만큼 시킴으로서 Use Controller Rotation Yaw 옵션을 사용하는 중에도 카메라를 돌려도 캐릭터 메쉬는 원래바라보고 있던 방향을 유지하도록 했었습니다.
그런데 이 RootYawOffset 가 90도를 넘어갈때 Idle_Turn 계열 애니메이션이 실행될겁니다. 이 애니메이션이 실행된다는것은 ABP_Player 의 이벤트 그래프에서 새로 추가한 UpdateTurnAnimation 이 실행된다는것이니까 
이어서 RotationCurve, PrevRotationCurve 값들을 갱신해주고 이것들의 차이만큼 RootYawOffset에 더해주는 코드가 실행된다는 것입니다. 

게임을 실행해보면 오른쪽으로 90도가 넘어가면 캐릭터가 갑자기 왼쪽을 보고 다시 앞으로 돌아오게됩니다. 왜 이러냐면 Turn_90 계열 애니메이션의 
Rotation 커브가 처음시작할때 -90 혹은 90에서 시작할겁니다. -90부터 시작한다고 치겠습니다.
그래서 첫 프레임에는 PrevRotationCurve 는 0이고 RotationCurve 는 -90 이 됩니다. 이것을 RootYawOffset 에 더해준 다음 다을 프레임부터는 
PrevRotationCurve 의 차만큼 야금 야금 더해주게 됩니다.

Rotation 커브값이 -90 부터 시작하는 애니메이션은 Idle_Turn_90_Right_Edited 인데 다시 살펴보자면 캐릭터 메쉬가 0도를 보고 있고 카메라의 방향이 90도를 보게 되면 
RootYawOffset 은 -90 값을 가지고 이 값만큼 Rotate Root Yaw 를 해줘서 캐릭터 메쉬는 0도를 계속 바라보고 있게 해주고 있었습니다. 
그런데 카메라의 방향이 90도를 넘어가게 되면 Idle_Turn_90_Right_Edited 를 재생해주는 상태로 전환이 되고 이에 따라 Turning 메타 데이터를 주시하던
UpdateTurnAnimation 함수가 호출되면서 RootYawOffset 에 -90 이라는 Rotation 커브값이 더해지게 됩니다. 이러면 
오른쪽 회전을 하는 애니메이션이 틀어지면 캐릭터는 오히려 왼쪽을 바라보는것에서 시작해 천천히 다시 0도를 바라보게 됩니다.

현재 오른 회전을 하려는데 오히려 왼쪽을 보면서 시작하게 되는 것을 방지하게되면 이제 원래 의도한 대로 오른쪽회전할때 스르르 캐릭터가 회전해 오른쪽을 보게끔 해줄 수 있을겁니다. 
그 방법으로 UpdateTurnAnimation 함수의 Sequence 문에서 두번째 시퀀스에서 진행해주겠습니다. 

Clamp float 를 이용할겁니다. 이 함수로 RootYawOffset 값을 최소로는 -90도, 최대로는 90도를 유지하게끔 세팅해주고 이것을 Sequence 1 에서 진행하도록 해주겠습니다.
이렇게 하면 어떤 효과가 나타나냐면 Turn 애니메이션이 호출되는 조건이 RootYawOffset 이 90 혹은 -90 도를 넘어섯을때 호출이 됩니다.
오른쪽 회전을 예로 들면 RootYawOffset 이 -90 일때 Turn 애니메이션이 재생되면서 UpdateTurnAnimation 에 의해 RootYawOffset이 순간적으로 -180 이 되었다가 
스르르 -90으로 돌아오게 됩니다. 하지만 방금 Clamp 를 통해 -90 이하로는 더 내려가지 않도록 제한 해 놨으니 UpdateTurnAnimation 이 시작되는 순간에 
여전히 RootYawOffset 는 -90부터시작해 0까지 스르르 이동하게 됩니다.

이제 게임을 시작해서 카메라를 좌우로 움직여보면 이제는 정상적으로 캐릭터라 카메라 방향으로 천천히 돌아서는걸 볼 수 있습니다.

여기서 더 개선을 하고 싶다면 회전 애니메이션의 Rotation 커브의 그래프를 더 만져보면 될것입니다. 

그리고 캐릭터 회전을 하는 방법이 지금 이 방법만 있는것은 아니고 여러 방법중 하나를 소개한 것입니다.
추가로 이 방법을 좀 더 디테일하게 더 알아보고 싶다면 왜 굳이 Rotation 커브값이 90도부터 시작해서 0으로 떨어트러야 하는지 의아해 할 수 있습니다.
회전할때 괜히 -180 혹은 180도에서 시작하게끔 하지 말고 원래방향부터 시작해서 원하는 방향으로 회전하게끔 0 에서 90 도 혹은 0에서 -90 까지 의 값을 사용하면 되지 않을까 
싶습니다. 이 말도 물론 맞는 말입니다. 그렇지만 이 방법은 이 방법대로 다른 문제가 발생할 수 있습니다.만약 커브 값이 0으로 끝나지 않고 90에서 끝났다면 
다음번 회전을할때 PrevRotationCurve 값이 이전 에 사용했던 90이 남아 있게 되는데 이 경우의 문제를 따로 보정해줘야 하는 문제가 있습니다. 