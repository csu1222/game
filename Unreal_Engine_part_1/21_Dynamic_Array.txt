


        동적 배열 이론


이번시간부터 자료구조내용으로 들어가보겠습니다. 

왜 자료구조를 배워야 할지 필요성부터 알아보겠습니다. 

우리가 게임을 만들텐데 몬스터가 1000마리 10000마리씩이나 있다면 어떻게 관리해야 할까요?
지금까지의 내용안에서 구현하려면 몬스터를 표현하는 변수를 1000개 10000개를 만들어 관리하고 또 몬스터들은 그 안에서 사라지고 생기고 할텐데 그걸 전부 손수
처리해줘야할겁니다. 

이럴때 필요한게 자료구조인데 데이터를 어떻게 관리할것인지 연구하는 분야입니다. 

그 중에서도 가장 중요하다고 하는 두가지 자료구조는 배열, Map 이렇게 두가지가 중요하다고 합니다.
여기서 또 배열, 동적배열의 이론적 내용을 알아보겠습니다.


자료구조는 크게 선형 vs 비 선형 자료구조로 나뉘다고 할 수 있습니다. 

선형 자료구조는 말그대로 선처럼 하나의 데이터 뒤로 하나의 데이터까 선처럼 쭉 이어지는 자료 구조를 말합니다. 
배열, 연결 리스트, 스택, 큐 등이 있습니다.

비 선형 자료구조는 하나의 데이터 뒤의 하나 이상의 데이터가 올 수 있는 형태의 자료구조 입니다. 
트리, 그래프 들이 있습니다. 노드 기반 자료구조입니다.

또 선형 자료구조중에서도 배열에 대해 알아볼겁니다. 
C++에서 배열은 처음만들때 그 크기를 정해두고 만드는 정적배열을 뜻하고 넣는 데이터에 따라 늘어나는 배열은 동적배열 Vector라고 불렀습니다.

하지만 블루 프린트에서 배열은 동적배열을 가리킬것입니다. 

동적배열을 설명하면서 호텔의 예를 들겠습니다. 친구 셋이 호텔방을 빌릴때 한 이 호텔은 한 팀은 연이어서 방을 배정해야 합니다. 
이 상황에서 친구 세명이서 방 세방이 받아서 세개의 데이터가 나란히 나열되어 있는걸 배열이라고 합니다. 

여기서 갑자기 새로운 친구가 합류하겠다고 해서 한 방이 늘거나 아니면 중간에 일이생겨서 집에 가야 된는 친구가 생긴다고 해보겠습니다. 
배열은 여기서 중간에 간다고 해도 두 방으로 줄일수 없고 한명이 더 와도 이어서 방을 배정 받을 수 없습니다. 

동적배열은 이 중간에 데이터 갯수가 바뀌게 되도 방을 배정할 수 있는 배열입니다. 대신 새로 배정받을때 원래 있던 방 뒤로 이어서 받는게 아니라 아예 새로운 장소에 
필요한 만큼의 여유방이 있는곳에 연달아 방을 배정합니다. 이러면 빌릴 방의 갯수를 유동적으로 사용할 수 있는 반면 방을 새로 배정 받을때 마다 짐을 다 옮기는 이사비용이 발생합니다. 

이사비용은 어쩔수 없이 그냥 부담해야 하는게 아니라 어떻게 최대한 줄일지 생각해 봐야 합니다. 

그런걸 동적 배열 할당 정책이라고 합니다 
실제 사용할 방보다 많이 여유롭게 예약을 하는게 그 방법입니다. 
예를 들어서 방 3칸을 사용하다가 한명이 추가되어서 방 4개가 필요해진다고 했을때 미리 한 방 6개를 예약 해두는겁니다. 그러면 이후로 5번째 6번째 친구가 더 놀러와도 
그 위치에서 미리 빌려놓은 방을 할당해주면 됩니다. 여기서 친구가 더 온다고 하면 그때는 모든방을 새로 예약하긴하지만 또 여유분을 가지고 예약하긴 할겁니다. 

아예 이사를 안하지는 않지만 데이터를 추가할때마다 이사하는것도 아닌 방법입니다. 

핵심적인 내용은 배열은 연속된 메모리를 할당받아 저장하는 자료구조라는것입니다. 또 동적배열은 한번 할당받은 메모리 주소와 크기를 계속사용해야 하는것이 아닌 필요에 따라 
새로 메모리를 할당받아 쓰는 자료구조 라는것이 핵심이었습니다.