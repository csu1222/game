


        Gate, Multi Gate, Do Once, Do N


이전 시간까지 흐름을 제어하는 분기문과 반복문, Branch, for, while 문등을 알아봤습니다. 이 것만으로도 왠만한 로직을 전부 구현할 수 있다고 했습니다. 

그럼에도 불구하고 이번시간에도 조금 더 배워볼 편리한기능들을 보겠습니다. 

네가지를 알아볼건데 그중 첫번째는 Gate 노드입니다.


이름에서 연상되는 성문과 유사한 기능을 가지고 있습니다. 
왼쪽에 Enter, Open, Close, Toggle 실행핀이 있고 Start Closed 라는 불리언 입력핀이 있습니다. 오른쪽에는 Exit 라는 실행핀하나만 있습니다. 

Start Closed는 처음 실행될때 문이 열려있을지 닫혀있을지를 골라줍니다. 체크해제후 실행하면 그냥 통과되고 체크한 후 실행되면 막아주는 것입니다. 
이기능 자체는 브랜치로도 구현할수 있을겁니다. 다른 기능이 있을겁니다.
키보드 1,2,3,4 이벤트들을 배치한 후 Gate의 Enter, Open, Close, Toggle 핀에 각각 연결해 주었습니다. 이대로 실행해 각각이 어떤 역할을 하는지 알아보겠습니다.

기본적으로 Start Closed 가 true인상태에서 실행했기 때문에 1을 눌러도 아무런 반응이 없을겁니다. 이 상황에서 open 을 누른후 다시 Enter를 하면 이제 Hello가 뜰것이고 
이 상황에서 3번 Close를 하고 1 을 누르면 반응이 없어지고 Toggle 은 현재 상태의 반대로 수정해주는 기능으로 닫혀 있으면 열고 열려있으면 닫아줍니다. 

이런 기능을 일단 알고있으면 언젠가 필요할때 꺼내 사용할 수 있을겁니다. 


다음으로 알아볼 노드는 MultiGate 입니다. 
왼쪽에 실행핀, Reset 핀, 불리언 타입 Is Random, Loop 핀, int 타입 Start index 핀이 있습니다.  오른쪽에는 out0, out1 이라는 핀들이 있고 핀 추가버튼을 누르면 out2, 3 으로 늘어납니다. 
일단 out 핀에 연결할 PrintText 노드를 3개 만들어 보겠습니다. 각각 1,2,3 을 출력할겁니다. 키보드 1 이벤트는 왼쪽의 실행 핀에 연결한 상태에서 실행해보겠습니다. 
그러면 1을 한번 누를때 마다 1,2,3 이 순서대로 출력됩니다. 그러니까 이 기능은 마치 sequence를 하는 것처럼 이벤트가 일어나면 순서대로 실행해주고 다 실행했으면 문을 닫아주는겁니다. 
여기에 추가적인 옵션들이 왼쪽 핀들에 있습니다. Start Index는 지정해준 인덱스 부터 시작하겠다 라는 것이고 Loop는 끝까지 문을 닫았다면 그대로 끝이 아니라 다시 모든 문을 열고 처음부터 다시 시작
한다는 의미입니다. Is Random은 말그대로 이벤트를 할때 마다 랜덤한 문을 닫아주는겁니다. 그리고 모든 문이 다 닫힌 상태에서 다시 모든 문을 열고 싶다면 Reset 을 하면되겠습니다. 


다음은 Do Once 입니다. 
한번만 실행해주겠다는 이름인데 이름 그대로 입니다. 여기로 들어온 흐름을 딱 한번실행한 후 닫아줍니다. 옵션으로 Start Closed 가 있습니다. 이건 아까 알아 봤듯이 프로그램 시작시에 닫힌 상태에서 시작
할건지를 고르는 옵션입니다. 이미 닫힌 상태를 열어주는 Reset도 있습니다.
Gate와 기능이 비슷하긴한데 그보다는 기능이 좀 축소된 노드입니다. 


마지막으로 Do N 입니다. Do Once와 비슷한데 이 노드는 실행을 N번 까지 실행하도록 정해줄 수 있습니다. 
누를 때 마다 실행을 하면서 몇번을 실행해줄지를 정해 줄 수 있고 다 돌았으면 리셋도 가능합니다. 그리고 몇번 실행중인지 카운트도 꺼내 볼 수 있습니다. 
이 기능은 이전에 배운 For 와 매우 비슷해 보입니다. for 는 인덱스를 어디부터 돌지 정해줄 수 있고 반복이 끝나면 빠져나가는 핀도 있는부분이 다릅니다. 


이런 기능적 노드들을 자유자제로 사용하지는 못하더라도 남이 만든코드에서 등장하면 읽을 줄은 알아야 하기 때문에 한번 집고 넘어가는겁니다. 