


        변수 타입


이번시간에는 본격적인 데이터를 다루는 방법을 시작합니다. 

결국 어떤 프로그램이던지 어떤 게임이던지 프로그래밍에서는 크게 두가지를 다룬다고 할 수 있습니다. 

데이터와 로직으로 크게 나누는데 

이 두가지를 완벽하게 정복할수 있다면 어떤 규모의 게임이던지 간에 개발 할 수 있다고 할 수 있습니다. 
그럼 데이터와 로직에는 어떤 차이가 있을까요 

데이터는 말그대로 컴퓨터에게 어떤 데이터를 인식시켜주는것입니다. 
예를들면 어떤 게임을 만들때 그 게임 세상이 있을겁니다. 그럼 그 게임세상을 컴퓨터에 인식시켜줘야합니다. RPG 게임에서 각종 산과 들이 있을것이고 
그 안에 여러 몬스터들도 돌아다닐것이고 플레이어도 있는데 플레이어는 어떤 아이템들을 가지고 있다라는 정보도 있을것이고 
그 플레이어는 레벨이 몇이고 골드는 얼마나 가지고 있고 아이템은 어떤걸 가지고 있는지 정보들도 있을겁니다. 
이런 모든 수치로 표현할수 있는 정보들을 일단 컴퓨터가 들고 있게끔 해줘야 합니다. 

그렇다고 컴퓨터가 데이터를 들고만 있을거면 그건 게임이라기 보다는 정지 화면에 불가합니다.
데이터는 들고 있지만 그걸가지고 뭔가를 하지 못합니다. 그렇기 때문에 가진 데이터를 가공해서 게임을 진행시켜야합니다. 

예를들어서 플레이어와 몬스터가 전투를 해서 서로 데미지를 입혀 hp를 깍고 결과로 경험치를 얻고 그걸로 레벨업을하며 레벨이 높아지면 다른 필드로 간다 
이런 것들이 게임 로직인것이고 그래서 데이터와 로직을 큰 두갈래 라고 하는것입니다. 

결국 여기서 데이터는 RAM에 유의미한 데이터를 저장하는것을 말하는것이고 로직이란 저장된 데이터를 가공해 게임을 진행시키는것을 말합니다. 

그중 데이터에 대해 알아볼건데 직접적으로 사용하는것은 아니고 변수라는것을 통해 간접적으로 다루게 될겁니다. 변수는 컴퓨터와 우리사이의 일종의 계약이라고 할 수 있습니다. 

*** 

블루 프린트에서 왼쪽 변수 차에 추가를 하면 변수를 만들면 되는데 변수의 이름과 타입을 지정해 줄 수 있습니다. 
이름은 문법상 오류가 있지 않으면 아무렇게나 지어줄 수 있습니다. 변수를 생성하게 되면 그 변수는 메모리상에 일정 공간을 차지하게되고 그곳에 데이터를 저장합니다. 
이 메모리 공간에 접근할때 처음에 지어준 변수 이름으로 접근하면 해당 메모리에 접근하게 되는것입니다. 
이름을 짓고 난 다음은 타입을 지정해주는데 이 메모리 공간을 크기는 얼마나 그리고 그 용도는 어떻게 사용할지를 미리 정해두는겁니다. 
블루프린트에서 변수를 만들때 그냥 추가한 다음 끝이 아니라 컴파일, 세이브를 한번 해줘야 합니다. 

변수에서 여러 타입들이 있을겁니다. 하나씩 알아보게습니다.

1. bool (불리언) : 불리언 타입은 true , false 참 혹은 거짓으로 나타낼수 있는 타입니다. 그냥 참거짓이구나 하기보다는 이걸 활용할만한 곳이 있을까 생각해보면 좋습니다.
                활용법은 여러가지 있을건데 먼저 게임을 실행하면 옵션창에서 어떤 기능을 사용할지 말지를 체크 박스로 관리할겁니다. 이런 체크박스도 불리언 타입으로 사용할 수 있습니다. 
                소리를 켤지 말지를 구현한다 치고 bSound 라는 이름으로 불리언 변수를 만들어주겠습니다. 이름 컨벤션은 각각 프로젝트마다 다른데 b는 불리언을 뜻하고 
                뒤는 대문자로 시작한 이 변수의 이름입니다. 

2. BYTE, int, int64 : 불리언 다음으로 세가지 타입을 묶어서 보겠습니다. 세 타입의 공통점은 모두 정수를 표현한다는것입니다. 정수라고 하면 1,2,3,4 같은 딱 떨어지는 수를 말하고 
                0과 음수들도 포함합니다. 
                그럼 셋다 정수를 나타내는데 왜 나뉘어 있을까요? 
                각기 표현할수 있는 수의 범위가 다른데요 BYTE가 가장 작습니다. 0~255 까지의 수 밖에 저장할수 없습니다. 그래서 -1을 저장하려고 해도 0으로 값이 수정되고 
                400을 저장하려고해도 255로 수정됩니다. 그래서 확실히 0~255 까지의 수만들어온다고 하면 BYTE형 변수를 사용하는게 메모리상으로 이득이 됩니다. 
                어떤 경우가 그럴것 이냐면 캐릭터 커스터마이징 프리셋 같은것을 보면 대부분의 경우는 255개 안쪽으로 표현할 수 있을겁니다.
                integer의 경우는 일반적인 정수를 사용합니다. 이건 범위가 확 늡니다. 대략 -21억에서 +21억 까지수를 표현할 수 있습니다. 
                정말 어지간해서는 integer로 표현할 수 있습니다. 예를들어서 hp라거나, 스탯에 관련된 정보들을 담을 수 있다는겁니다. 
                하지만 만약에 21억을 초과하는 값이 필요하다면 integer64를 사용하면 됩니다. 이것도 마찬가지로 아주 큰수를 사용하지만 한도가 신경쓰일수 있습니다. 
                그래도 정말 왠만한 경우에서는 int64 급에서 다 커버 할 수 있다고 합니다. 

3. Float : 이 타입은 소수점이 있는수 부동 소수점을 float라고 합니다. 예를 들어 원주율인 3.14 같은게 float 입니다. 
                C#이나 C++ 에서는 부동소수점을 나타내는 타입이 float나 double 이 있고 float는 소수점을 표현하기에 조금 정밀도가 떨어지지만 4바이트 공간만 차지하는 타입이었고 
                double은 좀더 큰 공간을 차지하는 타입이었는데 언리얼 엔진에서는 둘이 통합되어 그냥 float 라는 타입 하나로 관리하고 있고 실질적으로는 double-precision 이라는 타입입니다.
                예시로는 이동속도, 캐릭터의 이동 좌표 같은 걸 이 float로 표현할 수 있을겁니다.

4. name, string, text : 이번에도 세가지 타입을 묶어 설명할건데 이 세 타입은 공통적으로 문자열을 표현합니다. 셋의 차이는 뭔지를 간략하게 알아보자면 
                먼저 name 타입은 언리얼엔진 내부에서 사용하고 절대 바뀌지 않을것이고 정말 빠르게 검색이 가능한 문자열 타입입니다.
                어떤 상황에서 사용되냐면 언젠가 새로운 몬스터 타입의 아트 리소스를 받았다고 하고 그 모델링에는 또 본들이 있을건데 이 본들의 이름을 지어줄때 사용할수 있을겁니다. 
                굳이 name을 사용하는이유는 문자열 타입들중 가장 용량을 적게 차지할 뿐더러 변수의 이름을 다른 무언가로 변환해 빠르게 검색할수 있게 해줍니다. 이것을 해쉬라고 합니다.
                다음 string 이란 타입은 좀 더 일반적인 상황입니다. 일단 먼저 text 타입부터 보면 text 변수의 기본값 쪽에 깃발모양 아이콘이 있습니다. 거기에는 localize 라는 체크박스가 있고 
                뭔가 변환 해주려 한다는걸 볼 수 있습니다. text 타입의 전형적인 사용예가 퀘스트의 설명 같은걸 예로 들수 있습니다. 이 것은 다국어 변환을 할수 있는 데이터를 담으면 유리합니다.
                나중에 게임을 만들면서 처음에는 영어로 만든 다음 출시할때는 영어 뿐만아니라 다른 언어들로 번역을 해서 출시해야 한다고 해보겠습니다. 
                예를 들어서 처음에 "안녕하세요" 라고 하는 텍스트가 있는데 나중에는 중국어, 일본어로 출시해야할 상황일때 DevMap레벨로 돌아가 위의 옵션들 중 툴->현지화 대시보드를 들어가보면 
                어떤 단어를 다른 나라에서는 뭘로 치환해줄지 정해 줄 수 있습니다. 그래서 인게임의 UI와 관련된 텍스트들 이라거나 아니면 NPC의 대화 같은 것을은 text 타입으로 사용하면 좋을겁니다. 
                그럼 name도 아니고 text도 아닌 상황의 문자열들은 string을 사용하면 됩니다. 사용예로는 플레이어의 이름을 정할때 이 플레이어이름은 플레이어가 직접 정하는거고 언제든지 바뀔수도 있는 것입니다. 

여기까지가 가장 기초적인 타입들입니다. 
이 외에도 vector, rotater, transform, structure, interface, object type 등 많이 남았지만 이것들은 강의를 진행하면서 나올때 하나씩 알아볼 것들이고 
일단은 가장 중요하고 기초적인 타입들에 대해서 알아봤습니다. 