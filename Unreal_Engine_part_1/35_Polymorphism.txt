

        다형성


객체지향의 세가지 특성중 마지막 다형성입니다. 

여러 형태가 있다 라는 말인데 같은코드가 여러 갈래로 실행된다고도 해석할 수 있을겁니다. 

말로만하면 이해하기 어려우니 다시 예시를 통해 알아보겠습니다. 

상황은 기본 액터를 상속받는 클래스 BP_Monster와 BP_Monster 를 상속받은 BP_Orc 를 만들었습니다.

먼저 BP_Monster 를 열고 멤버 함수를 추가해 이름은 Shout이라고 하겠습니다. 모든 몬스터가 등장하면 샤우팅을 하는 사양으로 만들겁니다.
Shout 멤버 함수에서는 그냥 PrintText를 호출하면서 "I am Monster!" 라고 외치는걸로 하겠습니다. 

아직까지 BP_Monster에 대한 작업만 했지만 레벨 블루프린트에서 BP_Orc의 객체를 만들어 주겠습니다. 그리고 이상태에서 Shout를 호출해주면 잘 실행됩니다. 

여기까지는 이미 배운 내용으로 상속성에 대한 내용입니다. 
그런데 이제 상황이 바뀌어서 BP_Orc를 열어보겠습니다. 이 오크는 다른 몬스터들과는 다른 외침을 외치게 하고싶어졌습니다. 
지금은 Shout를 호출하면 평범한 몬스터의 외침을 하게 되기때문에 만약 ShoutOrcVersion 이라는 새로운 멤버함수를 만들어 이걸 호출할 수도 있을것 같습니다. 
이 방식에서 아쉬운점은 새로운 외침을 하는 몬스터 마다 다 따로 함수를 파주게 되면 나중에 규모가 커졌을때는 감당이 안될 수 있습니다. 

좀 더 좋은 방법으로 새로운 문법이 존재합니다. 이전에 상속받은 멤버 함수를 재정의 하는 방법이 있습니다. BP_Orc의 함수 란을 잘 살펴보면 Overriderable 과 오버라이드 할 수 있는 함수들의 
목록이 나옵니다 오버라이드는 재정의 한다는 말입니다. 여기서 Shout를 클릭해보면 Shout 함수가 생기고 Parent::Shout 라는 노드가 연결되어 있습니다. 
만약 Parent::Shout 노드가 없다면 Shout 노드를 우클릭해 Add Call To Parent Function 을 하면 Parent::Shout 가 생성됩니다. 

이 상태가 뭘 뜻하냐면은 BP_Orc에서 상속받은 Shout이 아니라 BP_Orc 만의 Shout을 새로 만들었다고 볼 수 있습니다.
그리고 연결되어있는 Parent::Shout 노드는 그냥 부모 클래스인 BP_Monster의 Shout을 그대로 사용하겠다는 의미입니다. 
그러고 싶지 않으면 노드의 연결을 끊고 내가 하고 싶은 동작을 이어줍니다. 따로 오크만의 외침을 PrintText로 외치게 해주고 다시 프로그램을 실행해보면 바꾼 대사가 출력이 됩니다. 

이것이 다형성입니다. 
한번 함수를 만들었다고 끝이 아니라 상속받은 자식 함수에서 다시 재정의해 사용할 수 있다는것입니다. 

그러면 왜 굳이 이렇게 해야 하는가 알아보자면 
Move 라는 이름의 이동하는 함수가 있다고 해보겠습니다. 이 Move는 몬스터의 공통된 기능일것이기 때문에 BP_Monster에서 만들어 줬습니다. 그런데 
몬스터중에서 하늘을 나는 몬스터 혹은 땅굴을 파는 몬스터가 있다고 하면 기본적인 Move로는 이동하는 방법이 다를것입니다. 
그래서 대부분 비슷하게 움직이는 기능을 부모 클래스에 넣어 놓고 그 예외가 되는 소수의 다른 함수에서는 자신에 맞도록 재정의해서 사용하면 되는겁니다. 

재정의를 할때 부모클래스 버전의 함수를 그냥 무시할수도 있고 아니면 부모 클래스 함수를 호출한 다음 추가로 동작을 할 수도 있습니다. 이건 사양에 따라 다른겁니다. 

두번째로 눈여겨 봐야할 점은 레벨블루프린트에서 BP_Orc 객체를 생성한 상테에서 이 객체를 BP_Monster 타입의 변수에서 저장해 뭉뜽그려 관리해주고 싶습니다. 
이 상태에서 Shout을 호출하면 어떤 버전의 Shout이 호출될지 궁금합니다. 

BP_Orc로 만들었지만 그 후 BP_Monster로 관리하고 있기 때문에 BP_Monster 버전의 Shout이 뜰것인지 아니면 
애초에 BP_Orc로 만들었으니 BP_Monster로 관리하고 있다고해도 BP_Orc 버전의 Shout이 뜰것인지  두가지 경우을 예상할 수 있을것이고 

결과적으로 실행해보면 두번째 경우 BP_Orc 버전의 Shout이 호출된다는걸 알 수 있습니다. 
처음에 만들었을때 객체가 어떤 타입이었냐가 더 중요하다는것이 재밋는 점입니다. 


사실은 블루 프린트에서 알아야할 다형성에 대한 내용은 이것이 다입니다. 

생각보다 단순하지만 나중에 이 내용을 알고 있는지 아닌지에 따라 많은 차이가 날겁니다. 
