


        이벤트 디스패처


마지막으로 이벤트 디스패쳐에 대해 알아보겠습니다. 

이벤트 디스패처는 블루프린트에서 변수 밑에 있는 항목인데 지금까지 만든 구조에서 딱히 우아하게 통신하는 방법을 알아보진 않았으니까
블루프린트 클래스에 플래그를 두고 관리를 하는 개념인 레벨 블루프린트에서 그 플레그를 보면서 체크하고 있었습니다. 
그런데 찝찝한 느낌이 없잖아 있습니다. 

이벤트 디스패처는 소위 디자인 패턴 중 리스너 패턴 혹은 옵저버 패턴이라고 하는것입니다. 
처음으로 디자인 패턴에 대해 알아보게 되었는데 
옵저버 패턴이 어떤 느낌이냐면 우리가 신문을 읽는다고 해보겠습니다. 근데 보통 신문을 구독신청하게 되면 신문이 집으로 알아서 배달이 될겁니다. 
그런데 지금 구현한 슬라임 경주를 신문에 비유하면 하루종일 매초마다 신문사에 전화해 신문이 나왔는지를 묻고 있는 상태입니다. 
되게 비효율적 이라는것입니다. 

이게 아니라 신문 구독을해서 매일 일정한 시간이나 아니면 신문들 도착했을때 알려줘서 그때만 신문이 왔는지를 체크하면 좋을것같습니다.

한가지 방법은 서로 서로 자신의 참조값을 넘겨줘 그걸 들고 있게끔 하는 방법이 있기는한데 이 방법은 너무 서로 맞물려서 동작해야하니 구조가 꼬일 수도 있습니다. 
그래서 서로의 존재를 모른채로 구독만 하고 싶을 수 있는데 이것이 이벤트 디스패처입니다. 

이제 실습을 해보겠습니다. 레벨 블루프린트에 이벤트 디스패처 하나를 추가해주고 이름을 OnArrived라고 하겠습니다.
OnArrived의 속성을보면 마치 함수처럼 입력값을 넣어줄 수 있게 되어있습니다. 그건 그렇고 더블 클릭으로 들어가보면 블루프린트 창이 나오는데 딱히 다른 코드를 추가할수 있지는 않고 
자신의 노드하나만 있습니다. 

그러면 외부에서는 뭘 할 수 있냐면 슬라임 경주를 만들었던 레벨 블루프린트에서 BeginEvent에서 모든 슬라임들을 찾아서 Slimes에 담아주고 있었습니다.
이때 찾은 Slimes 를 for each로 순회하면서 각 슬라임 객체 핀을 땡겨 방금 만든 OnArrived를 검색했습니다. 그러면 여러가지 기능이 있는걸 볼 수 있는데
Assign On Arrived, Bind Event to On Arrived, Call On Arrived, Unbind all Event from On Arrived, Unbind Event from On Arrived 라는 기능들이 있습니다. 

우선 Bind to On Arrived를 꺼내 연결해보겠습니다. 이 이벤트가 발생하면 이어서 어떤 이벤트를 발생 시켜 달라고 할 수 있습니다. 
이미 있던 BeginPlay이벤트, Tick이벤트나 아니면 커스텀 이벤트를 Bind 해줘도 되고 아니면 곧바로 Assign로 새 이벤트를 할당할 수도 있습니다. 지금은 한번 Assign로 해보겠습니다. 
그러면 곧바로 OnArrived이벤트라는 커스텀 이벤트가 만들어집니다. 

이제 어떻게 된거냐면 게임이 시작할때 맵에 배치된 모든 슬라임을 배열로 만들어 Slimes에 세팅한 다음 이 배열을 for each로 순회하면서 그 때 마다 OnArrived이벤트라는 커스텀 이벤트를 연결해주게 됩니다. 
이 커스텀 이벤트는 아직은 연결만 되어있지만 어떤 조건이 맞으면 호출이 될겁니다. 
그리고 이 커스텀 이벤트가 아무런 입력을 받고 있지않지만 아까 알아봤던 OnArrived 라는 Event DisPatcher 의 속성에 입력값을 추가하는 기능이 있었습니다. 
이 이벤트를 호출할때 추가적인 정보를 넘겨주겠다는것입니다. 그래서 슬라임 자신의 이름을 건내준다고 해보겠습니다. 슬라임에서는 이름을 입력했고 레벨블루프린트에서는 입력한 이름을 출력받습니다.
이제 여기서 도착했을때의 코드를 이어주면 되겠습니다. 

마찬가지로 BP_Slime에서도 수정해줄게 있는데 슬라임이 충돌했을때 호출되는 Event ActorBeginOverlap 이벤트에서 도착했다는 뜻으로 bArrived 라는 불리언값을 true로 설정해주고 있엇는데 
이게 아니라 바로 OnArrived를 호출해줍니다. 그리고 이 OnArrived의 인자에 이미 가지고 있던 변수 Name을 입력해줍니다. 

이제 레벨 블루프린트에서 OnArrived이벤트에 연결할 코드가 슬라임이 도착했을때 Rankers에 등록하고 자신의 순위를 출력하는 동작을 하게 될겁니다. 
이전 시간의 슬라임경주와 다른것은 이전 버전에서는 슬라임이 도착하나 안하나 게임이 실행된 순간부터 매 틱마다 슬라임 도착여부를 계속 지켜봤습니다. 
하지만 Event Dispatcher 버전에서는 슬라임이 결승선을 통과한 순간에만 도착여부를 체크하는 것입니다.

또 좀 더 깔끔해지는것이 매 틱마다 체크하고 또 모두 도착했는지도 체크하고 그리고 Slimes에 들어있는 객체 중 어떤 슬라임이 도착했는지도 순회해 bArrived 값을 체크하고 또 Rankers에 등록 후 
로그 출력까지 했어야 하는데 

지금은 결국은 어떤 슬라임이 OnArrived를 호출했는지를 알기 때문에 핵심적인 코드만 작성해도 되겠습니다.
곧바로 Rankers에 Add 해줄수도 있는데 아직은 OnArrived에서는 Name만 반환하고 있지만 언제든지 필요한 데이터를 추가해 줄 수 있습니다. String 타입의 Name이 아니라 그냥 BP_Slime 타입을 반환하도록 수정합니다.
그리고 BP_Slime의 Event ActorBeginOverlap에 연결된 OnArrived 호출에는 자기 자신 self 레퍼런스를 입력해줍니다. 
그러면 다시 레벨 블루프린트의 OnArrived에 Rankers의 Add를해준 다음 랭크 출력까지 해줍니다. 
물론 안전하게 한다면 먼저 Slimes의 길이와 Rankers 의 길이를 비교해 전부 들어왔는지를 체크해줄 수도 있지만 어짜피 한 슬라임당 ActorBeginOverlap는 한번만 호출되기 때문에 그냥 넘겨도 됩니다.

그리고 BP_Slime에서 Call OnArrived 를 호출할때 노드 우상단에 편지봉투 모양이 있는데 이 의미는 외부로 알리는겁니다. 나 도착했어요 하고 알리는데 BeginPlay 이벤트에서 Bind Event to On Arrived 를 한 
궁금해 하는 애들 대상으로 알리는겁니다.

처음으로 이벤트 디스패처를 가지고 독립적인 객체들끼리 서로 통신하는 방법을 배운겁니다. 그리고 어지간 해서는 처음 바인드를 한 다음 활용하고 나서 또 호출하지는 않을것 같을때는 
Unbind 해주는게 성능상 좀 더 좋습니다. 
아까 Unbind Event from On Arrived라는 기능을 배치해 한번 자신의 랭크를 호출한 다음에는 Unbind하도록 연결해주면 됩니다. 

그리고  Unbind 이벤트가 한가지 더 있었는데 Unbind All Event from On Arrived 라고 이름에서 보이듯이 이 함수가 호출되면 이 객체와 연결된 모든 이벤트를 다 끊어주는겁니다. 
지금이야 한가지 이벤트만 연결했기 때문에 별 다를게 없지만 경우에 따라 여러가지 이벤트들을 연결했을때는 일괄적으로 끊게 됩니다. 

최종적으로 이벤트 디스패처의 흐름에 대해 말해보자면 어떤 상태 변화를 감지할 수 있도록 해주는게 이벤트 디스패처였고 그 내용은 따로 만들어 주지는 못하지만 이벤트의 입력값은 추가해줄 수 있었습니다. 
그 형태를 만든 다음은 외부에서 OnArrived가 필요한 객체들에는 다 Bind Event to On Arrived로 연결해주고 각 객체에서 OnArrived가 호출되는 조건에 Call을 해줍니다. 이때 입력값을 연결해줍니다.
다시 외부에서 OnArrived가 호출했을때의 코드를 만들어 주면 되겠습니다. 

