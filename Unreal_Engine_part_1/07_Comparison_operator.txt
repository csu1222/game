


        비교 연산자 



지난시간까지 변수를 만들고 사칙연산으로 가공하는 것 까지 했습니다. 

다음으로 알아볼 내용은 비교 연산자 입니다. 비교 연산자는 두 값을 비교해 뭐가 더 크다거나 두 값이 같은가 혹은 다른가를 true, false로 반환하는 연산자입니다. 

어떤 때에 사용할것이냐면 쉽게 예시를 들어서 이제 플레이어와 몬스터가 전투를 하면서 플레이어의 공격력 만큼 몬스터의 hp가 줄어드는것은 사칙연산을 사용하면됩니다. 
여기서 몬스터가 죽었는지 살았는지를 판별하려면 데미지를 받은 후의 체력이 0보다 큰지, 작은지를 판단해야합니다. 이때 사용하는것이 비교연산자 입니다. 

역시 노드를 만들때 검색을 했습니다. <, <=, >, >=, ==, != 같은 연산자들이 있습니다. 
왼쪽에 위아래로 두개의 핀, 오른쪽으로 하나의 핀이있습니다. < 를 예로 들면 위쪽 핀에 연결된 값이 아래쪽 값보다 작다면 true가 뜨고 크다면 false가 뜨게 됩니다. 

사실 사칙연산만큼 사용법이 직관적입니다. 

위의 몹의 사망 판별을 예시로 들어보면 Hp 라는 int 변수를 만들고 <= 연산자 노드의 윗쪽에 연결합니다. 아래쪽은 직접 값을 0으로 넣어줍니다. 
그러면 Hp값이 0보다 작거나 같은지를 묻는 연산자 노드입니다. 이 값을 받아줄 불리언타입 변수 bDead 를 만들고 Set bDead로 값을 세팅해줄수 있겠습니다. 
이게 한가지 방법이 될겁니다. 

좀더 빠른 방법이 있습니다. 변수를 직접 만들어 담아주는 방법 말고 비교연산자의 아웃풋 핀을 드래그 해보면 Promote to Variable 변수로 승격이라는게 있습니다.
이걸 누르면 자동으로 반환에 맞는 타입의 변수가 만들어 지고 이름만 다시 지어주면됩니다. 

이어서 어떤 상황이 올지 테스트를 이어가 보겠습니다. 이렇게 Set bDead를 만든 다음 BeginPlay 이벤트에서 연결을해줍니다. 
이제 죽었는지는 판별했는데 그다음은 죽었는지 살았는지 경우의 수가 나뉘게됩니다. 여기서 브랜치(branch)라는 문법이 나옵니다. 
우클릭->Branch 를 검색하던지 아니면 단축키로 b를 누른 상태에서 왼클릭을 해도 됩니다. 

브랜치는 오늘내용인 비교연산자와 아주 밀접한 관계가 있기 때문입니다. 대부분의 경우에 비교를 한다음 그 결과에 따라 각각 동작이 나뉠것이기 때문입니다. 

브랜치는 왼쪽에 실행핀과 입력핀이 있습니다. 입력핀은 불리언타입을 받습니다. 그리고 나서 오른쪽에서는 참일경우의 실행핀과 거짓일 경우의 실행핀이 나뉩니다.
각각 실행핀에 연결할 PrintText 노드를 만들어주겠습니다. 간단한 텍스트를 출력하겠습니다. 

hp 변수의 값이 0이었을때는 죽었습니다 라고 출력하고 hp가 1이라도 남았다면 살았다고 출력이 될겁니다. 

이 브랜치를 분기문 if else 문이라고 합니다. 