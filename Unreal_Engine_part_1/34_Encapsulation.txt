


    은닉성 Encapsulation


이어서 객체지향의 특성 중 두번째인 은닉성 Encapsulation 캡슐화에 대해 알아보겠습니다. 
은닉이라고 하면 어감이 별로 안좋은데 프로그래밍에서는 아주 좋은 개념입니다. 

은닉성을 비유할때 항상 등장하는게 자동차이야기를 많이합니다. 
자동차는 정말 많은 기술이 적용되어있는 기계입니다. 하지만 그것은 자동차를 설계 생산하는쪽에서는 하나하나 다 알아야 하지만 
운전자의 입장에서는 차키로 시동을 걸고 좌석조절하고 안전벨트를 매고 페달을 밟기만 하면됩니다. 자동차를 이루고있는 아주 복잡한것들은 신경쓰지 않아도 
잘 작동할수 있다는겁니다. 

이렇게 딱 필요한 기능한 사용자에게 노출시키겠다는게 은닉성의 개념입니다. 다른 말로는 캡슐화입니다. 

결국 프로그래밍에서 클래스를 만드는 이유가 객체단위로 생각하기위해서 그 설계도를 만드는 것이었습니다. 
설계도안에서 여러기능들도 있고 할텐데 그중에서 잘못 건드리면 아주 위험해질수도 있는 기능을 사용자에게는 접근하지 못하게 해야합니다. 

다시 코드로 돌아가보겠습니다. 

실습 환경은 블루프린트에서 Actor를 상속받는 BP_Player 클래스를 하나 만들고 또 이것을 상속받는 BP_Knight 클래스를 만들었습니다. 

일단 BP_Player클래스를 열어서 멤버변수 int타입 Hp를 만들었습니다. 여기서 부터 시작해보겠습니다. 

Hp를 보면 변수 오른쪽에 눈을 감은 아이콘이 있습니다. 이것을 클릭하면 눈을 떳다 감았다 할 수 있는데 블루프린트에서만 있는 기능입니다. 
눈을 뜨게 되면 언리얼 툴 상에서 이 변수를 수정할수 있다는 말입니다. 
Hp의 눈을 띄운상태에서 Map으로 가보겠습니다. 그리고 BP_Player 객체를 드래그 드롭으로 배치한 다음 그 객체의 Details를 보면 DeFault 항목에 Hp 변수가 수정할수 있게끔 
표시됩니다. 다시 BP_Player 클래스로 가 Hp의 눈을 감긴다음 다시 Map에서 확인해보면 Hp가 사라져있음을 알 수 있습니다. 

이렇게 언리얼 툴상에서 변수를 보여줄지 아닐지를 정할수 있습니다. 
이것은 툴과 연관되어있는 은닉성같은 것이고, BP_Player 클래스로 가서 Hp변수를 클릭해보면 오른쪽에 Details가 뜹니다. 
그 중에서 Private 프라이빗 이라고 체크박스가 있습니다. 처음은 private가 아닌 상태에 있기때문에 다른 클래스에서 가져다 사용할 수 있었습니다. 
무슨말이냐면 레벨 블루프린트에서 스폰 액터 클래스로 BP_Player 객체를 만들고 이 객체에서 Get Hp, Set Hp를 사용할 수 있었습니다. 
지금까지는 이게 당연하다고 생각되었겠지만 이게 가능했던이유가 Hp를 Private를 설정해주지 않았기 때문입니다. 

만약 Hp를 private라고 설정하게된다면 Hp는 BP_Player 클래스 내부에서만 사용해야 하고 외부에서는 접근은 물론 존재 자체도 모르게됩니다. 

Hp같은 변수는 사실 프라이빗으로 사용할 이유가 없고, 나중에 클래스를 만들다 보면 내부적으로만 사용해야 한다는 것들에 프라이빗 설정을 해주면 되겠습니다. 

그리고 멤버변수뿐만아니라 멤버 함수에게도 프라이빗 개념이 있습니다. 
세가지 멤버 함수를만들어 줄건데 이름을 각각 TestPublic, TestProtected, TestPrivate 라고 지어보겠습니다. 
이름대로 세가지 접근지정자가 존재합니다. Details에서 각 함수이름에 맞는 접근지정자로 설정해주겠습니다.

이 접근지정자가 이번시간의 주제인 은닉성과 밀접한 관계가 있습니다. 

먼저 Public을 보면 이름부터 공개적입니다. 레벨 블루프린트에서 바로 객체에서 꺼내 사용할수있고 자동차로 비유하면 사용자에게 공개한 기능 패달, 시동, 창문열기 같은 
공개해놓은겁니다. 

다음은 private 입니다. Public과 반대되는 개념인데 내부적으로만 사용할수 있다는 뜻이고 BP_Player 클래스 안에서만 접근할수있다는이야기이고 같은 클래스라면 
어디서든 접근할수는 있습니다. 

마지막으로 Protected는 private와 public의 중간정도라고 할 수 있습니다. 그냥 오픈된 공간에서 접근할 수는 없지만 상속관계에있는 하위 클래스에서는 접근할 수 있습니다. 

결국 세가지 접근 지정자를 선택할수 있습니다. 

처음 프로그래밍을 배울때는 사실 왜 이렇게 접근지정자를 사용해야하는지 와닿지 않을 수 있습니다. 그냥 내가 조심해서 사용하면 되지 않을까 하면서 다 public으로 열어두고 사용해도 
코드는 만들수 있습니다. 

다만 협업을 하기 시작하면서 중요해지는데 남이 만든 함수를 사용하거나 혹은 남이 내가 만든 함수를 사용할때 건드리지 말아야할것을 감춰두는것 뿐만아니라 사용할때 꼭필요한 함수 변수들만 열어주면서
사용의 간편성도 올릴 수 있습니다. 

좀 더 와 닿을 수 있게 현실적인 예제를 보겠습니다. 
지금까지 피해를 입는데 누가 나에게 데미지를 줬는지를 추적해 어떤 동작을 하는 사양이 있다고 해보겠습니다. 
몬스터중에 이런게 많습니다. 나에게 준 데미지에 비례해 어그로라던지 기여도라던지를 할당하기도 합니다. 

이 기능은 엄밀히 말해서 내부적으로 기능하기만 하면되지 외부에서 임의로 건드리거나 하면안될겁니다. 

결국 모든 로직이 의도한대로 흘러가도록 접근을 막아줄 필요가 생기는겁니다. 


지금까지 은닉성과 캡슐화가 같은 말이라고는 했지만 사실은 약간의 뉘앙스 차이가 있기도합니다. 
은닉성은 말 그대로 데이터를 숨기는 행위를 은닉성이라고 하고 캡슐화는 데미지 추적하는 기능을 외부에서 직접 접근을 하지는 못하게 하지만 간접적으로 다른 public 함수로 접근할수 있는
은닉된 데이터와 공개된 데이터를 묶는걸 캡슐화라고 할 수도 있습니다. 

가장 핵심은 위험한 부분을 감춰두고 꼭 필요한 부분만 노출 시키는것이 은닉성입니다. 