


        벡터 


이어서 플레이어가 몬스터를 향해서 이동하는 실습을 해보겠습니다. 

레벨 블루 프린트에 플레이어와 몬스터에대한 참조값을 가져오고 싶습니다. 맵에서 플레이어를 클릭한 상태에서 레벨 블루프린트에 우클릭을 해 참조를 가져왔습니다.
몬스터도 마찬가지로 가져옵니다. 

그리고 새로운 변수 두개를 만들어줄건데 처음으로 사용해보는 벡터 타입으로 만들어 줄겁니다. 

단계적으로 실습을 하기위해 하나는 그냥 벡터를 담을 Direction 변수를 만들고, 다른 하나는 단위 벡터를 실습할 NormalizedDirection 변수를 만들어 줬습니다. 

벡터를 처음 사용하니까 기본적으로 Get 과 Set을 만져보겠습니다. Get Direction을 해보면 그냥 벡터를 받아주던가 아니면 구조체 핀 분할을하면 float 변수 3개를 받아주고 있습니다.
사실은 float 3개 짜리 구조체이지만 이것을 벡터라는 의미로 해석하겠다고 약속한게 벡터 타입 변수인겁니다. 

실습 처음으로 Direction 방향 벡터를 만들어 볼겁니다. 벡터를 구할때 어떻게 한다고 했냐면 A에서 B로 가는 벡터를 구하려면 B의 좌표 성분에 A의 좌표성분을 빼주면 된다고 했습니다. 
우리 상황에서는 플레이어가 몬스터로 이동하는것이다 보니 몬스터의 좌표 성분에서 플레이어의 좌표 성분을 빼주면 됩니다. 
아까 맵에서 가져온 참조들에서 좌표들을 추출해야합니다. 
Get Actor Location 이라는 함수로 추출 할 수 있습니다.
벡터는 방향과 크기를 가지는 값으로 사용할 수도 있고 일종의 위치자체를 가리키는 위치벡터로 사용할 수도 있다고 했습니다. Get Actor Location으로 꺼낸 좌표는 위치벡터라고 볼 수 있습니다. 

이제 플레이어에서 몬스터로의 벡터를 구해보겠습니다. 몬스터의 위치벡터에 플레이어 위치벡터를 빼준 값을 Set Direction에 연결해주면 이제 벡터를 구한 것입니다. 
여기서 플레이어에서 몬스터 까지의 거리를 알고싶다고 하면 어떻게 해야할까요? 벡터의 크기를 구하는 기능이 있을것 같은데 역시나 Vector Length라는 기능이 있습니다. 

일단 구한 벡터를 따라 플레이어가 움직이는 기능을 구현하고 싶습니다. 그러기 위해서는 정규화를 통해 단위 벡터로 만드는게 중요합니다. 정규화도 Normalized 라는 기능이 있습니다. 
그렇게 구한 단위 벡터는 또 Set NormalizedDirection 에 연결해 저장합니다.

여기까지 방향과 관련된 데이터를 추출했다면 이제 이 방향으로 이동하는 코드를 만들어야 합니다. 
이동이라함은 처음 프로그램을 시작했을때만 호출되는게 아니라 조금씩 조금씩 지속적으로 호출되어야 합니다. 
그래서 Tick 이벤트를 가져다 사용하겠습니다.  그리고 플레이어가 움직이는 것이니까 Set Actor Location 에 플레이어를 연결하고 세팅할 Location 좌표를 계산해주면 되겠습니다. 

이동할좌표를 계산해주겠습니다. 
이동할 방향은 NormalizedDirection로 구한 상태이고 여기에 이동하고 싶은 거리를 곱해주면 되겠습니다. 벡터변수에 곱하기를 연결하니 x,y,z를 입력하는 곳이 있습니다. 
잘 모르니 1,1,1을 넣어보겠습니다. 일단 이렇게 했지만 사실은 이렇게 직접 어떤 값을 직접 넣어주는건 좋지 않습니다. 가뜩이나 틱 이벤트에서는 시간을 곱해서 이동거리를 구하는게 정석입니다. 
이렇게해서 한 틱당 어느 방향으로 어느만큼의 거리를 이동할지를 정했습니다. 

그런데 원하는 초당 이동거리를 구하기는 했는데 원래 위치부터 시작해 움직여야 하니 플레이어에서 Get Actor Locationd으로 현재 위치를 가져와 이동거리를 더해줍니다.

이정도면 되지 않았나 싶어서 컴파일 저장하고 실행해보면 플레이어가 꼼짝을 안합니다. 뭔가 잘못되었다 싶어서 프로그램을 멈추면 에러메세지들이 쭉 뜹니다. 
StaticMashComponent가 무버블이 되어야 한다고 합니다. 

맵에서 플레이어를 클릭해 옵션을 보면 모빌리티 옵션에서 스태틱,스태이셔블,무버블 로 옵션으 선택할 수 있습니다. 이 옵션을 무버블로 바꿔 주겠습니다 그러면 플레이어가 몬스터를 향해 천천히 움직이는걸 볼 수 있습니다. 
물론 지금까지 코드면 몬스터를 뚫고 계속 직진하겠지만 이건 나중에 언제든 고칠수 있습니다. 

그런데 아까 말했던 이동 거리를 하드 코딩으로 넣어주는게 좋지 않다고 했던 부분으로 돌아가 보겠습니다. 
왜냐면 지금 틱 이벤트를 사용하고 있는데 이 이벤트 틱이 호출되는 시간당 횟수는 각 컴퓨터의 성능에 따라 다릅니다. 게임이 컴퓨터의 성능따라 틱수가 다르다면 온라인게임에서는 컴퓨터 사양에 따라 
게임내의 밸런스도 건드리기 때문에 이렇게 사용하면안됩니다. 

틱 이벤트 노드를 보면 출력 핀으로 Delta Seconds 라고 한 틱당 경과한 시간을 반환합니다. 이걸 이용해 거리를 계산해야지만 컴퓨터 성능에 따른 이동속도가 아닌 모두 동일한 속도로 움직이게 해줄 수 있습니다. 
그래서 이 걸 따로 변수로 만들어 관리해줘야합니다. 

Float 타입 변수 Speed를 만들어 주었고 여기에 1초에 얼만큼 이동하고 싶은지를 적어주고 이것을 Delta Seconds와 곱해서 NormalizedDirection으로 이동하는 값으로 넣어주면 됩니다. 

그러면 어떤 환경에서건 같은 속도로 움직이게 될겁니다. 

그 다음에 해볼것은 이번에 몬스터의 위치가 달라져도 플레이어가 따라가도록 해주고 싶습니다. 
간단한데 벡터 계산하는것을 BeginPlay 이벤트에서 딱 한번해주던걸 이벤트 틱쪽으로 옮겨서 틱마다 계산해주도록 하면 실시간 추적이 됩니다. 

또 플레이어가 몬스터를 향해 이동하다가 어느정도 거리가 되면 더 다가가지 않고 몬스터를 공격하는 케이스도 자주 사용될겁니다. 그러면 두 물체간의 거리를 구해야 어디서 멈출지 정할 수 있을겁니다. 

아까 벡터에서 땅겨서 Vector Length라는 기능이 있었습니다. 
그런데 거리는 매 틱 플레이어가 움직일때 마다 달라질것이기 때문에 이벤트 틱에서 실행해주도록 하겠습니다. 
겸사 겸사 벡터도 매 프레임 계산해주게 되는데 이것이 걱정되는것이 매 프레임마다 매번 계산하는것은 성능에 부담이 가지 않는가 생각할 수 있는데 이정도 부하는 컴퓨터 성능에 비하면 무시해도 되는 정도입니다. 

그건 그렇고 이동하다 일정거리에 오면 다른 행동을 하도록 하는 코드는 역시 브랜치를 활용하면 될것입니다. Direction의 Vector Length로 거리를 가져와 예를 들어 200보다 작은지를 비교해 
아니라면 이전처럼 Set Actor Location으로 이동하고 맞다면 PrintText로 로그를 찍어주는 식으로 해보겠습니다. 

나중에는 어떤 상태를 관리해서 플레이어가 움직이는 중인지 아니면 정지했는지를 확인해 각각 필요한 행동을 하도록 해줄 수도 있고 

구현하다보니 지저분해진 코드들을 클래스나 함수 단위로 정리해 줄 수도 있습니다. 

전체적으로 정리해보자면 플레이어와 몬스터라는 물체를 두고 그 위치 벡터를 빼면 그 사이의 벡터를 구할수 있고 이 벡터를 정규화해 단위 벡터도 만들었습니다. 
거기에 매프레임마다호출되는 틱 이벤트를 사용해 플레이어 물체를 움직이는 Set Actor Location 을 해보고 또 틱마다 동일한 거리를 가도록 Speed도 만들었습니다. 
추가로 물체간의 거리를 구하는 기능 Vector Length를 사용해 플레이어가 일정 거리까지 가면 멈추는 기능도 작업해봤습니다. 