


        고급 디버깅



이전에 배웠던 디버깅에서 좀더 고급의 내용을 배워볼겁니다. 

먼저 함수를 3개 만들어 줍니다. 함수들의 이름을 FuncA, FuncB, FuncC라고 지었습니다.

FuncA 에서는 처음에 Begin A라는 텍스트를 출력한 후 FuncB를 호출하고 나서 End A를 출력하고 끝낼겁니다. 
사실 함수는 어떤 기능단위로 코드들을 묶어 놓은거라고 했었는데 함수 안에서 함수를 호출할 수 있습니다. 애초에 함수안에서 잘 만 호출하던 PrintText도 함수의 일종입니다.

그러면 FuncB는 무엇을 할거냐면 마찬가지로 PrintText 두개를 호출하고 그 중간에 FuncC를 호출합니다. 

FuncC는 그냥 PrintText만 두번 해고 끝날겁니다. 

그리고 나서 이제 레벨 블루프린트로 가서 또 비슷하게 BeginPlay Begin, BeginPlay End 라고 텍스트 출력들 사이에서 FuncA를 호출해주도록 합니다.

이상태로 실행하면 레벨 블루프린트 -> FuncA -> FuncB -> FuncC 순으로 호출이 되면서 텍스트 출력이 이리 저리 섞입니다.
왜 이런 상황을 가정했냐면 앞으로 할 프로젝트에서는 함수에서 함수를 호출하는 작업이 매우 빈번할겁니다.

중간에 끼어 있는 함수가 정말 자주 호출되는 함수 얘를 들어 GetPlayer 라는 함수로 Player 객체를 가져오는 함수라고 해보겠습니다. 

이렇게 이곳저곳에서 호출되는 함수에서 에러가 생겨서 멈췄다고 했을때 그냥 이 함수만 봐서는 어느 경로에서 문제가 생긴건지 알 수 없을 겁니다. 
그래서 그때는 항상 콜 스택이라는것을 추적해야합니다.

콜스택 보려면 언리얼 옵션중 디버깅-> 블루프린트 디버거 를 열면됩니다. 새로운 창이 뜰텐데 지금 예제에서 중간에 중단점을 걸고 실행하면 중단점 걸린 곳의 
콜스택을 볼 수 있습니다. 어느 경로를 따라서 이 함수에 도착했는지를 기록한것입니다. 

그리고 F10, F11 을 이용해 중단점에서 한줄씩 진행한다고 했었습니다. 

이 둘 사이에는 조금 차이가 있는데 F10은 중단점에서 한번누르면 그대로 다음 노드로 이동합니다. 

F11 의 경우는 함수내부에 호출한 함수내부로 타고 들어갑니다. 

프로시저 단위 실행과 한줄씩 실행의 차이입니다. 

디버깅을 할때 필요에따라 어떤걸 해야할지 잘 판단해야 합니다. 