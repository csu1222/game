


    흐름제어 


어떤 조건이나 상황에 따라 코드가 진행되도록 제어하는것 

크게 분기문과 반복문으로 구분할 수 있습니다. 

분기문으로 가장 핵심적인 역할을 하는게 Branch입니다. 이전에 비교연산자를 배우면서 미리 알아봤었는데 
어떤 조건을 받아서 true와 false 일경우 흐름을 나눠서 진행시킵니다. 
브랜치 노드의 경우는 굉장히 자주 사용하기 때문에 따로 단축키가 할당되어 있습니다. B를 누르면서 왼클릭을 하면 바로 생성됩니다. 이 단축키는 꼭 기억해놓아야 작업속도가 빨라질것입니다. 

다음은 Sequence 입니다. 지난번까지 PrintText 를 여러개 만들어 이어 놓으면 반복해서 출력할 수 있었습니다. 
그럴때 편리하게 사용할 수 있는게 Sequence입니다. Sequence를 검색해 배치 할수도 있지만 이 노드도 자주 사용하는 노드이다 보니 S 누르며 왼클릭으로 단축키가 설정되어있습니다.
이것은 어떤 역할을 하는가하면 실행핀을 받아서 Then 0 이라는 실행핀을 쭉 실행하다 끝나면 Then 1 에 이어져 있는 실행핀을 이어서 실행합니다. 0,1 뿐만아니라 add pin으로 갯수를 늘릴 수 있습니다. 
이자체로 중요한 역할을한다기 보다는 코드 정리 차원에서 사용하는 노드입니다. 

그리고 다음은 FlipFlop 입니다. 이 노드는 아웃풋 실행핀에 A 와 B 라는 두개의 핀이 있는데 A를 실행했다가 B를 실행했다가를 반복하는 기능을합니다. 
또 불리언타입 아웃풋으로 is A 라는 핀이있는데 지금 실행하는 핀이 A인지 B인지를 구별할때 사용할 수 있습니다. 
이 FlipFlop은 어떤 상황에서 사용되냐면 예를 들어서 문을 클릭하면 열고 닫는다고 했을때 한번은 열고 한번은 닫고 이런식으로도 사용할 수 있습니다. 

이런 새로운 개념을 배웠을때 그냥 사용하는것도 괜찮지만 한번 직접 그 기능을 구현해보는것도 공부가 됩니다. 
그런의미에서 FlipFlop을 직접 구현해보는 실습을 해보겠습니다. 

먼저 지금 A인지 B인지를 알아야 하니 불리언 변수 bIsA 라는 변수를 만들었습니다. 이 bIsA의 값에 따라 실행이 갈라지는 분기문이 될것이니까 브랜치도 필요할것이고 한번실행한다음은 bIsA의 값을 
바꿔줘야하는데 변수의 값을 바꾸는것은 Set을 사용할겁니다. 이 세가지 준비물을 잘 조립하면되는데 
불리언 값을 반전시키는 논리연산 노드가 있었는데 Not Boolean 이었습니다. bIsA를 이걸로 반전시키고 Set을 해줍니다. 그리고 또 이Set한 결과를 브랜치에 연결합니다. 브랜치의 true false 각각 PrintText를 해 결과를 출력
해주면 되겠습니다. 이것을 키보드 1 이벤트 같은 어떤 이벤트에 연결 시켜서 테스트 해보면 됩니다. 

이런식으로 이미 배운 내용을 잘 조합하면 새로운 기능을 구현할 수 있습니다. 

