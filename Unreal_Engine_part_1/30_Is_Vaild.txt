

    Is Vaild


이어서 이번시간에는 블루프린트 클래스를 작업할때 주의해야할 점입니다. 

복사와 참조의 연장선이기도 합니다. 

이전시간에 만들었던 BP_Player 라는 블루프린트 클래스와 그 객체변수를 가지고 이리저리 읽어서 복사하면 어떻게 될지 테스트 해보고싶습니다.

무슨말이냐면 새로 BP_Player 타입의 변수Player2 를 새로 하나 만들어 봅니다.
이전시간에는 먼저 Spawn Actor BP_Player 로 BP_Player 객체를 생성해 Player 라는 변수에 담아줬는데 만약 여기서 Player를 그대로 Player2에 Set 해주면 어떻게 될까요

두가지 경우의 수가 있을 수 있는데 그냥 똑같은 데이터 복사되어서 두개의 BP_Player 객체가 되던지 아니면 이전에 배운 참조의 개념대로 
동일한 플레이어 객체를 가리키고 있다던가 할건데 정답은 후자로 동일한 객체를 가리키고 있습니다. 

이렇게 되면 Player2의 Set Hp로 값을 수정하고 Player의 Get HP 를 출력해보면 Player2 에서 수정한 값이 출력되는걸 확인할 수 있습니다. 

생각해보면 조금 이상한 상황인겁니다. 분명 Player2의 멤버 변수를 수정했는데 Player라는 다른 객체의 멤버 변수의 값이 수정된겁니다. 

어떤 일이 일어나는건지 알아보자면 
먼저 블루프린트 클래스라는 설계도에 Hp 라는 int 변수가 설계되어 있습니다. 이상태에서는 그냥 설계도일뿐 따로 메모리를 차지하지는 않습니다. 
여기서 Spawn Actor를 통해 객체를 만들게 되면 그때서야 메모리상에 객체가 설계된 크기만큼 메모리를 할당받아 생성됩니다. 
이 메모리 주소를 100 이라고 하겠습니다. 이어서 Spawn Actor로 부터 Player 변수를 만들어 저장하게 되면 Player변수에는 100이라는 메모리상에 플레이어 객체가 위치하고 있는 
주소를 가지고 있게 됩니다. 또 이어서 Player2라는 변수를 Player로 Set 하면 Player2도 100이라는 주소를 가지고 있게 되는겁니다. 
그래서 두 변수가 동일한 메모리 주소를 가리키고 있기때문에 한쪽에서 수정해도 두 변수모두에 영향이 가는겁니다. 

그리고 이미 Player 에서 객체를 잘 관리하고 있는데 왜 굳이 Player2를 만들어 관리해야하는가 생각할 수 있는데 실제로는 종종 일어나는 일입니다. 
대표적으로 함수에서 자주 사용되는데 Static함수를 새로 만들어 볼겁니다 HP를 세팅하는 Set Player Hp 라는 함수를 만드는데 인자로는 BP_Player를 받아주고 내부적으로 
받은 BP_Player 객체의 Set Hp 로 Hp를 100으로 수정하겠습니다. 

Player에서 Set Player Hp 함수를 이어 실해한 다음 다시 Hp를 출력해보면 100이라고 출력됩니다. 
Set Player Hp 함수의 입력핀에 커서를 가져다 대면 BP Player 오브젝트 레퍼런스라고 뜹니다. 즉 참조 값이다 라는 말입니다. 
결국 이 상황에서도 인자로 같은 메모리 주소를 가리키는 참조방식으로 인자를 넘겨주고 있는겁니다. 

여기까지 얘기했으면 다음으로 중요한 내용을 다뤄보겠습니다. 
Player라는 BP_Player 변수는 Spawn Actor 함수로 어떤 메모리에 실제 객체를 만들어 준 다음 그 주소를 Player가 들고 있게 한것이었습니다. 
그런데 Player 변수의 내용을 아무값도 주지 않으면 어떻게 될까요? 그러니까 Player 변수를 만들자 마자 빈 상태에서 사용해보겠습니다. 

막바로 Beginplay 이벤트에서 Get Player, Get Hp 를 출력해보겠습니다. 0이 출력되고 곧바로 런타임 에러가 출력됩니다. 
None 에 접근하려고 했다고 에러 메세지가 뜨는데 이말이 무슨 의미이냐면 Player 의 주소로 가서 Hp라는 값을 가져오려고 하는데 Player 가 가지고 있는 주소 자체가 없다 보니 
에러가 뜨는겁니다. C++에서는 Nullptr에 접근하려 한겁니다. 

이 문제는 함수를 호출할떄 비일비재하게 발생합니다. 실수로 함수를 호출할떄 인자핀을 연결하지 않고 호출했다면 함수내에서 None 에 접근하게 될겁니다. 

그런데 경우에 따라 일부러 Null 인 값을 가지고 활용할 수 도 있습니다. 예를 들어 주변에 있는 가장 가까운 몬스터를 찾아 달라고 하고 이 함수의 반환값으로 몬스터 객체를 뱉어줄건데 
만약 주변에 아무런 몬스터가 없다고 하면 Nullptr을 반환하기도 합니다. 

프로그래밍 도중 실수로 Null이 떠 크래시가 나거나 의도한 대로 반환값이 null이 뜨거나 할수 있는데 그러면 이 두가지를 판별하기 위한 수단이 있어야합니다. 

그럴때 사용할수 있는 기능이 is Valid 입니다. 두가지 버전이 있는데 함수 타입인 is Valid는 인자로 객체를 주면 이 객체가 유효한지 아닌지를 불리언으로 뱉어줍니다. 
또 다른 버전은 마치 브랜치처럼 객체가 유효한지 안한지 두갈래 길을 나눠줍니다. 
이 작업을 다른 프로그래밍언어에서는 null 체크를 한다고 표현합니다. 