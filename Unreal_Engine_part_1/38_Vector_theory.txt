


        벡터 이론


벡터에 대한 이론을 이번 시간에 알아보고 다음시간에는 벡터를 실습해볼겁니다. 

벡터에 대한 수학적 이론을 알아보고 시작할겁니다. 

2차원 좌표계 x y 좌표계를 알것입니다. 원점이라고 하는 (0,0) 으로부터 우측으로 가면 양의 숫자로 표시하고 왼쪽으로 가면 음수로 표현합니다. 
또 위로 가면 양수 로 y좌표를 표시하고 아래로 가면 음수로 표시합니다. 

여기서 벡터는 방향과 크기를 갖는 값입니다. 
어디서 어디로 가는지 방향도 있고 얼마나 가는지 크기도 있는 값입니다. 

이런 벡터를 여러가지 용도로 사용합니다. 오른쪽방향으로 5만큼의 크기를 가진 벡터가 있다고 했을때 이것을 우측으로 5만큼 움직여라 라고 해석 할 수도 있고 
우측으로 5M/s 의 속도로 이동해라 일 수도 있고 아니면 우측으로 5N의 힘을 가해라 라고 할 수도 있습니다. 

그리고 벡터는 어디서 부터 시작했는지가 중요하지 않습니다.
어느 좌표에서 어느 좌표로 이동했다라는것이 아닌 어디서든지 어느방향과 크기를 가지는지가 중요합니다. 

또 벡터의 방향은 단순히 수평, 수직으로만 갈 수 있는게 아니라 대각선으로도 방향을 가질 수 있습니다. 

만약 우측 상향으로 5의 크리를 가진 벡터가 있고 x y 성분으로는 우측으로 4 위로 3만큼의 성분을 가진 벡터를 표현할때는
벡터 v (4, 3) 이라고 표현합니다.
그런데 만약 벡터의 크기가 주어지지 않고 좌표 크기만 주어진다면 어떻게 할까요? 
아주 유명한 피타고라스의 증명을 통해 그 대각선의 길이를 구하면 그것이 벡터의 크기가 됩니다. 

그 다음으로 중요한것이 있습니다. 
벡터는 방향과 크기라는 두가지 요소를 가지고 있지만 벡터에서 방향은 유지한체로 크기만 일정한 값으로 변환하고 싶어하는 경우가 많습니다. 
방향은 그대로인데 크기를 1로 수정한 벡터를 단위 벡터라고 합니다. 단위 벡터로 만드는 것을 정규화 normalize 라고 합니다. 
그리고 정규화를 하는방법은 위의 대각선 벡터로 예로 들면 대각선의 크기가 5였던 벡터를 1의 크기로 바꾸고 싶은겁니다. 그러면 x y 성분도 비례해서 
x/5, y/5 로 계산해주면 되겠습니다 .

이론적으로 이런게 있다고 알면되고 프로그래밍에서는 보통 정규화를 계산해주는 함수가 제공될겁니다. 

그러면 왜 단위벡터가 필요한걸까요
이런 경우가 있을겁니다. 어느 벡터의 방향으로 이동하고 싶은데 이미 있는 벡터를 그대로 사용하면 이동하는 거리를 내 마음대로 조절하지 못하게 됩니다. 
이럴때 이동하고 싶은 방향만 가져와서 이동거리는 내가 원하는 수치를 곱해 이동할때 필요한게 정규화, 단위 벡터입니다. 

추가적으로 벡터 끼리도 덧셈과 뺄셈을 할 수 있습니다. 계산하는 법은 벡터를 이루는 각 x y 성분끼리 더하거나 빼면 됩니다. 
비주얼 적으로 보면 벡터의 덧셈에서는 더하고자 하는 두 벡터중 하나의 끝나는 점에 다른 하나의 벡터를 두고 양끝나는 점을 이으면 그게 벡터의 덧셈입니다.
뺄셈도 비슷한데 하나의 벡터를 그리고 그 끝나는 점에서 뺄 벡터를 방향 반전을 해 붙여줍니다. 그리고 두 시작과 끝점을 이어주면 벡터의 뺄셈을 비주얼적으로 표현한겁니다. 

그런데 우리가 게임을 만들면서 더 중요한 점은 이것입니다. 오브젝트 A 와 오브젝트 B가 있다고 하겠습니다. 이 두 오브젝트는 플레이어와 몬스터 일 수도 있고 
총알이나 화살같은 투사체와 목표물 일 수도 있습니다. 그리고 이 두 오브젝트 사이에서 방향을 계산하고 그 방향으로 이동시키는 행위가 정말 비일비재하게 일어납니다. 

이런 경우 오브젝트 A에서 오브젝트 B로 가는 벡터라고 해서 →AB 라고 합니다. 그리고 이 벡터를 구하는 방법은 간단한데 B의 좌표에서 A의 좌표를 빼주면 됩니다. 원점에서 부터 시작하는 벡터가 아니라 
A에서 시작하는 벡터이기 때문입니다. 이렇게 벡터 좌표를 알게 되면 피타고라스의 정리를 이용해 그 크기도 쉽게 구할겁니다. 

여기서 주의해야할 점은 지금 →AB 벡터는 마치 오브젝트 A의 좌표부터 출발해야 할것처럼 보이지만 사실 벡터라는것 자체가 시작점이 중요한 개념이 아니라고 했었습니다. 

또 A와 B사이를 한번에 이동하고 싶다면 위에서 구한 벡터를 그대로 사용하면 되고 그게 아니라 A에서 B로 가기는 하는데 스르륵 가고 싶다면 →AB를 정규화를 해 단위 벡터를 구한 다음 이동하고 싶은 
크기를 곱해야 합니다. 


또 한가지로 원래 백터의 기본적인 개념은 크기와 방향을 가지고 있는게 맞기는 한데 용도에 따라 그렇지 않은 경우가 있습니다. 

예를 들어서 원점에서 시작하는 벡터 →OA가 있다고 해보겠습니다. 엄밀히 말하면 방향과 크기를 가지는게 벡터라고 했으니 A라는 점이 좌표라고 말 할 수는없지만 그럼에도 불구하고 
→OA의 도달점이 어떤 좌표라는건 변함이 없습니다. 원점에서 시작했다는 조건 때문인데 프로그래밍에서 특히나 벡터라는 개념을 까보면 x,y,z 라는 좌표값으로 이루어 져 있습니다. 
원래는 벡터는 방향과 크기를 가지고 있는게 맞기는하지만 경우에 따라 위치벡터로 사용할 수 있습니다. 위치벡터는 벡터를 이루는 x,y,z 값을 그냥 위치를 나타내는 용도로 사용한다는것입니다. 
그래서 나중에 언리얼로 돌아갔을때 GerRotation 이라는 함수를 사용했을때 반환으로  (x,y,z) 라는 좌표를 벡터라는 구조체로 반환할것입니다. 이때 말하는 x,y,z는 어느 방향으로 어느 크기라고 
표현하는것이 아닌 그냥 위치를 뜻하게 됩니다 어떻게 보면 원점에서 부터의 벡터라고도 볼수 있습니다. 