


    연습 문제 재장전



지금까지의 내용을 응용해 풀어볼 연습문제입니다. 

기본적인 FPS 게임에서는 왼클릭으로 총을 발사하고 R을 눌러 재장전하는게 기본입니다. 이걸 간단하게 로직을 구현해보겠습니다. 

초반부분은 같이 만들었습니다. int변수 Ammo를 하나 만들었습니다. 총을 쐇다라는건 PrintText로 텍스트를 출력하는걸로 대체 할겁니다. 

Fire! Ammo : ?? 이런 텍스트를 출력할건데 이 문자열에서 ??에 해당하는 현재 Ammo를 출력하는방법을 알아보자면 
우클릭으로 Format Text 혹은 포맷 텍스트를 검색해 새로운 노드를 만듭니다. 

이 포맷 텍스트는 텍스트를 만들때 사용하는 노드입니다. 이 포맥 텍스트 노드에 문자열을 입력할수 있는 칸이 있는데 그곳에 Fire! Ammo : {0} 라고 입력합니다. 
그 다음 Get Ammo를 포맷 텍스트의 입력 핀에 연결해줍니다. 그러면 연결된 입력 핀의 값이 {0} 에 치환이 되어 들어갑니다. 
참고로 {} 안에 0이 아닌 다른 변수 이름을 지정해줄 수 있습니다. 예를 들어 {Count} 라고 하면 입력핀에 Count라고 표시되기때문에 더 알아보기 쉬울겁니다. 

그리고 나서 포맷텍스트의 출력 핀을 PrintText에 연결해주면 포맷 텍스트로 만든 문자열이 출력됩니다. 

이제 PrintText를 BeginPlay 이벤트에서 연결받아서 컴파일 저장후 실행해보면 30발이 남았다고 출력이되는데 여기까지가 연습문제의 시작점입니다. 

여기서 왼클릭을 할때마다 총알이 하나씩 줄고 R을 누르면 다시 30으로 채워지는 작업을 해보겠습니다. 우클릭 하고 Left Mouse Button 혹은 왼쪽 마우스 버튼 이라는 노드를 추가합니다. 
이 왼쪽 마우스 버튼 노드는 오른쪽으로 Press, Release 라는 실행 핀, Key라고하는 출력 핀이 있습니다. 말그대로 Press는 눌렀을때 동작, Release는 땠을때의 동작이고 
Key는 클릭의 상세 데이터를 출력하는것인데 이중에 Release, Key 는 일단 무시하고 이번에는 Press 핀만 보겠습니다. 

우선 총을 쏠때 Ammo가 하나씩 줄겁니다. 하나씩 주는것은 - 연산자 노드이고 Get Ammo 변수를 연결해주면 될것같습니다. 하지만 Get Ammo 의 값을 뺏다고 해도 실제 Ammo 변수값이 변한건아니고 
그걸 적용하려면 Set Ammo 를해줍니다. Set이후로는 아까 만든 Ammo PrintText에 ammo 값을 넘겨주면서 출력하면 될것같습니다. 

실행해보면 잘 동작하는듯 하지만 아쉬운점이 생깁니다. Ammo가 0인 상태에서도 왼클릭을하면 -1, -2 로 음수 까지 진행됩니다. 이건 막아줘야할것같습니다. 
비교연산자와 브랜치를 활용하면됩니다. 현재 Ammo 가 0보다 크다면 바로 총알 발사. 아니라면 탄창이 비었다는 출력을 해주었습니다. 

여기서 어떤 값에서 1을 빼는 동작은 게임에서 아주 자주 일어나는 일입니다. 이 것을 지금처럼 1을 빼고 또 Set을 해주는 것도 물론 가능하지만 더 간략화한 기능이있는데 
Get Ammo에다가 -- 노드를 이어주는겁니다. 이 -- 노드는 Decrecent int 혹은 Decrecent float는 입력값 변수에 1을 빼준후 Set 까지 통째로 해줍니다. 

그러면 재장전 기능을 만들어주겠습니다. 재장전을 하면 Ammo의 최댓값 FullAmmo 이 되게끔 해줄겁니다. FullAmmo 라는 int 변수를 탄창 최대값인 30으로 설정해주고 
재장전 키인 R을 누르는 이벤트를 만들어 줍니다. 그러면 R 을 누른 이벤트에서는 Ammo의 갯수를 FullAmmo 로 Set을 해줍니다. 그리고 나서 리로드를 했다는 메세지를 출력해주었습니다. 
여기서도 예외를 하나 만약 현재 Ammo가 최대 총알 갯수라면 리로드를 하지않도록 해줍니다. 

이런식으로 해서 슈팅게임의 아주 기초적인 기능을 하나 구현한 셈입니다.