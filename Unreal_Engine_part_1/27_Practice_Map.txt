


        연습문제 데미지 합산기


Map을 이용한 연습문제입니다. 

있을 만한 예제로 정한 문제입니다. 어떤 RPG 게임에서 보스 몬스터에 준 피해량에 비례해 경험치를 먹는다거나 보상을 얻는다는 사양이라고 가정 해보겠습니다. 

그러면 보스 몬스터 측에서는 어떤 유저가 나에게 얼마나 데미지를 줬는지를 관리해줘야 합니다. 

역시 문제를 해결하기 위해서는 한꺼번에 구현하려고 하지 말고 부분부분 나눠서 구현하면 쉽습니다. 
먼저 DamageMap 이라고 데미지를 준 사람을 Key로 하고 준 데미지를 Value로 하는 Map을 하나 만듭니다. 테스트를 위해 임의로 몇가지 데이터를넣고 
이 Map의 모든 데이터를 출력하는 기능 부터 만들어보겠습니다. 

Map은 배열처럼 순회하는 기능이 딱 있지는 않고 Key를 가지고 Value를 찾는 속도가 빠른 자료구조였습니다. 
그리고 Key들을 배열로 꺼내오는 기능인 Keys 노드가 있었습니다. 그러면 Keys로 꺼내온 배열을 순회하면서 Map에서 Value들을 추출해오면 됩니다. 

여기다가 추가로 키보드 1,2,3 이벤트로 각각 플레이어가 데미지를 넣는걸 기록하는 기능을 만들어 보겠습니다. 
가장먼저 Map에 데이터를 추가할때 Add 라는 기능을 사용했었습니다. Add의 설명을 잘 보면 동일한 Key가 이미 있으면 덮어 씌운다고 합니다. 
Map에서 유사한 기능인 Find와 Contains 기능의 각 차이는 Find는 Map에 입력한 Key를 가진 데이터가 있는지를 불리언으로도 뱉어주고 만약 데이터가 있다면 그 Value도 꺼내줍니다.
그리고 만약에 데이터가 없다면 Key를 가진 데이터를 만들어주고 Default 값을 가진 데이터를 만들어 줍니다. 
반면 Contains는 그냥 데이터가 있는지 없는지만 불리언으로 확인할 수 있습니다. 

여기서는 Find를 사용할건데 Find의 성공여부를 브랜치로 연결해줍니다. 만약 false라면 처음 데미지를 준거니 add 해주고 Ture 라면 기존값에 현재 준 데미지를 합산해주면 되겠습니다. 
그런데 만약 Find의 값이 False 였다고 하더라도 0에 현재 준 데미지를 합산해 Add하면 True일때와 같습니다. 결국 중간에 브랜치가 없어도 된다는겁니다. 

Find를 사용하면 유무 체크와 데이터 생성을 같이 해주는 부분이 이경우 더 편합니다. 항상 Find가 우월한것은 아니고 만들고자 하는 기능 마다 차이가 있을겁니다. 
