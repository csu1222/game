


        For Loop, While Loop


지금까지 데이터에 대한 내용들과 로직의 기초들중 Set, Get, 사칙연산, 비교 연산자, 논리연산, 분기문 과 Sequence, FlipFlop, Min, Max, Clamp 등을 배웠습니다. 
그 중 분기문 Branch는 정말 중요한 내용이었습니다. 이번시간에는 분기문만큼이나 중요한 내용인 반복문, Loop를 배울것입니다. 

먼저 while loop 노드를 검색해 배치해보겠습니다. 
while 노드는 실행 핀을 받고 오른쪽에서는 Loop body 와 complete라는 실행핀이 있습니다. 또 입력 핀으로 condition이라고 불리언 타입을 받는데 
이 조건이 만족하는 동안에는 Loop Body 를 반복해서 실행합니다. Loop Body를 한번실행후 다시 조건을 체크해 참이라면 다시 Loop Body를 실행하는 식입니다. 
언젠가 조건이 만족하지 않으면 complete 노드쪽으로 빠져나오는 노드입니다. 

간단한 예시를 들어보겠습니다. 학창시절 흔히 들을만한 얘기중 어머니께서 숙제를 다 하기 전까지는 게임을 할 수 없다! 라는 말을 흔히 할겁니다. 
이것을 예로 들어보자면 조건이 참일경우 루프를 돌다 보니 조건으로는 숙제를 아직 다 하지 않았는가? 를 주면 이게 참인경우 루프 바디인 숙제를 한다가 반복되고 
언젠가 숙제를 다 하지 않았는가? 가 거짓이 되면 숙제를 다 하였으니 루프를 빠져나와 게임을 할수 있게 됩니다. 

다음으로 while 노드의 조건을 그냥 true로 줘버리고 PrintText "Hello" 를 출력하도록 해봤습니다. 이 때 잠시 프로그램이 멈추더니 에러 메세지 로그로 무한 루프가 감지 되었다고 
합니다. 반복문에서 주의해야 하는 것중 하나인데 루프를 빠져나가지 못하고 계속 돌고있는 문제입니다. 빠져나올 조건이 없기 때문에 생긴 문제입니다. 

빠져나올 조건으로 어떤 카운트 변수를 하나 만들고 한번 루프를 돌때 마다 카운트를 줄여 가면서 하는게 기본일겁니다. 

프로그래밍에서 분기문과 반복문을 잘 조합하면 거의 모든 로직을 다 구현할 수 있습니다. 추가로 객체지향같은 개념을 더 배워야하긴합니다. 

반복문에는 while 루프 말고도 다른 버전이 있습니다. while은 자칫 실수하면 무한 루프에 빠지기가 쉬운 편입니다. 
For Loop와 For Loop with Break 라는 노드가 있습니다. while로도 for 를 구현할수있긴하지만 for도 정말 자주 사용하는 반복문 문법입니다. 

for 루프는 첫 인덱스와 마지막 인덱스를 입력 받는데 이 인덱스를 하나씩 카운팅하면서 그 수만큼만 반복하는 반복문입니다. 처음에 반복할 횟수를 지정해 주기 때문에 무한루프의 실수를 많이 줄일수 있습니다. 

for 루프와 while 루프는 사실 비슷한기능이지만 For Loop with break 라는 노드는 어떤 일을 하는지 알아보겠습니다. 

반복문을 실행하던중 어떤 상황에서는 중간에 빠져나오고 싶을 경우가 나올수도 있습니다. 
어떤 경우가 있을지 예시를 들어보자면 RandomNumber 라는 int 변수를 만들고 이 값을 Random Integer 노드로 0부터 99까지의 수 랜덤하게 세팅하였습니다. 
왠지 모르지만 이 랜덤 값을 for 루프를 돌면서 찾을겁니다. 0 부터 99 까지의 인덱스를 돌면 이중 하나의 인덱스는 랜덤 넘버와 일치합니다. 만약 일치한 인덱스에 도달했을때 
Break 로 가도록 해주면 반복문을 빠져나오게 됩니다. 

필요에 따라 이 세가지 반복문을 골라서 사용하면 됩니다. 