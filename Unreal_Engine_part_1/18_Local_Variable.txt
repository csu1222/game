

        로컬 변수 


지난 시간까지 함수의 기본적인 내용을 알아봤습니다. 콘텐츠 브라우저에 블루프린트 함수 라이브러리를 추가 한 다음 그 파일에서 함수의 이름도 정하고 
매개 변수를 어떤 타입으로 몇개나 받을지 또 반환으로는 어떤 타입을 할지를 알아 봤습니다. 

이번에 알아볼 것은 이 함수 설계 창의 왼쪽에 있는 Local Variable 로컬변수 혹은 지역변수에 대해 알아보겠습니다.

로컬 변수도 변수이긴 변수입니다. 하지만 함수내부에서 사용하는 변수인 로컬변수는 기존의 변수와 동작하는 방식이 조금 다릅니다. 
엄밀히 말해서 이전 시간까지 배웠던 변수들은 멤버 변수에 해당하는 변수들입니다. 

로컬 변수는 언제 사용하는것인가 하면 우리가 함수를 설계하면서 매개변수들을 이리 저리 다뤄 원하는 결과물을 만들어 낼것인데 이 과정이 단순해서 연산 중간값 없이 
바로 반환할 수 있으면 좋겠지만 경우에 따라 함수 정의부에서 하는 일들이 장황하고 복잡해 질 수 있습니다. 

또 다른 특징이 있는데 이전 시간에 만들었던 int 두개를 더하는 함수에 Temp라는 값을 임시로 저장하기 위한 변수를 하나 만들었다고 치겠습니다. 
그리고 나서 왼쪽에서 함수를 하나더 추가해 만들게 되면 이 두번째 만든 함수에서는 Temp라는 변수가 없어집니다. 즉 각 함수마다 속하는 변수들을 로컬 변수라고 하는것입니다. 

로컬 변수는 함수마다에게 종속적인 특징탓에 함수에 로컬변수의 갯수를 막 늘린다고 해도 메모리를 계속 차지하는게 아닌 함수를 호출했을때 변수들에게 메모리가 할당되어 사용하고 
또 함수가 종료될때 다시 메모리를 해제해줍니다. 

굉장히 임시적이고 불안정한 메모리라고 하겠습니다. 


여기서 한발짝만 더 들어가면 블루 프린트 말고 다른 프로그래밍 언어를 사용하게 될텐데 그때 알아야 하는게 메모리 구조입니다. Static 변수를 가장 위에 컴파일 시점에 할당되는 변수들이 있고 
런타임에 동적할당되는 데이터들을 저장하는 Heap 영역이 있습니다. 그리고 함수를 호출할때 함수에게 할당되는 영역인 Stack 영역이 있습니다. Stack 영역에 로컬 변수같은게 저장되는것입니다. 

초보자의 경우 메모리관리를 필요이상으로 집착하는 경우가 있다고 합니다. 로컬변수는 함수가 종료되는 시점에 다 해제가 되는 메모리 이다 보니 다른 곳 보다는 변수의 수를 마음대로 늘려 사용해도 
괜찮은 부분이라고 할 수 있습니다. 