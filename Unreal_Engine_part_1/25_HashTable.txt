



        해쉬 테이블 이론


배열과 쌍벽으로 자주 쓰이는 Map 이라는 자료구조에 대해 알아볼것이고 또 Map을 이해하기 위해서 선행되어야하는 해쉬테이블에 대해 알아보겠습니다. 

배열을 사용할때 만약 게임에 접속하는 모든 플레이어를 배열로 관리한다고 해보겠습니다. 대략 5000명의 플레이어가 접속해 있다고 했을때 배열의 원소의 값이 플레이어의
고유한 아이디가 된다고 했을때 만약 아이디가 7500번인 플레이어가 접속해 있는지를 물어본다면 어떻게 해야할까요?

곧바로 알 수 있는방법이 없고 배열을 전부 순회하면서 해당 원소의 값이 7500 인지를 찾는 방법밖에 없습니다. 
물론 블루 프린트에서 Find, Contains 같은 함수들이 있다고 했지만 기능이 있다고 해서 빠르게 동작한다는 것은 아닙니다. 

배열의 가장 큰 단점은 찾고자 하는 데이터의 값만 알고있다면 서칭이 매우 느리다는 단점이 있습니다. 

값을 빨리 찾는게 중요한 상황은 아주 비일비재합니다. 이런 상황에서 배열은 서칭에 유리할점이 딱히 없습니다. 
그래서 대신해 서칭이 필요한 데이터를 다룰때 사용하는 자료구조가 Map입니다. 

이해하기 쉬운 일상에서 볼수 있는걸로 예를들어보겠습니다. 

어떤 통이 있고 이 안에 여러개의 공이 들어있습니다. 공에는 각각의 번호가 적혀있습니다.
이런 상황에서 어떤 특정 번호가 적힌 공을 찾는다면 공을 하나하나 확인해 찾는번호의 공이있는지를 확인해야합니다. 
좀 더 나은 방법이 있을까를 생각해보겠습니다. 
통을 하나만 두는게 아니라 10개의 통을 가져다 놓고 뒤의 숫자가 각각 0~9인 공들을 모아둔다고 하겠습니다. 
그러면 어떤수를 찾고자 할때 일단 뒷자리에 따라 공이 분배 되어 있을것이기 때문에 좀 더 이점이 있을겁니다. 

근데 통을 하나만 관리할때 보다 10개의 통을 관리하면 공간을 더욱 쓰기 때문에 조삼모사가 아닌가 싶기도합니다. 

자료구조를 공부할때 어떤 하나의 자료구조가 모든상황에서 더 나은 성능을 낼 수 있다고 말할 수 없습니다. 각기 용도에 따라 장단점이 있는게 보통입니다. 

핵심적인건 결국 메모리 용량을 희생해서 검색 속도를 올리는겁니다.
어떤 값을 빨리 찾고 싶을때 그 값을 어떤 번호로 빨리 치환할수 있는 Hash 함수를 하나 정해야 합니다. 위의 예시에서는 어떤 숫자의 끝자리를 통번호라고 생각한다는 
간단한 Hash함수를 사용한겁니다. 

Hash함수를 연산하는건 통하나에 몰려있는데이터를 다 뒤지는거에 비해서는 아주 가벼운 연산이기 때문에 별 상관이 없습니다. 

이것이 해시테이블의 개념입니다. 

이제 언리얼엔진 블루 프린트에서 Map 변수를 만들어 보면 키와 벨류의 타입을 각각 지정해 줄 수 있습니다.
키와 벨류가 나뉘어 있는 이유는 대부분의 경우 실제 저장한 데이터와 그 데이터를 찾기위한 값이 다른 경우가 많습니다. 
전화번호부에서 누군가의 번호를 찾고 싶다고 하면 그 사람의 이름을 검색하면 그사람의 전화번호가 나올겁니다. 제가 알고 싶은건 전화번호였지만 검색하는 키값은 이름이었습니다.

블루프린트로 전화번호부를 사용해보면 이름과 번호 모두 string 문자열로 설정하고 각값을 넣어주면 될겁니다.