


    디버깅


이번에는 디버깅 실습을 해보겠습니다. 

예시를 들어보겠습니다. 이전에 사칙연산중에 나눗셈에서 int 타입을 나누다보면 문제가 생기는 상황을 가정하겠습니다. 
Hp를 백분율로 표현하기위해 MaxHp로 나눌겁니다. 

Hp = 82, MaxHp = 100 이고 이 둘을 나누기 노드로 나누고 다시 100을 곱하면 백분율이 나올것같습니다. 이걸 포맷 텍스트로 만들어 PrintText로 출력합니다. 

하지만 결과는 0% 라고 나옵니다. 왜냐하면 저번 시간에 배웠던 대로 정수와 정수를 나누게되면 딱 정수로 나눠지지 않을 경우 나눈 결과물의 몫만 남고 밑이 버려집니다. 

그래서 이렇게 내가 생각한대로 동작하지 않는 버그를 잡는 방법으로 첫번째로는 PrintText를 하나 만들어 처음부터 차례차례대로 찍어보면서 체크하는 방법이 있습니다. 
이건 다른 프로그래밍 언어때 와 달리 블루프린트에서는 조금 힘든 방법입니다. 노드를 하나하나 만드는게 시각적인 공간을 차지하기 때문입니다. 
두번째로는 디버깅을 활용하는것입니다.

디버깅을 실습해보겠습니다. BeginPlay 이벤트를 선택한 상태에서 F9를 눌러보겠습니다. 그러면 노드의 위쪽에 빨간색 동그라미가 뜹니다. 이것을 Break Point 중단점을 걸었다고 표현합니다.
프로그램을 실행하면서 중단점에서 실행이 일시중지 되는겁니다.

꼭 이벤트에만 붙힐수 있는건아니고 함수에도 붙일수 있습니다. 중단점을 건 상태에서 프로그램을 실행해보면 중단점에서 멈춘걸 확인할수 있습니다. 여기서 F10을 누르면 다음 노드로 넘어갑니다.
한단계씩 이동하면서 어디서 문제가 생긴건지를 차근차근 확인할 수 있습니다. 

디버깅을 하지 않고 코드를 눈으로만 보면서 문제를 찾으려고하는것은 비효율적입니다. 지금이야 코드 몇줄이 안되지만 나중에는 양이 방대해질겁니다. 

아무튼 예시에서 문제가 되는 부분은 Hp와 MaxHp는 int 인상태로 나눗셈을 한 것입니다. 나눗셈을 하기전에 float로 캐스팅해주면 되겠습니다. 두 int둘중 하나만 float로 캐스팅해줘도 되는데 
float가 int보다 우선순위가 높기때문에 둘중 하나만 float라도 나머지를 float로 자동 캐스팅해서 연산이 됩니다.  그 후 다시 연결해주면 정상적으로 82 퍼센트라는 출력이 됩니다. 


그런데 연산의 순서를 뒤바꿔보면 어떨까요? 무슨말이냐면 위의 방법에서는 82 / 100 을 하면 0.82 인데 소수점 아래를 다 날려버려서 0으로 인식된건데 나눗셈 전에 먼저 100을 곱한다음 나누면 
8200 / 100 하면 어떨까 생각하는겁니다. 실제로도 이방법으로도 정상적으로 82퍼센트라는 결과가 출력됩니다. 

결국 버그를 수정하는데에는 여러 방법이 있다는것입니다. 
이중에 hp에 100을 먼저 곱하는 방법이 더 깔끔하니까 더 우월한 방법인것 같은데 꼭 그렇지는 않습니다. 이 방법에도 어떠한 문제가 있습니다. 
만약 hp가 10억이라는 값인데 여기에 100을 또 곱하게되면 int타입의 최대 한계를 넘어버리는 결과가 됩니다. 이 문제를 오버플로우라고 하는데 할당 받은 메모리를 넘어서는 값을 받으려고 하기 때문입니다. 