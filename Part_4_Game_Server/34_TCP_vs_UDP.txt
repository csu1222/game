


    TCP vs UDP


이번시간은 전송 계층 프로토콜 두가지 TCP 와 UDP 를 비교해보는 시간을 가져보겠습니다.

본격적인 네트워킹 이론까지는 배우지 않을 거고 일단 좀 더 소켓프로그래밍을 배우기 위한 선수 지식정도로만 알아본 다음 
프로그래밍 실습 위주로 진행하며 네트워크 이론의 필요성을 충분히 느끼고 나서 들어갈것이라고 했습니다. 

나중에 네트워크 이론을 다룰때 자세히 하겠지만 네트워킹을 한다는것은 마치 택배를 보내는것과 비슷합니다.
A아파트 201호에서 B아파트 101호로 택배를 보낸다고 할때 그냥 택배를 보내야지 하고 마음만 먹는다고 알아서 택배가 도착하는것은 아닐겁니다.
여러가지 절차가 있을건데 
실제 택배가 어떤 과정을 격는지는 넘어가고 네트워킹과 관련된 예시로 다섯가지 과정이 있다고 해보겠습니다.

상품 포장 -> 배송정책 결정 -> 택배보낼 주소 기입 -> 어떤 경로로 갈지 결정 -> 최종적 택배운송 
이런 순서로 진행된다고 하겠습니다.

이것과 비슷한 네트워크 통신 과정이 있습니다. 

어플리케이션 -> 트랜스포트 -> 네트워크 -> 데이터링크 -> 피지컬 

이런 용어를 사용합니다. 각 단계의 정책을 정해주고 보내는 데이터에 정해준 정책들도 포함해서 통신을 하게 됩니다. 

이전 시간에 Hello World! 라는 문자열을 주고 받아 봤는데 이 문자열만 전송되는게 아니라 덕지덕지 다른 정보도 붙어서 주고 받는 것이었습니다. 

그리고 오늘 알아볼 TCP , UDP 라는 것이 뜻하는 것은 두번째 단계인 트랜스포트에 해당하는 것입니다. 
데이터를 보낼때 어떤 정책으로 보낼것이냐 하는것인데 이 내용 TCP와 UDP에 대한 내용은 면접에서 맨날 나오는 내용이라고 합니다. 
그만큼 중요하기도 하고 기본이기도 하다는 뜻이겠습니다. 

TCP
1) 안전한 트럭
2) 전화 연결 방식

UDP
1) 위험한 총알 배송
2) 이메일 전송 방식

이런 특징들을 가지고 있다고 요약할 수 있는데 각각을 좀 더 자세히 알아보겠습니다. 

먼저 '연결 지향성'을 기준으로 비교해보겠습니다. 
TCP는 '연결형 서비스'라고하고  UDP는 '비연결형 서비스'라고 합니다. 전화와 이메일을 보낼때의 차이라고 볼 수 있습니다. 

전화를 걸때 우리는 상대방에서 전화를 받아야 전화라는게 성립합니다. 즉 발신자쪽에서 자신의 전화를 가지고 상대방 번호로 연결을 시도하고
수신자쪽에서는 발신자의 번호로 걸려온 전화를 받을지 말지를 정해 받았다면 연결이 성립하고 나서 서로 이런저런 대화를 나누기 시작할겁니다. 
그래서 정말 연결이 된 느낌으로 통신을 한다. '연결을 위해 할당되는 논리적인 경로가 있다' 라고 할 수 있습니다. 

반면 이메일을 보낼때는 상대방이 이메일을 받을 수 있는지 아닌지는 상관없이 내가 보낼 말을 적어 필요한 만큼 보내놓으면 이후로는 이메일 받는 사람이 알아서 
보던지 말던지 신경을 꺼도 됩니다. 실제로 UDP가 그런식입니다. 연결이라는 개념이 없고 그냥 전송을 할 목적지인 상대방 주소를 찍어서 보내고 
다음에도 같은 주소를 통해 보내는 동작을 합니다. 

또 중요한것이 '전송 순서가 보장이 되는가?' 라는 요소가 중요한데 전화(TCP)를 걸었을 때는 연결이 된후 "여보세요? 안녕하세요?" 라는 말을 하면 이 순서그대로 
상대방에게 전달이 되어서 "여보세요? 안녕하세요?" 라고 들을겁니다. 어떻게 보면 당연한 특징인데 
이메일(UDP)의 경우에 상대방에게 여러 메일을 한번에 보냈다고 했을때 일반적이라면 보낸 순서대로 받겠지만 경우에 따라서는 늦게 보낸메일이 먼저 도착하는 경우도 있습니다. 
즉 전송 순서에 대한 보장이 되지 않는다는 겁니다. 

그리고 마지막으로 경계의 개념이라는 것이 있는데 이 내용은 좀 있다가 설명을 하겠습니다. 


두번째 비교 기준은 '속도와 신뢰성' 이라는 기준입니다. 
대부분의 경우는 TCP, UDP 중 뭐가 낫다라고 하기보다는 장단점이 있는데 
TCP는 신뢰성이 좋고 속도가 나쁩니다. UDP는 신뢰성이 나쁘고 속도가 좋습니다. (속도가 빠르고 느리다는 상대적으로 그렇다는 말입니다.)

TCP는 전송 도중 분실이 일어나면 책임지고 같은 패킷을 다시 보냅니다.(신뢰성 good) 반면 UDP는 분실에 대한 책임을 전혀 지지 않습니다. 
일단 전송하고 나면 상대방이 받았던지 못받았던지 간에 신경을 쓰지 않습니다.(신뢰성 bad)

그리고 또 중요한 개념이 흐름/혼잡 제어 라는 것인데
TCP 에서는 상대방이 데이터를 주고 받을 여유가 없다면 전송을 중단하고 기다려줍니다. 
반면 UDP에서는 상대방이 어떤 상태이건간에 일단 막 보내고 나서 생각합니다. 그러다 보니 상대방의 이메일함이 꽉차있었다고 하면 보낸 이메일들이 분실되거나 
할 수 있습니다.

위의 신뢰도 관련된 두가지 성질때문에 TCP는 전송에 고려할 사항이 많아서 전송속도가 비교적 느리게 되고 UDP는 고려할것이 적기 때문에 전송속도가 비교적 빠릅니다. 


또 중요한 개념중 하나가 '데이터 경계'에 대한 내용입니다. 아까 연결지향성에서 나왔던 개념인데 
이것도 나중에 온라인 서버를 만들때 중요하게 생각해야하는 문제중 하나입니다. 

이전시간에 TCP 소켓 프로그래밍을 실습해보면서 100바이트를 전송하려고 해도 서버쪽 RecvBuffer 에 받아줄 공간이 50바이트 밖에 없다면 잘라서 보내진다고 했습니다. 
그 이유가 TCP는 데이터 사이에 경계가 없기 때문입니다. 데이터 전송이 마치 컨베이어 벨트 공장같은 느낌인데 
"Hello" 와 "World!" 라는 문자열 두개를 순서대로 전송했다고 했을때 순서보장은 됩니다. 즉 "World!"를 먼저 받고 "Hello"를 나중에 받는 일은 발생하지 않습니다. 
하지만 경계가 없다 보니까 이 두 문자열이 어떻게 합쳐지거나 분리될지 예측할 수 없습니다. 상황에 따라 "Hello Wor" ,"ld!" 이렇게 데이터를 받을 수도 있다는 말입니다. 

UDP는 정반대라고 보면 되는데 UDP는 음식 배달을 보내는 것처럼 한번에 음식 하나씩 포장이 딱딱 되서 보내집니다. "Hello", "World!" 를 보낸다고 하면 무조건 보낸 
경계선에 따라 전송이 되지만 데이터를 받는 순서는 보장이 되지 않기 때문에 "World!"를 먼저 받고 "Hello"를 나중에 받을 수도 있습니다. 


결론적으로 요약을 다시 해보겠습니다. 
- TCP
1) 연결을 위해 할당되는 논리적인 경로가 있다.
2) 데이터 경계(Boundary)가 없다.
3) 전송 순서가 보장된다.
4) 분실이 일어나면 책임지고 다시 전송한다 (신뢰성 Good)
5) 물건을 주고 받을 상황이 아니면 일부만 보냄(흐름/혼잡 제어)
6) 고려할 것이 많으니 상대적으로 속도 Bad

- UDP
1) 연결이라는 개념이 없다.
2) 데이터 경계(Boundary)가 있다.
3) 전송 순서가 보장 되지 않는다.
4) 분실에 대한 책임을 지지 않는다 (신뢰성 Bad)
5) 일단 보내고 생각한다.
6) 단순하기 때문에 상대적으로 속도 Good

이렇게 정리하면 정말 대칭적인 특징을 가지고 있습니다. 
여러 특징중에 우리의 목적인 게임 서버를 만들때 편리한 특징도 있고 불리한 특징도 있습니다. TCP 기준으로는 데이터 경계가 없는것은 불리한 특징이고 
3,4,5 번 특징은 유리한 특징입니다. UDP는 반대일것 입니다. 

게임서버를 만들면 앞으로 여러 패킷을 보내게 될겁니다. 지금이야 문자열이라는 한종류만 주고 받았지만 나중에는 캐릭터를 어디로 이동하라 라는 명령과 
어느 몬스터를 공격해라 라고 하는 서로 종류가 다른 패킷을 보내게 될건데 이때 데이터 경계가 없어서 끝맺음이 분명하지 않으면 원래 의도대로 동작하도록 
받은 패킷들을 나누어서 조립해야 합니다. 이런 작업이 귀찮은건데 다른 특징들은 편리한데 예를 들어 전송순서가 보장된다는 특징은 
만약 클라이언트에서 몬스터를 공격하고 몬스터는 체력이 0이 되어 죽었습니다. 이걸 서버에 전송햇을때 전송순서가 보장되지 않아서 몬스터가 먼저 죽은 다음 
공격하는 걸로 처리되면 게임이 제대로 동작하지 않을겁니다. 패킷 분실이 일어났을 때 보장을 해주는 것도 온라인 서비스에서는 중요한요소일겁니다. 
흐름/혼잡 제어가 되는 특징도 중간에 데이터 손실이 일어나지 않게끔 상대방이 수용가능한 만큼의 데이터만 천천히 보내는 것도 유리한 점입니다.

UDP는 반대라고 했었습니다. 데이터 경계가 있는 것은 당연히 편리한 요소이고 전송순서가 보장 되지 않는 것을 해결하려면 패킷 하나마다 넘버링을 해서 서버쪽에서 다시 
순서를 정렬한 다음 처리를 해야하고 분실에 대한 책임을 지지 않고 일단 보내고 생각한다는 문제는 게임의 장르에따라 치명적일수도 있고 감안할 만한 문제일 수 있습니다. 
UDP는 전송속도가 빠르기 때문에 FPS 게임 같은데서는 전송속도가 중요하기도 하고 데이터 손실같은경우는 잦은 데이터 전송으로 중간 손실된 데이터를 보간 하는걸로 
감안 할 수 있지만 MMORPG 같은 경우는 아이템 데이터 같은 중요한 데이터가 손실되면 안되기때문에 사용하기 어려운 점이 있습니다. 

그러니깐 전송 계층 프로토콜중 꼭 어떤게 더 좋고 안 좋고가 아니라 상황에 따라 사용이 가능하다는 겁니다. 

경우에 따라 UDP의 장점을 살리고 나머지 아쉬운 부분의 정책을 직접 만들면서 어떻게 보면 TCP와 UDP의 중간정도로 만들수가 있습니다. 
이것을 Reliable UDP 라고 합니다. 이것은 사실 MMORPG 기준으로는 아직 다루지 않을 내용입니다. 

MMORPG에서는 기본적으로 TCP로 만든다고 합니다 모바일의 경우는 자주 끊어지기 때문에 Reliable UDP를 활용하기도 합니다. 

지금 알아본 이런 장단점같은것이 면접 단골 질문이라고 하니까 기억하고 가야 하겠습니다. 


추가적인 내용을 보겠습니다. 흐름/혼잡 제어에 관한 내용인데 이전 시간에 소켓프로그래밍 개론을 알아보면서 RecvBuffer와 SendBuffer가 
둘다 꽉차있는 상황에서 send 함수는 블로킹이 되어 기다리고 있게 된다고 했습니다. 이전 내용이 TCP를 기준으로 설명했기 때문인데 블로킹이라는것 부터 
클라이언트와 서버사이에서 버퍼에 여유 공간이 있는지를 통신하고 있었습니다. 


다음시간에는 UDP 서버 실습을 해볼것인데 미리 조금 생각을 해보겠습니다. 위에서 send가 블로킹 된 상황을 예를들어서 TCP에서는 데이터가 손실되지 않도록 버퍼가 
꽉 차면 잠시 멈추고 있었는데 UDP는 방식이 다르다고 했었습니다. 분실에 대한 책임을 지지않고 상대의 상황도 고려하지 않고 막 보낸다고 했습니다. 
그렇기 때문에 SendBuffer에서는 그냥 처리되는대로 패킷을들 막 보내는데 서버쪽에서는 받지 못한다고 하면 받지 못한 패킷은 그냥 유실이 됩니다. 
이러면 데이터는 데이터대로 유실이 되고 네트워크 회선은 쓸데없이 점유하고 있는 상태인겁니다. 
이게 UDP의 단점입니다. 