


        멀티쓰레드 입문


서버 프로그래머 입장에서 멀티쓰레드는 필수적으로 알아야 되는 개념이기도 하지만 

한편으로 멀티쓰레드를 시작하는 순간 이전에는 발생하지 않았던 여러 문제들이 발생하기 시작합니다. 

이번 멀티쓰레드 이론 입문 강의에서는 이해하기 쉽도록 비유를 통해 개념을 잡아 갈겁니다. 
그리고 그 비유는 여태껏 강의를 들으면서 익숙한 비유입니다.

OT 시간에 말했듯이 클라이언트 프로그래밍은 영화 촬영과 비슷하고 서버 프로그래밍은 식당 운영과 비슷하다고 많이 말했었습니다.

식당을 개점할때 보통 장르를 정하고 시작합니다. 한식을 할건지 일식을 할건지 아니면 페밀리 레스토랑을 할것인지 등등 
이 장르에 따라 인테리어나 식기 요리사등이 전부 다를겁니다. 

한식, 일식은 비교적 작은 규모로도 개점할 수 있으니 직원을 한명씩 뽑을 수도 있고 
페밀리 레스토랑은 보통 좀 큰 규모로 시작하니까 직원이 두명부터 필요하다고 하겠습니다. 

그런데 일반적이 현실 케이스와 다르게 직원들이 그냥 알아서 움직이지 않을겁니다. 받드시 영혼을 주입해서 영혼이 있는 
직원만 움직일수 있다고 생각해보겠습니다. 비현실적인 상황이긴하지만 일단 프로그래밍적으로 설명하기 위해서입니다.

만약 한식 식당 직원에게 영혼을 줬다고 하면 이제 한식식당의 직원이 움직이기 시작합니다. 그런데 이러면 다른 식당들이 
돌아가지 않을겁니다. 그래서 이번엔 일식 식당 직원에게 영혼을 옮겨서 일식 식당이 돌아가게끔 합니다. 

이 돌아가면서 영혼을 불어넣는 일을 매우 빠르게 모든 영혼을 번갈아가면서 한다면 
사실상 4개의 직원을 하나의 영혼이 동시에 움직이는것 같은 착각을 느낄만큼 할 수 있을겁니다.

이 상태를 정확히 보면 어떤 특정 시간에 모든 직원이 동시에 움직일 수는 없지만 사람이 느끼기에는 4명의 직원이 동시에 움직이는것과
다를바 없을겁니다. 

그래서 이 방법으로 3개의 식당 4개의 직원이 원활하게 움직였습니다. 

이제 이 비유에서 식당, 직원, 영혼이 프로그래밍에서 뭘 의미하는지를 알아보겠습니다. 

고급레스토랑    ->      프로세스(프로그램)
직원            ->      쓰레드
영혼            ->      CPU 코어 

이렇게 해당한다고 볼 수 있습니다.

그래서 우리가 운영체제 위에서 여러 프로그램을 사용할 수 있습니다.
예를 들어 게임을 하나 켜 놓은 다음 인터넷 브라우저도 하나 실행해 두고, 메모장도 하나 실행해뒀다고 하면 
이게 한식, 일식, 페밀리 레스토랑 식당들로 비유했던겁니다.

각 프로그램에 UI 와 로직이 다 준비가 되어도 그냥 실행되는것이 아니고 그 프로그램을 실행하는 주체, 쓰레드가 있어야 합니다. 

쓰레드가 무엇인지 영문으로 검색을 해보면 Animated Sprit이라는 용어를 많이 사용합니다. 실질적으로 프로그램을 움직이는 영혼으로 비유를 하는거죠 

그런 쓰레드도 곧이 곧대로 메모리에 올라갔다고 해서 실행되지는 않습니다. 그럼 프로그램을 진짜로 프로그램을 실행하는 주체는 무엇이냐?
컴퓨터의 부품중 유명한 CPU의 코어가 맡게 됩니다. 

요즘 컴퓨터에서는 CPU가 멀티코어를 가지고 있는게 당연하지만 설명을 쉽게 하기 위해서 옛날 옛적 컴퓨터인 코어가 하나뿐인 CPU로 설명을 하겠습니다.
여기서 CPU 코어라고 하는것은 인간으로 치면 두뇌에 해당하는 부분입니다.

안에 보면 ALU 라고해서 산술 연산 장치 라고 연산을 담당하는 부품이 있습니다.
그래서 이 코어하나가 메모장을 실행하고 있으면 메모장이 동작하고 있고 다음순서인 브라우저를 실행하고 있으면 브라우저가 움직입니다.

매우 빠르게 반복하면 인간눈에는 3개의 프로그램이 동시에 실행되고 있다고 느낄테지만 CPU입장에서는 항상 한개의 프로그램씩을 실행하고 있는겁니다.

그리고 하나의 프로그램 내에서도 식당의 예시에서는 페밀리 레스토랑, 프로그래밍에서는 MMO 에서는 쓰레드를 두개 배치하는걸로 표현할 수 있습니다.
그림판, 브라우저 같은경우는 비교적 단순한 프로그램이기 때문에 딱히 쓰레드를 다수 배정할 이유가 없지만 
MMORPG 같은 프로그램은 딱 봐도 할 일이 굉장히 많을겁니다.

하지만 쓰레드를 여러개 배치했다고 해서 언제나 성능이 좋아지는것은아니고 실질적으로 코어가 하나밖에 없으면 멀티쓰레드를 한 의미가 크게 없기는 합니다. 
그리고 같은 쓰레드라고 해도 하는일에 따라 중요도가 다를 수 있습니다. 메모장같은 경우는 우선도가 낮은 프로그램이고 MMORPG는 높은 우선도를 가진 프로그램일것입니다. 
우선도에 따라 쓰레드에 할당하는 시간을 다르게 줄 수 있습니다. 이 개념은 운영체제론에서 다루는 주제이기도 합니다.

이 쓰레드를 통해 여러 프로그램을 실행시키는것, 쓰레드를 다수 배치하는것은 컴퓨터 구조, 운영체제 등 많은 것들과 연관성이 있다는걸 알 수 있습니다. 

지금까지는 옛날에 사용하던 코어가 하나뿐인 CPU일때의 설명이었고 

실질적으로 사용하는 컴퓨터를 생각해보면 멀티코어라는 용어를 사용합니다. CPU 안에 코어가 여러개 배치된 상황인겁니다. 

만약 배정된 쓰레드 개수와 코어의 개수가 맞아떨어져서 하나의 코어가 하나의 쓰레드를 전담할 수 있으면 정말로 동시에 프로그램들이 실행되는 
상태라고 볼 수 있습니다.

그런데 물론 쓰레드 개수가 코어의 개수보다 늘어나면 코어들이 이 쓰레드 저 쓰레드 돌아가면서 실행될겁니다. 

그리고 실제 우리 컴퓨터의 작업 관리자를 열어서 프로세스를 보면 한번에 실행되는 프로세스들이 굉장히 많은걸 알 수 있습니다.
기본적으로 운영체제측 Windows 커널 모드라고 하는 부분에서 한번에 실행되는 프로세스들이 많기 때문인데 

아무튼 게임 프로그래머 입장에서 이상적인 상황은 MMO 게임이외의 프로그램들은 모두 꺼진 상태이고 MMO에 사용되는 쓰레드 개수만큼의 
코어가 있어서 1대 1로 전담해 실행되는상황이 이상적인 상황일겁니다.

그러면 게임에 여러 쓰레드를 붙이는 이유는 뭘까요?
게임 내에서도 여러 일감들이 있을겁니다. DB, 게임 로직, 클라이언트 세션 등 의 일감이 있을 텐데 각기 일감들이 처리할 일이 만만치 않을것이기 때문에 
동시 다발적으로 처리하고 싶습니다. 

이렇게 쓰레드가 여러개가 등장한 환경은 여러 프로그램에 여러 쓰레드가 할당되는것과 하나의 프로그램내에 여러 쓰레드가 할당되는것 두 경우가 
어떤 차이가 있는지 처음배울 때는 햇갈릴 수 있습니다. 

멀티쓰레드 환경에서는 굉장히 큰 장점이 있는데 Heap 영역과 데이터 영역을 모든 쓰레드들이 공유할 수 있다는 장점이 있습니다. 
Heap 영역에는 새로 할당된 객체같은 것들이 저장되고, 데이터 영역도 비슷한 static 변수, 함수들이 저장됩니다. 

이 장점은 일반적으로 말그대로 장점이 되겠지만 어떤 상황에서는 문제를 발생시키기도 합니다.

예를들어 하나의 쓰레드에서는 Heap이나 데이터 영역의 데이터를 수정하고 있고 다른 하나의 쓰레드에서는 수정되고 있는 그 데이터를 읽어들이려고 할때 
문제가 발생합니다. 이런 상황을 해결해야만 우리가 멀티쓰레드를 활용하는 장점을 온전히 누릴 수 있을겁니다. 

우리가 이론적으로는 각 일감들에 쓰레드를 잘 배치 해서 딱 실행하는걸 예상하지만 실제 실행할때는 상황에 따라 로직이 한곳에 쏠리고 모이고 하면서
어느 일감에만 쓰레드가 몰리거나 할 수 있습니다. 

이번 시간은 멀티쓰레드 이론 입문 시간이기 때문에 굉장히 간략하게 설명을 했고 이후로 실제로 쓰레드를 만들어 보고 실행 시켜보면서 
더 깊게 이해할 수 있겠습니다. 