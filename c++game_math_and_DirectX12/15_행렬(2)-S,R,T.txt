

		15. 행렬 (2) - Scale, Rotation, Translation 변환 행렬



지난시간의 행렬 기본을 하였고 게임에서 어떻게 응용해야 하는지에 대해 이야기 해보겠습니다. 

행렬에 대해 배우는 이유는 벡터에 행렬을 곱해서 새로운 벡터를 얻기 위해서 하는 것입니다. 
벡터와 행렬의 곱에 대해서는 이전 시간에 잠깐 나왔지만, 벡터가 가진 원소들을 행이 1개인 행렬로 인식하면 행렬 사이의 곱이라고도 볼 수 있는것입니다. 
(x, y, z) 로 이루어진 3차원 벡터가 1×3 행렬이라고 볼 수 있는겁니다.
그러니까 용어가 벡터와 행렬의 곱이라고 어렵게 생각할 필요없이 행렬곱이라고 생각하면되겠습니다.

벡터에 곱할 행렬을 어떻게 잘 조작하면 원하는 결과를 얻을수 있을 것 같습니다. 이게 이번시간의 목표입니다.
게임에서 주로 원하는 종류의 조작 3가지가 있는데 

- Scale(크기), Rotation(회전), Translation(이동) 


# Translation

조금 아쉬운 접이 있는데 3가지 조작법중 Translation(이동)을 예시로 들어보겠습니다. 
( x, y, z ) 라는 임의의 좌표에서 ( 3, 4, 3 )정도의 거리를 이동하고 싶다고 해볼것인데, 3차원 좌표에서 이 조작을 하기가 마땅한 방법이 없습니다. 
한번만 할 조작이라면 어떻게든 곱할 행렬을 만들어 원하는 결과를 만들 수는 있을거 같은데 이 S, R, T라는 기능은 게임에서 매 프레임 수도 없이 일어날 작업인데 너무 복잡해 집니다. 

이런 아쉬운점을 해결하기 위해 보통 3차원 좌표에 1이라는 원소 하나를 더 포함시켜서 일종의 4차원 좌표를 만듭니다. 
ex) ( x, y, z, 1)  -> 마지막 요소를 w라는 약자로 부릅니다.

이런 좌표계를 [동차 좌표계] 라고 합니다.

이 동차좌표계에서 SRT를 하기 위해 곱하는 행렬 M을 곱하면 w값 xyz좌표 값에 더해지면서 원하는 결과를 얻기 쉽게 도와줍니다.

( x, y z, 1)  m11 m12 m13 m14	x = x*m11 + y*m21 + z*m31 + m41
	  m21 m22 m23 m24	y = x*m12 + y*m22 + z*m32 + m42
	  m31 m32 m33 m34	z = x*m13 + y*m23 + z*m33 + m43
	  m41 m42 m43 m44	w= x*m14 + y*m24 + z*m34 + m44 

3차원 행렬에서는 M과 곱한 결과물이 모두 xyz좌표와 얽혀있어서 원하는 결과를 도출하기 어려웠는데 지금 동차좌표계에서 1이라는 상수를 추가한것으로 m41, m42, m43을 
각 x ,y ,z 좌표에 더해주기 쉽게 되었습니다. 

즉 , m41, m42, m43 의 원소들이 Translation을 담당하게 됩니다. 
그리고 w의 결과물도 1이 나오게 해야 다음프레임에서도 똑같이 동작 할 수 있을겁니다. 그러면 m14, m24, m34를 0으로 m44를 1로 설정하면 항상 w원소는 1이라는 결과물이 나올겁니다.
나머지 9개의 원소들도 역시 채워줘야 하는데 우선 우리가 원하는 결과물에 대해 다시 생각해보면 원래의 좌표 x, y, z에서 a, b, c만큼 움직이고 싶다면 행렬곱을 한 결과물이 
x = x + a
y = y + b
z = z + c
이어야 합니다. 이중 a, b, c 는 m41, m42, m43에서 담당하고 있었고 각원소는 자신그대로 나와야 합니다. 
x의 결과물에서는 m11 은 1이어야 자기자신이 나올것이고, m21, m31가 0이어야 y, z 좌표값이 영향을 안줄것입니다. 
y의 결과물은 m22가 1이고 m12, m32는 0이어야합니다.
z의 결과물은 m33가 1이고 m13, m23이 0이어야합니다.

이렇게 해서 결국 Translation 행렬의 모든 원소값을 알아냈습니다. 
>  1  0  0  0
    0  1  0  0
    0  0  1  0
    a  b  c  1

이렇게 SRT중 T를 알아 봤고 나머지도 알아보겠습니다.


# Scale
이번에는 벡터의 크기를 뻥튀기하는 Scale 행렬에 대해 알아보겠습니다. 
( x, y z, 1)  m11 m12 m13 m14	x = x*m11 + y*m21 + z*m31 + m41
	  m21 m22 m23 m24	y = x*m12 + y*m22 + z*m32 + m42
	  m31 m32 m33 m34	z = x*m13 + y*m23 + z*m33 + m43
	  m41 m42 m43 m44	w= x*m14 + y*m24 + z*m34 + m44 
여기서 다시 스케일을 해볼건데 
스케일은 x ,y ,z 좌표가 각각 a, b, c 배 만큼 늘어나길 원하고 있는겁니다. 편의상 a,b,c 모두 2라고 가정하면 Scale행렬을 곱한 벡터는 (2x, 2y ,2z) 가 되어있어야 합니다.
x = ax
y = by
z = cz
w = 1
라는 결과물이 나와야합니다.
이렇게 두고 보니깐 Translation에서 봤던 내용들이 보입니다. 
우선 w는 연산후에도 1이라는 값을 유지해야 하니깐 m14, m24, m34 는 0이고 m44 는 1이어야 하는것이 같습니다. 
이동 행렬에서는 m41, m42, m43 이 필요했지만 지금 스케일 행렬에서는 필요치 않다보니깐 모두 0으로 밀어주겠습니다. 
이러면 다시 나머지 9개의 요소만 채워주면 되는데, 
x에 곱해질 m11 에 a를 넣어주어야 결과가 ax가 될것이고 m21, m31을 0으로 밀어줘야 다른 좌표값이 영향을 주지 않을겁니다. 
y에 곱해질 m22를 b로 , m12, m32를 0으로 밀어줍니다.
z에 곱해질 m33을 c로 m13, m23을 0으로 밀어주겠습니다.

이제 Scale행렬의 모든 요소들을 알수 있습니다. 
>  a  0  0  0
    0  b  0  0
    0  0  c  0
    0  0  0  1

그런데 이 경우는 물체가 원점을 기준으로 대칭적으로 있을때의 경우입니다. 만약 원점이 아닌 곳에 있는 물체를 위의 방법으로 크기를 키우면 그 물체는 어떤 방향으로 이동하면서 커지고 있을겁니다.
물체의 중심좌표? 라고 부를수 있을것 같은데요 

예를들어 캐릭터를 모델러 분들이 만드실때 보통 캐릭터의 양발 중앙에 중심 좌표를 둡니다. 그런데 갑자게 제가 특이하게 하고 싶다고 캐릭터의 몸통 중앙에 중심좌표를 두고 만들게되면 어떤 일이 일어날까요?
슈퍼마리오 처럼 인게임에서 캐릭터의 크기가 변하는 게임이었다면 캐릭터가 버섯을 먹으면 캐릭터가 커지면서 커진만큼 땅을 파고 들게 됩니다. 반면 원래의 양발 중앙을 중심좌표로 두면 
의도했던대로 지면에 발을 붙힌상태에서 캐릭터의 크기가 커질 것 입니다. 그래서 보통 발밑을 기준으로 만드는것입니다.

이렇게 해서 Scale행렬에 대해 알아 봤습니다. 


# Rotation

로테이션은 위의 Translation, Scale에 비해 좀 더 어렵습니다. 회전을 한다면 무언가를 기준으로 회전을 할것인데 그러면 기준이 무었일까요? 3차원에서의 x축, y축, z축이 회전의 기준이 될 수 있을겁니다.
예를들어 z축을 기준으로 회전을 한다면 z축은 고정이 되고 나머지 x, y 축이 회전합니다. 이것은 수식으로 표현을 해야 할텐데 

다시 z축 회전을 예로 들어서 어떤점 A(x1, y1)가 있다고 하고 이 A를 z축 회전으로 B(x2, y2) 로 이동했다고 하겠습니다.
원점O에서 A까지를 잇는 선분과 원점O에서 B를 잇는 선분사이의 각도를 X라고 하고 (x1, y1) 이 (x2, y2)로 어떻게 변하는지가 궁금한것입니다.

O에서 A까지의 거리를 r이라고 하겠습니다. x축과 선분 OA의 각도를 a라고 하겠습니다. 선분OB의 길이는 OA가 회전한것 뿐이니 길이가 똑같이 r일것입니다. 
A의 x1성분은 rcos a 입니다. y1성분은 r* sin a 이겠구요, B의 x2, y2는 각각 r*cos(a+X), r*cos(a+X) 입니다.

이렇게 각 요소들에 대한 요약이 되었습니다. 그럼 이제 각 좌표의 관계에 대해 알아봐야겠습니다.  
코사인 덧셈 정리에 의해 
x2 = r * cos(a)*cos(X) - r * sin(a)*sin(X)
y2 = r * sin(a)*cos(X) + r * cos(a)*sin(X)
여기서 x1, y1의 값이 각각 r * cos(r), r * sin(r)이었던걸 치환할 수 있습니다.

결과적으로는 
x2 = x1 * cos(X) - y1 * sin(X)
y2 = y1 * cos(X) + x1 * sin(X)
이 됩니다. 

이제 행렬 원소들 채우기를 해보겠습니다.
( x, y z, 1)  m11 m12 m13 m14	x = x*m11 + y*m21 + z*m31 + m41
	  m21 m22 m23 m24	y = x*m12 + y*m22 + z*m32 + m42
	  m31 m32 m33 m34	z = x*m13 + y*m23 + z*m33 + m43
	  m41 m42 m43 m44	w= x*m14 + y*m24 + z*m34 + m44 

우선적으로 m41, m42, m43 은 Translation이 아니니까 전부 0으로 밀어주고, w도 1로 유지하기위해 m14, m24, m34는 0으로 m44는 1로 채워주었습니다. 
다시 나머지 9개의 원소를 적절해 채워줄것입니다.
그리고 지금은 z축 회전 예시이기때문에 값이 그대로 나와야합니다. m13, m23은 0으로 ,m33은 1로 채워주어서 값이 드대로 나와야겠습니다. 
x 좌표 ,y좌표에서도 z값이 영향을 끼치지 않을것이기 때문에 m32, m32도 0이어야 합니다.
남은 m11, m21, m12, m22을 채워주는데 그 값이 
x2 = x1 * cos(X) - y1 * sin(X)
y2 = y1 * cos(X) + x1 * sin(X)
이렇게 되야 한다는 이야기입니다. 그렇게 Rotation의 행렬을 채워보면 
> cos(X)  -sin(X)  0  0
   sin(X)  cox(X)   0  0
     0        0     1   0
     0        0     0   1
이것이 z축 회전 행렬이고 나머지 x축 y축 회전도 비슷한 원리로 됩니다. 

또 한가지 생각해볼점은 Scale에서 발 밑을 기준으로 했던것과 비슷하게 Rotation은 어디를 기준으로 회전을 시켜야 하는지를 생각 해보겠습니다.
회전행렬은 x축, y축, z축 각각 기준으로 회전을 하기도 하고, 어떤 상황에서 어떤시점에서 회전하는가에 따라 달라진다고 합니다. 

예시로 삼각형을 z축 회전을 할건데 삼각형의 중심이 y축 x축 의 원점인 삼각형을 회전시키려고합니다.
30도씩 회전을 한다고 하면 매번 30도씩 뱅글뱅글 돌고 있습니다. 이걸 '자전'이라고 합니다. 

다음으로 이번에는 삼각형의 x,y축 평면의 1사분면 어딘가에 위치하고 있습니다. 이것을 또 일정각도 회전을 시키면 이삼각형은 원점을 기준으로 맴돌고 있습니다. 
이걸 '공전'한다고 합니다. 

지구과학에서 들어본 용어들입니다. 

그런데 지금우리가 배우는 용도는 게임에서 사용하려고 하는겁니다. 캐릭터를 회전시키기위해서는 보통 '자전'을 많이 사용할 것입니다. 


# 마무리 
이렇게 행렬변환의 3대장 Scale, Rotation, Translation을 배웠습니다.

행렬의 특징중 하나가 결합법칙이 성립 했었습니다. 그러면 오브젝트에 Scale, Rotation, Translation을 하나씩 연산해주나 세 변환 행렬을 미리 곱해놨다가 오브젝트에 한번에 곱해주나 결과가 똑같다는 이야기입니다.
그런데 여기서 중요한점은 결합법칙은 성립하지만 교환법칙은 성립하지않기때문에 SRT의 순서를 꼭 지켜줘야합니다.

그러면 외 꼭 S, R, T의 순서여야 하는지를 생각해보겠습니다. 우선 Translation은 그냥 물체를 평행이동을 하다보니깐 나머지 S, R에 영향을 받지않습니다.
S, T, R의 순서였다면 이동을 한 후에 회전을 한다는건데 그러면 회전의 중심점에서 멀리 떨어진 물체를 회전하는 공전이 되어버립니다. 의도하지 않은 결과물이 될겁니다. 
T, S, R도 마찬가지로 이동후 Scale을 하면 물체 중심에서 가만히 크기가 늘어나는게 아니라 이동했던 방향으로 물체가 이동하면서 늘어나게되고 거기서 다시 회전하면 오차가 더욱 커질겁니다. 
그래서 Translation은 가장 마지막에 있어야 된다는걸 알았고

그러면 Scale과 Rotation은 순서의 상관이 있을까 생각해보겠습니다. 
Scale이 항상 모든 축 방향으로 똑같이 커진다면 Rotation과 별 상관이 없을것같습니다. 하지만 Scale은 모든방향이 아닌 어느 축 방향만으로 늘릴 수도 있습니다. 그러면 
Rotation으로 회전후 x축 방향으로 크기를 늘리는것과 x축 방향으로 늘린후 회전을 시키는것은 또 결과물이 달라집니다. 이런 이유로 S, R, T의 순서로 해야겠습니다.


행렬을 처음 배울때는 이게 게임과 무슨상관일까 하는 생각도 들겠지만 응용하는방법을 들어보니 게임과 정말 밀접한 관련이 있다는걸 알게 되었습니다. 
캐릭터를 움직이려면 일단 Translation이 필요하고 그 움직이는 캐릭이 항상 한 방향만 보고 있지 않을것이기 때문에 Rotation이 필요하고, 어떤 몬스터의 보스타입을 만들기 위해 크기를 키우려면 Scale이 필요해집니다. 



 
