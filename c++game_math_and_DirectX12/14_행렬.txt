

		14. 행렬


이번 시간에 배울 행렬은 현대수학에서 다방면에서 사용됩니다. 인공지능에서도 사용되고, 게임수학에서도 사용됩니다. 

그 중 게임수학에서 사용될 때는 벡터와 행렬이 같이 사용되는 경우가 많습니다. 

# 행렬이란?

행렬을 비유로써 알아보자면 별모양 물체가 있고 빨간색, 초록색, 파란색의 포탈 3개가 있다고 했을때 각 포탈에 들어가면 별에게 어떤 작용을 합니다. 
빨간 포탈은 별의 크기가 변하고, 초록 포탈은 별의 좌표가 변하고, 파란 포탈은 별의 기울기가 변한다고 했을때 ,
이 포탈들을 곂쳐 놓을수도 있다고 해보면 빨간 포탈과 초록 포탈을 곂쳐서 별을 통과시키면 별은 크기도 변하고 좌표도 변하게 됩니다. 
이런걸 행렬이라고 합니다.(사실 무슨 비유인지 잘 모르겠네요)

게임에서 별모양 물체가 뜻하는건 벡터라고 합니다.
언리얼 part.2에서 DirectX를 배워왔던건 컴퓨터상의 가상 3D공간의 물체들을 카메라라는 시점에서의 물체들을 2D로 잘 변환해서 화면에 표현하는걸 GPU에게 시키는 과정인데
어떤 물체가 행렬에 들어갔다오면 변환이 일어난다는게 중요한것입니다. 

우리가 가상3D공간에 만들 오브젝트의 좌표는 위치벡터로 표현하고, 그 좌표가 변하는과정은 행렬로 표현할것 입니다. 그리고 행렬이 한번에 한가지 변환만 일어나는게 아니라 
포탈을 곂치듯이 한번여 여러 변환이 일어나게 할 수 있는데, 이것도 게임과 큰 연관성이 있다고 할 수 있습니다.

본격적으로 행렬에 대해 알아보겠습니다. 

(1) 행렬의 정의 

-행렬이란, 수 또는 다항식 등을 직사각형 모양으로 배열한 것. (위키백과)

행렬을 쉽게 생각하면 2차원 배열인데, 안에는 스칼라 값이 들어가 있다고 생각하면 됩니다. 그리고 행렬을 만들려면 우선 행(row)과 열(column)이 몇개가 들어갈지 정해야 합니다.
예를 들어 2행, 3열의 행렬이라면
	m11 m12 m13
	m21 m22 m23
이런 형태입니다.
통상적으로 행렬을 표기할때 행렬 전체를 M이라고 하고 각 원소들을 m11, m12 이렇게 표기합니다. m뒤의 숫자는 행렬에서 원소가 위치한 행과 열을 표현합니다.

(2) 행렬의 사칙연산 및 특징

- 곱셈 : 행렬의 곱은 어떤 행렬 A가 있을때 k라는 스칼라 값을 곱하면 A의 모든 원소에 각각 k를 곱해주면 됩니다. 
ex) 	A = 1, 3		k*A = k,  3k
	      4, 2		        4k, 2k

- 덧셈 : 행렬의 덧셈이 성립하려면 더하려는 행렬끼리의 format, 행과 열의 크기가 같아야 합니다. 그리고 같은 위치의 원소들끼리 각각 더해주면 됩니다.
ex)	A = 1  3	  B = 1  1	A+B = 2  4
	      4  2         1  1 	          5  3

일단 행렬은 처음 부터 다시 배우고 있어서 스칼라와 행렬의 곱, 행렬끼리의 합을 배웠지만 게임을 만들면서 이런건 거의 활용하지 않을겁니다. 
게임에서 주로 사용되는것은 행렬끼리의 곱입니다. 

- 행렬끼리의 곱 : m×n크기의 행렬 A가 있고 n×p크기의 행렬 B가 있다고 했을때 이렇게 행렬끼리 곱할때는 앞에오는 행렬의 열과 뒤에오는 행렬의 행이 같아야 연산할 수 있습니다.
	그러면 A, B가 곱한 결과물을 C라고 했을때 어떻게 나오는가 하면 m×p의 크기인 행렬로 나옵니다.
	연산은 어떻게 되냐면, A×B에서 A의 행의 원소 각 순서대로와 B의 열의 원소 각 순서 대로가 곱해서 곱한값들을 모두 더한값이 C의 c11의 값이 됩니다.
	(상당한 노가다입니다. 그래도 이런 작업들을 컴퓨터가 대신해줄것이니 다행입니다.)
	또 다른 방법으로 행렬의 성분들을 벡터처럼 취급해서 내적으로 구하는 방법도 있습니다. 무슨말이냐면 A의 행 원소들 한줄을 벡터로 간주하고 B의 열 원소들 한줄을 또 벡터로 간주해서
	두 벡터의 내적을 C의 한 원소로 삼는것 입니다. 이 방법은 그냥 이런 방법도 있구나 하고 넘어가면되겠습니다. 어짜피 컴퓨터가 알아서 계산해줄것입니다.

그러면 이 행렬곱에서는 교환 법칙이 성립할까요? 당연히 아닐것입니다. 두 행렬을 곱하려면 앞 행렬의 열과 뒷 행렬의 행이 같아야 한다고 했는데 두 행렬을 교환한다고 해서 
다시 그 두 행과 열이 같다는 보장이 없습니다. 
다만 행렬곱에 결합법칙은 성립합니다. 증명은 찾아보면 되겠고 일단 알아두면 좋겠습니다.

왜 갑자기 행렬곱의 교환법칙, 결합법칙에 대해 말이 나왔냐하면, 결합법칙이 성립한다는게 중요한데, 처음에 행렬에 대해 비유를 들었을때 별과 포탈들을 비유로 들었었습니다. 
거기서 별이 A라는행렬이라고 보고 B와 C 행렬을 곱해주는 상황입니다. 순서대로 곱하면 (AB)C 이런 느낌이고 A라는 별을 일단두고 포탈끼리 곱을 해놓고 나중에 A(BC)를 해도 괜찮다는 의미입니다.
이게 조삼모사같이 보일수도 있지만 나중에 DirectX에서 실습을 할때 실감 할수 있을 것입니다.

또 한가지 행렬의 특징에 대해 알아보겠습니다. 
행렬에서는 행과 열이 똑같은 요소들이 있을겁니다. m11, m22, m33 같은 위치의 요소들 말입니다. 이 요소들을 대각선에 있는 요소들이라고 해서 [대각요소]라고 합니다.
그리고 이 대각 요소들만 값을 갖고 나머지 요소들은 모두 0으로 채워진 행렬을 [대각 행렬]이라고 합니다.
거기서 더 더욱 특이한 녀석이 있는데 대각 요소들이 모두 1이고 나머지가 모두 0으로 채워진 행렬을 [단위 행렬](identity) 이라고 합니다.

언리얼이건 유니티건 Identity라는 용어가 제공 될것입니다. 약자로 I라고 부르는데, 그러면 이 단위행렬이 특별취급을 받는지가 궁금해집니다.
직접 계산해보면 그 특별함을 알 수 있는데 어떤 행렬 A에 같은 크기의 단위행렬 I를 곱해주면 행렬A 자신이 나옵니다. 
또 한가지 단위행렬의 특징은 AI를 해도 A가 나오지만 IA를 해도 A가 나온다는 특징이 있습니다. 분명 행렬곱에서는 교환법칙이 성립하지 않았는데 단위행렬은 다릅니다.


# 게임에서의 행렬

- 4×4 행렬의 이유
지금은 행렬 개론시간이기 때문에 매번 다른 크기의 행렬들을 예시로 들고 있었지만, 게임에서는 대부분 4×4크기의 행렬을 사용하게 될것입니다.
왜 그런지 설명하자면, 게임에서 행렬의 사용 목적이 벡터와 행렬을 곱해서 벡터의 위치를 변경한다던가 하는것이 최종목적인데
우리가 게임에서 사용하는 벡터가 보통 x,y,z 혹은 추가로 0혹은1이라는 원소를 가지고 있을것입니다. (x, y, z, 1) 이런식으로 네번째 원소에 대해서는 나중에 설명이 나올것입니다.
그리고 벡터와 행렬의 곱셈에 대해서는 따로 설명하지 않았지만 위에서 말한 벡터를 1×4 크기의 행렬로 생각하면 행렬곱을 할 수 있을 것입니다.
1×4 크기의 벡터와 어떤 행렬을 곱해서 1×4크기의 또다른 벡터가 만들어지기를 원하고 있는겁니다.  
행렬곱에서 결과물의 포멧은 앞의 행렬의 행, 뒷 행렬의 열을 가지게 된다고 했습니다. 그래서 1×4크기의 벡터를 연산해주기위해 주로 4×4크기의 행렬을 사용하는것 입니다.
(딱히 기억할 필요는 없지만 4×4 같은 행렬을 정사각형 행렬이라고 합니다.)

- 역행렬
위에서 배웠던 단위 행렬에 대한 이야기를 한가지 더 해보겠습니다. 단위행렬은 대각선의 성분들이 모두 1이고 나머지는 0으로 채워진 행렬이라고 했습니다. 
그러면 행렬 A,B글 곱했더니 우연히 A*B = I 가 되었다고 해보겠습니다. 그리고 임의의 행렬 M이 있다고 해보겠습니다. 
그러면 M*A*B는 어떻게 될까 생각해보니 A*B가 I였으니깐 M*I = M일겁니다. 거기다가 행렬곱에서는 결합법칙이 성립된다고 했습니다. 
그래서 뒤의 A*B를 I로 치환하는게 아니라 (M*A)*B 도 M이어야 합니다. 그러면 M*A로 연산이된 행렬에 다시 B를 곱하면 M자신으로 돌아온다고 볼 수 있습니다.
이렇게 행렬곱을 한 결과물에 곱하면 자신으로 돌아오게 하는 행렬을 [역행렬]이라고 합니다. 그리고 이 역행렬을 표현할때 M의 역행렬은 M^-1이라고 표현합니다.
항상 역행렬이 존재하는것은 아닙니다. 예를들어 행렬M에 같은크기의 0으로 이루어진 행렬을 곱하게되면 이후로는 무엇을 곱해도 0이 됩니다.
그래서 어떤 행렬이 역행렬이 존재하는 행렬이다 하면 이 행렬을 [가역행렬] 이다 라고도 표현합니다.

이 역행렬이라는 개념을 알고 있으면 이후에 DirectX에서 필요한 때에 떠올릴수 있겠습니다.

M*M^-1 = I 라는 것을 보면 매우 유용해 보입니다. 그런데 여기에 더해 M*(M^-1) = I = (M^-1)*M 이라는 것도 증명이 가능합니다.
행렬에는 교환법칙이 성립하지 않지만 증명을 통해 알 수 있는데 
M*(M^-1) = I 에서 왼지 모르게 각 현의 우측에 M을 다시 곱하였습니다. 그러면 M*(M^-1)*M = I*M 인데 우현은 그냥 M이라고도 볼수 있죠
정리하면 M*(M^-1)*M = M 입니다. 그런데 행렬에는 결합법칙은 성립한다고 했습니다. 그래서 좌현의 오른쪽 두개를 묶어 보겠습니다.
M*((M^-1)*M) = M 입니다.  이 식을 어떻게 보면 M에 무엇인가를 곱했더니 자신 그대로 입니다. 그 조건에 맞는 것은 단위행렬밖에 없습니다. 즉 
(M^-1)*M = I 도 성립이 됩니다.

일단 역행렬이 어떤 것이고 어떤 성질인지는 알았습니다. 그러면 일반적 행렬에서 어떻게 역행렬을 구할 수 있는가 하면.
이 행렬도 역사가 오래된 만큼 사람들이 식을 다 만들어 놨습니다. 그런데 이 역행렬을 구하는 식이라는게 2차원 3차원 늘어날수록 더 더욱 복잡해집니다.
그래서 2차원 행렬의 예로 들겠습니다. 
2차원 행렬 A = a  b 라는 행렬입니다. 이 행렬이 역행렬이 존재하는지를 알아볼수 있는식을 Determinate 라고 합니다. 내용은 Det = ab - bc 의 결과가 0이 아니라면 역행렬이 존재하는  
	        c  d  
라고 볼수 있습니다. 이런 상태에서 A^-1 을 구하는식은 이렇습니다. 
A^-1 = 1/Det * d -b 입니다.   Det가 0이라면 앞의 나누기가 성립이 되지 않을것입니다. 이게 2차원 행렬의 역행렬 구하는 법입니다. 
	        -c  a

이 식이 실제로 맞는지 확인하기 위해 아무 의미없는 행렬 A = 1  2 의 역행렬을 구해 보겠습니다.
						     3  4 
Det = 4-6 = -2 이고 그러면 이 행렬 A는 역행렬이 존재한다고 볼 수 있습니다. 
다음으로 역행렬을 식대로 구해보면 
A^-1 = (-1/2) * 4 -2  = -2    1    이라는 행렬이 됩니다.
	        -3 1    3/2  -1/2

그러면 진짜 역행렬인지 A*(A^-1) 을 계산해보면 
(-2+3)  (1-1)  = 1  0 이 됩니다.
(-6+6)  (3-2)     0  1 

2차원 행렬도 생각보다 복잡한 과정인데 게임에서는 주로 4×4 행렬을 사용한다고 했지만 실제 사용할때는 컴퓨터가 대신 계산해줄것이기 때문에 걱정을 안해도 되겠습니다.

- 게임에서의 역행렬 구하기
역행렬구하는 법이 복잡해서 딱히 외우지 않아도 된다고 하기도 하지만, 게임에서는 쉽게 구하는 방법이 또 있습니다.
그러기 위해 전치행렬을 먼저 알아야합니다. 전치(Transpose) T라고 표기합니다. 그래서 전치행렬이란 무엇이냐 하면 행렬의 각원소의 행과 열을 뒤집는겁니다. 
ex) 1 2 3  를 전치하면  -> 1 4 7
     4 5 6		          2 5 8 
     7 8 9                       3 6 9
전치행렬만 가지고는 딱히 어떤 쓸모가 있지는 않지만 수학적으로 전치행렬은 몇가지 성질을 가지고 있습니다.
어떤 행렬의 전치를 두번 하면 자신으로 돌아온다, (M*N)을 전치하면 (N^T)*(M^T) 라는 성질도 있습니다.
이런성질중 우리에게 유용한 성질은 따로 있는데 직교행렬인 경우가 있습니다. 

또 새로운 용어 직교행렬이 등장했습니다. 직교는 기하학에서 직각으로 교차하는 걸 말하는데 여기서도 같습니다.
	 1  0  0	-> 벡터a	
행렬 M = 0  0  1   -> 벡터b
	 0  1  0  -> 벡터c
이렇게 행렬M이 있고 각 행을 벡터라고 하겠습니다. 그리고 벡터a·벡터b = 0, 벡터b·벡터c = 0, 벡터a·벡터c = 0 입니다. 
벡터의 내적이 0인 경우는 두 벡터가 90도를 이루고 있을 때입니다. 이것이 직교 행렬입니다. 

그러면 이런 직교 행렬일때 어떤 성질이 있는가 하면 직교 행렬 M에서  M*(M^T) = (M^T)*M = I 라는 성질이 있습니다.
모든 전치 행렬이 이렇다는게 아니라 직교상황일때의 전치행렬에 대해 이렇다는 이야기입니다. 매우 특수한 상황인겁니다.

이렇게 보면 이렇게 특수상황에 적용되는 예가 무슨 소용인가 할 수 있지만, 우리는 게임을 만들기 위한 수학을 배우고 있습니다. 
게임상황에서는 이런 상황이 종종 있습니다. 게임의 좌표계 자체가 3 벡터를 서로 서로 직각으로 두기 때문에 엄청 희귀한 상황은 아닙니다.
나중에 카메라와 좌표계에서 큰 역할을 해 줄겁니다.

또 한가지 특징은 직교행렬 M의 전치행렬 N을 곱하면 단위행렬 I가 된다는것은 직교행렬의 역행렬이 직교행렬의 전치행렬과 같다는 말이 되겠습니다.

그래서 우리는 직교행렬일때는 역행렬을 구하는 복잡한 식을 사용하지 않아도 전치를 해주면 역행렬을 구할 수 있습니다.

이렇게 행렬 기본기에 대한 내용을 마치겠습니다.