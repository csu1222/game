

        19. Camera 


꽤 긴 시간동안 게임수학에 대항 이론을 배우고 오랜만에 프로젝트로 돌아왔습니다. 
게임수학이론들을 우리가 만들고 있던 코드에 적용시켜보겠습니다.
변환행렬들을 어디에 적용시키는가 하면 

default.hlsli 파일 즉 쉐이더파일을 보면 이전에는 입력해준 좌표에 별다른 변환을 해주지 않고 고대로 사용하고 있었습니다.
이제는 열심히 배운 행렬을 이용해서 World,View,Projection변환 행렬들을 사용해서 쉐이더 함수에 적용시킬겁니다.

프로젝트를 만들었을때 무작정 복사했던 내용중 EnginePch.h에 XMVECTOR나 XMMATRIX같은 typedef가 있었습니다. 이것들의 정체부터 조금 살펴보자면 
XMMATRIX를 f12로 따라 들어가보니 struct로 만들어져있고 #endif로 어떤 상황일때는 ~~하게 만들어져있고 #else일때는 ~~하게 되어있습니다. 
그런데 기능을 보면 연산자오버로딩으로 연산이 가능하게는 되어있지만 우리가 배웠던만큼 복잡한 기능을 들고 있지 않습니다.
행렬의 어느부분을 Translation을 담당하는 부분이라거나 Right, Up, Look벡터를 가리키는 부분을 가지고 Rotation행렬을 만든다 혹은 Scale행렬을 만드는 
부분이 하나도 없습니다. 그러면 사용할때 직접 코딩해야하나 싶네요
또, 행렬이 XMVECTOR r[4]; 이런식으로 구현되어있는데 이 XMVECTOR라는 구조체도 살펴보면 별로 정보가 있지는 않다는걸 알 수 있습니다.

필요한 기능들을 하나씩 직접 만드는것은 공부하기에는 좋은 방법이긴 하지만 그러기 보다는 있는 라이브러리로 최대한 만드는것을 해볼거에요
- 왜 모든걸 하나하나 직접 만드는걸 추천하지 않는가? -> 이미 만들어져있는 라이브러리가 은근히 최적화가 잘 되어있습니다.
  우리가 배웠던 float를 사용하는방법도 있지만 라이브러리에서는 float를 조금 특수한 하드웨어를 사용합니다. 그것을 simd(Single Instruction Multiple Data)라고 하는데
  아까 봤던 XMVECTOR 가 __m128 이라는 타입을 사용하고 있었는데 이런것들이 기본적인 float를 사용하는게 아니라 데이터를 묶어서 처리한다고 보면 됩니다.
  연산때 사용하는 레지스터가 일반 레지스터가 아닌 float이나 행렬 같은거에 궁합이 잘 맞는 특수 레지스터를 활용할겁니다.
  이런 복잡하고 어려운 struct를 혼자서 만드는것은 힘들겁니다. 

우리가 d3dx12.h 라는 헤더 파일이 비공식적인 마이크로소프트 공식(?)헤더라고 했던것 처럼 게임수학에 관한 헤더를 인터넷에서 다운 받을 수 있습니다.
dx12 simplemath.h 라고 구글에 검색하면 마이크로소프트의 깃허브가 나오는데 거기서 Download ZIP으로 받아서 압축해제를 했습니다. 
그 라이브러리에서 가져올 파일은 3개입니다. inc폴더의 simplemath.h, simplemath.inl 그리고 src 폴더의 simplemath.cpp 파일 입니다. 
우리 프로젝트의 Engine->Utils필터에 추가해주었습니다.

이제 EnginePch로 가서 simplemath를 include해주고 밑으로 내려가서 사용하던 typedef  Vec2,Vec3,Vec4,Matrix를 XMVECTOR,XMMATRIX로 사용하던걸 
DirectX::SimpleMath::Vecter2,3,4 와 DirectX::SimpleMath::Matrix로 바꿔 주었습니다.

궁금하니깐 변경한 Matirx를 따라 들어가보면 Matrix가 XMFLOAT4X4를 상속하고 있고 또 따라 들어가면 
    union
    {
        struct
        {
            float _11, _12, _13, _14;
            float _21, _22, _23, _24;
            float _31, _32, _33, _34;
            float _41, _42, _43, _44;
        };
        float m[4][4];
    };
이런 형태입니다. 여기서 union이 어떤 의미냐 하면 한땀한땀 만든 struct나 float 2차배열로 만든 것이나 데이터는 하나인데 접근하는 방식이 여러가지인겁니다.
union에서 정의된 크기가 다르면 크기가 큰걸 기준으로 잡히는데 지금은 둘다 float 16개 짜리라서 그렇지는않습니다. 행렬의 0,0에 접근하려고 하면 m[0][0]으로 접근 
할 수도 있고 아니면 _11로 접근 할 수도 있다는 겁니다. 그리고 XMFLOAT4X4의 기능을 보면 이것도 생각보다 기능이 많지 않습니다. 

대신 DirectX::SimpleMath::Matrix를 보면 기능이 많이 있습니다. 아까 없어서 아쉽다고 했던 Right, Up 그리고 Look은 없지만 Forward, Backword로 되어있습니다.
Translation도 잡혀있고 Transpose(전치행렬), Invert(역행렬) 그리고 Determinant도 구해주는거 볼 수 있습니다. 
그리고 Static Function이라고 해서 CreateTranslation, CreateScale, CreateRotationX,Y,Z 같은 함수들로 변환에 필요한 행렬들을 구할 수 있습니다.
그것 이외에도 온갖기능들이 있습니다. 이 기능들을 잘 사용하면 될것 같습니다.

한가지 아쉬운점이 있는데 이 DirectX::SimpleMath::Matrix는 Right-Handed cooordinate(오른손 좌표계)로 만들어져있어서 Look벡터의 역할을 할것 같던 Forward를 잘 
살펴보면 부호가 -로 되어있어 알고있던 Look벡터와 방향이 반대입니다. 이부분을 기억하고 조심해서 사용하면 됩니다. 정 마음에 안들면 고치면 되기도 합니다.

이번엔 DirectX::SimpleMath::Vector4를 보면 위와 비슷하게 XMFLOAT4라는 걸로 되어있는데 정말 x,y,z,w라고 float4개로 만들어져있는걸 확인할 수 있습니다.
그리고 역시 상속받은 Vector4도 이런저런 기능들이 포함되어있습니다. 예시로 Magnitude라고 소개했던 벡터의 크기가 있는데 이건 벡터의 각 성분들을 적절히 
피타고라스의 정리를 사용해서 구하는 것입니다. 여기서는 Length라는 함수로 표현되어있고 바로 밑에 LengthSquared라는 Length의 제곱을 구하는 부분이 있는데
단순 비교를 할때는 그냥 LengthSquared를 사용해도 됩니다. Length를 연산하면서 루트를 해야하는데 이 루트가 시간이 좀 걸리는 편이다 보니깐 꼭 필요하지 않는다면 이렇게 합니다.
그리고 Dot, Cross 함수도 있습니다. 벡터의 내적과 외적을 이렇게 표현한다고 배웠었습니다. 그리고 단위벡터를 구하는 Normalize함수 등등이 있습니다.

그래서 우리가 필요한 수학적 기능들이 다 들어있다는걸 알았습니다. 
이걸 적절히 조립해서 우리 코드에 사용하면 되겠습니다.


# Transform

처음으로 건드릴 코드는 Transform 부터 시작하게 됩니다.
여기서 S,R,T를 받아서 물체에 적용하는 부분을 만들겠습니다. 그러기 위해 우선 멤버 변수로 Vec3를 3개 만들어서 각각 _position,_rotaion,_scale이라고 이름을 지어 들고 있겠습니다.

- 시작하기전에-
시작하기전에 어떤 상황에 대한 예시를 한가지 더 들고 가야합니다. 
유니티엔진에서 어떤 물체 큐브를 만들었습니다. 이 큐브의 Transform Component중 Position을 (5,0,0)으로 변경했습니다 이 큐브를 큐브_5.0 이라고 하겠습니다..  
그리고 원점을 표시할 구 모양 물체를 (0,0,0)Position에 두겠습니다. 또 큐브하나를 생성해서 (10,0,0) Position에 배치했습니다 이 큐브를 큐브_10.0 이라고 하겠습니다
.여기까지 쉽습니다.
지금 상태는 원점에 구, 큐브_5.0, 큐브_10.0 이 옆으로 배치된 상태입니다.

그리고 유니티뿐만이 아닌 게임엔진들은 물체들을 상속시키는 기능이 있습니다. 이 상속기능을 사용해서 큐브_5.0에 큐브_10.0을 상속시켰습니다. 
겉보기에는 달라진게 없지만 이제 큐브_5.0이 이동하면 큐브_10.0도 같이 움직이고 회전하면 같이 회전합니다. 큐브_10.0의 Tranform 속성을 다시 보면 (10,0,0)이었던
Position이 (5,0,0)이 되어있습니다.
Transform이라는 Component가 World 좌표만을 기준삼고 있다면 위의 예시는 모순적입니다.
좌표가 왜 바뀌었냐면 위에서 말했듯이 큐브_5.0에 큐브_10.0을 상속시켰기 때문에 큐브_10.0은 큐브_5.0을 기준으로부터 (5,0,0)이라는 좌표를 가지게 된겁니다.

여기서 알 수 있는것은 Tranform의 Position, Rotation, Scale 같은 정보들은 월드 스페이스의 원점을 기준으로 하고 있는게아닌 바로 직속으로 상속된 오브젝트의 
로컬좌표를 기준으로 하고 최상위의 기준은 월드 좌표의 원점인것은 맞다는걸 알 수 있습니다.

먼저 시간에 배웠던 변환 순서인 Local -> World -> View -> Projection -> Screen 인데 실제 작업을 할 때 사실 물체간의 계층구조가 있다면 단계가 하나더 있다고 
생각해도 무방합니다.
자신의Local -> 부모의Local -> World -> View -> Projection -> Screen
그래서 코드로 구현을 할 때도 자기 위치부터 해서 Local이라는게 등장할 텐데 계층구조를 고려한 것이니 알고 있으면 되겠습니다.
- 

멤버변수 이름을 이렇게 바꿔주었습니다. 이 변수들은 parent물체를 기준으로 한 자신의 Tranform 정보들을 말하는겁니다.	
	Vec3 _localPosition = { };
	Vec3 _localRotation = { };
	Vec3 _localScale = {1.f, 1.f, 1.f};
스케일은 기본값이 1,1,1이라서 이렇게 초기화 해주었습니다.

또 들고 있을 변수들은 우선 부모 물체의 Transform을 weak_ptr로 들고 있을것이고 그 부모기준의 Local행렬을 임시 저장 하기위해 하나, 월드 변환을 할 행렬도 하나 들고 있겠습니다.
	Matrix _matLocal = { };
	Matrix _matWorld = { };

	weak_ptr<Transform> _parent;

추가할 함수로는 이렇게 두가지 있습니다.
	virtual void FinalUpdate() override;
	void PushData();

PushData는 이전에 있던 CONST_BUFFER~~~로 PushData하던 부분이고
FinalUpdate는 이전에 Tranform이 상속받은 Component의 4개의 기능 awake,start,update,lateupdate 에서 한가지 더 추가되는 부분입니다.FinalUpdate가 있어야 작업하기 쉬운데
그 이유는 awake,start,update,lateupdate는 MonoBehaviour라는 스크립트에서 활용하는 기능들입니다. 이 기능들을 재활용해서 사용하는게 아닌 엔진에서 모든 작업들이 끝나고 
진짜 마지막부분에 행렬과 관련된 부분이 하나 더 있으면 서로 곂치는 현상이 줄어들겁니다. 괜히 행렬연산을 LateUpdate에 넣어놨다가 순서가 꼬일수 있는데 그걸 그냥 
Final로 꺼내서 맨 마지막에 순서꼬이지않게 하도록 만든겁니다.
그래서 상위 클래스인 Component에 virtual 함수로 FinalUpdate를 만들어주고 다시 Tranform에서 override를 하였습니다.
GameObject클래스에도 FinalUpdate 함수를 추가해서 가지고 있는 컴포넌트들의 FinalUpdate를 실행시켜주어야 합니다.
void GameObject::FinalUpdate()
{
	for (shared_ptr<Component>& component : _components)
	{
		if (component)
			component->FinalUpdate();
	}
}
GameObject::LateUpdate 와 비슷하지만 script의 FinalUpdate하는 부분은 삭제하였습니다.
그리고 혹시 다른 클래스가 MonoBehaviour를 상속받아서 FinalUpdate를 override 할 수 있는데 이걸 막아주기 위해 
private:
	virtual void FinalUpdate() sealed { }
이렇게 막아 주었습니다. 이러면 FinalUpdate는 정말로 엔진에서 마지막 공정때 활용하는 목적이라고 못을 박았습니다.

GameObject와 Component들 뿐만 아니라 이것들을 관리하는 Scene클래스에도 마찬가지로 FinalUpdate함수를 만들어 주었습니다.
void Scene::FinalUpdate()
{
	for (const shared_ptr<GameObject>& gameObject : _gameObjects)
	{
		gameObject->FinalUpdate();
	}
}

다음으로 실제 FinalUpdate함수가 사용되는 곳이 어디냐면 SceneManager클래스의 Update함수 내에 LateUpdate가 실행되고 그 다음 순서로 FinalUpdate가 실행되도록 
입력해줍니다.
void SceneManager::Update()
{
	if (_activeScene == nullptr)
		return;

	_activeScene->Update();
	_activeScene->LateUpdate();
	_activeScene->FinalUpdate();
}

이렇게 FinalUpdate를 세팅하였고 구현부를 보겠습니다. 우선 온갖 헬퍼 함수들을 만들어줘야 합니다. 
public:
	// Parent 기준
	const Vec3& GetLocalPosition() { return _localPosition; }
	const Vec3& GetLocalRotation() { return _localRotation; }
	const Vec3& GetLocalScale() { return _localScale; }

	const Matrix& GetLocalToWorldMatrix() { return _matWorld; }
	const Vec3& GetWorldPosition() { return _matWorld.Translation(); }

	Vec3 GetRight() { return _matWorld.Right(); }
	Vec3 GetUp() { return _matWorld.Up(); }
	Vec3 GetLook() { return _matWorld.Backward(); }

	void SetLocalPosition(const Vec3& position) { _localPosition = position; }
	void SetLocalRotation(const Vec3& rotation) { _localRotation = rotation; }
	void SetLocalScale(const Vec3& scale) { _localScale = scale; }

public:
	void SetParent(shared_ptr<Transform> parent) { _parent = parent; }
	weak_ptr<Transform> GetParent() { return _parent; }

온갖 Get함수들 Set함수들이 있습니다. SetParent, SetLocalPosition, SetLocalRotation, SetLocalScale들은 
그냥 해당하는 변수들을 받은 인자로 초기화 하는 함수들입니다. 

공식 유니티 공식문서에서 Matirx의 Property 중 
localPosition, localRotation, localScale 의 의미는 월드의 원점을 기준으로한 성분들이 아니고 계층구조인 상위 물체를 기준으로한 성분들이라고 했습니다.
그런데 localToWorldMatirx 는 부모기준의 Transform 성분들이 아닌 물체 자체의 Local Space에서 World Space로 뛰어 넘기위한 행렬을 말합니다.
그러면 이런 Property 들을 _matWorld에서 추출하고 있는가 하면 코드에서 알아보겠습니다.

FinalUpdate 를 구현할 것인데 우선 _localPosition,_localRotation, _localScale 들이 이미 세팅이 되어있다는 가정이고, FinalUpdate에서는 World Matrix를 
만들어 줄겁니다. 월드 행렬같은 경우는 물체마다 제각각이라고 볼 수 있습니다. 게임수학시간에 배웠던 W,V,P 행렬들중 V와 P의 같은경우는 사실 카메라가 하나이고 고정이라는 
가정에서는 물체에 따라 변하지 않습니다. 그런데 W는 물체마다 제각각이기 때문에 각 물체의 Tranform Component 에서 계산을 해줘야 합니다.

FinalUpdate의 구현부는 이렇습니다.
void Transform::FinalUpdate()
{
	Matrix matScale = Matrix::CreateScale(_localScale);
	Matrix matRotation = Matrix::CreateRotationX(_localRotation.x);
	matRotation *= Matrix::CreateRotationY(_localRotation.y);
	matRotation *= Matrix::CreateRotationZ(_localRotation.z);
	Matrix matTranslation = Matrix::CreateTranslation(_localPosition);

	_matLocal = matScale * matRotation * matTranslation;
	_matWorld = _matLocal;

	shared_ptr<Transform> parent = GetParent().lock();
	if (parent != nullptr)
	{
		_matWorld *= parent->GetLocalToWorldMatrix();
	}

}
해석해보면 구현부 윗부분부터 함수 로컬에서 사용할 scale, rotation, translation 변환 행렬들을 물체의 Transform 성분들을 가지고 계산해 만들고 있습니다. 
그리고 _matLocal 변수에 S,R,T 순서로 곱연산을 해서 저장하고 있고 이것을 또 _matWorld 에 복사하고 있습니다. 왜 두번을 해주는지 다시 설명하면 
물체가 항상 월드 좌표계의 원점을 기준으로만 Transform을 가지고 있지 않다고 했습니다. 물체는 상위의 물체로 계층화 되어 있을 수 있기 때문에 _matLocal, _matWorld
두 변수로 저장해놓고 있고 만약 항상 월드 좌표계의 원점을 기준으로 하고 있다면 _matLocal 은 필요없이 SRT를 바로 _matWorld 에 저장하면 될겁니다. 
밑에서 이 물체가 부모가 있는지를 체크해주고 있는데 로컬 변수로 부모를 또 가져오고있고 if 부모가 nullptr이 아니면 현재 _matWorld에 부모이 _matLocal을 곱해줘서 
두번의 연산에 거쳐 실제 월드 스페이스로 변환을 해주고 있는겁니다.

SRT 변환행렬을 만드는 부분에서 생각해볼 점이 있는데 아까 SimpleMath를 가져와서 그 내용을 열어봤을때 오른손 좌표계를 기준으로 되어있었습니다. 이 오른손 좌표계가 나중에 
문제를 일으키면 그때 다시 살펴보도록 하고, 또 Rotaion 행렬 부분에서 x,y,z 하나씩 구하면서 합치고 있습니다. 그런데 사실은 이런 방법으로 하면 안되고 나중에 '쿼터니언'
이라고 하는 방법으로 바꿔줘야 합니다. 왜냐하면 지금의 방법에서는 아주 낮은 확율로 문제를 일으키는 경우가 있기 때문입니다.

다시 정리하면 _matLocal은 지금 이 물체의 Tranform 정보들을 부모 물체의 로컬 스페이스로 변환하는 SRT행렬이고, 만약 부모 물체가 없다면 _matLocal과 _matWorld는 같습니다. 
반대로 부모 물체가 있다면 _matWorld 행렬은 현재 물체가 부모물체의 로컬스페이스로 변환되는 _matLocal 변환을 하고 또 부모 물체의 _matLocal도 있을겁니다. 
부모 물체의 _matLocal 도 마찬가지로 쭉 올라가다보면 결국 월드 스페이스로 변환이 될것입니다. 

이런 내용을 알고 다시 아까 헬퍼 함수들을 보면 GetLocalToWorldMatrix 라는 함수는 현재 물체가 상속관계를 쭉 타고 올라가서 월드 변환행렬 자체를 가져올 수 있는 함수라는 의미
를 좀 더 잘 이해할 수 있고
비슷하게 GetWorldPosition 함수는 _matWorld.Traslation() 을 리턴하고 있는데 이 데이터를 그냥 따로 멤버 변수로 관리해서 Get 할 수도 있지만.
게임 수학 시간에 배웠듯이 변환행렬에서 Translation, Rotaion, Scale을 직접 추출해 낼 수 도 있었습니다. 이 Translation() 이 어떻게 구현되어 있는지 살펴보면
행렬의 _41, _42, _43 요소들을 추출해서 Vector3로 반환하고 있습니다. 행렬 배울때도 같은 원리로 Translation을 따로 추출하기도 하였습니다.
마찬가지로 GetRight(), GetUp(), GetLook() 함수들도 월드 변환 행렬에서 원하는 기저 벡터들을 추출하고 있습니다. 이 세 함수들은 const Vec3& 가 아닌 그냥 Vec3를 반환하고 
있는데 그 이유는 SimpleMath 자체에서 이 Property를 임시값을 반환하고 있어서 임시값을 참조할수는 없으니깐 복사방식으로 반환해주고 있습니다.
반면 _GetLocal 시리즈 함수들은 객체가 들고 있는 멤버 변수를 참조해서 반환합니다. 

어쨌든 결국 FinalUpdate 함수는 물체가 가진 Tranform 성분들을 가지고 _matLocal 과 _matWorld 를 계산하는 함수였습니다. 
_matLocal 은 사실 필요할 수도 있고 필요없을 수도 있는데 혹시 기능으로 부모 물체를 기준으로 Right,Up,Look이 필요하다거나 하면 사용이 될겁니다.

이제 PushData 함수를 구현해야하는데 일단은 
void Transform::PushData()
{
	// [W]VP
	//TODO

	CONST_BUFFER(CONSTANT_BUFFER_TYPE::TRANSFORM)->PushData(&_matWorld, sizeof(_matWorld));
}
이렇게 까지만 해놓을 겁니다. WVP 중 World 행렬만 구했고 나머지는 아직 구하지 못했기 때문에 그렇습니다. 

그런데 CONSTANT_BUFFER_TYPE::TRNSFORM 부분을 다시 생각해보니 SimpleMath::Matirx로 바꿔준 기억이 없습니다. 그냥 이전에 임시로 만들어놓은 구조체를 가리키고 있는데 
이걸 수정부터 해주겠습니다. 
어디부터 고쳐야 할지 코드들을 직접 찾기보단 Transform.h의 윗부분에서 임시로 TransformMatrix라는 struct를 만들어 놨었는데 이걸 지워 버리고 빌드를 해서 에러메세지를 타고 
어디서 사용되고있었는지를 찾아 보았습니다. 
찾아보니 Engine.cpp에서 CreateConstantBuffer 함수의 인자로 b0 레지스터슬롯, TransformMatrix 의 사이즈로 256개 만큼의 공간을 잡아놓은 부분에서 사용되고 있었습니다.
이걸 TransformParams 라는 구조체로 따로 관리를 해주겠습니다. 어디에서 관리할것이냐면 일단 EnginePch.h 에서 관리를 하는데
struct TransformParams
{
	Matrix matWVP;
};
이렇게 일단 Matrix 하나만 들고 있다고 할것이고 왜 EnginePch에서 관리하냐면 TransformParams를 카메라나 다른곳에서도 사용할 가능성이 있어서 공용 헤더에 위치했습니다.

그리고 default.hlsli 파일로 가서 b0 슬롯을 어떻게 쓸건지에 대한 부분을 조금 수정할건데 이 부분 이름부터 TEST_B0 였던걸 용도에 맞게 TRANSFORM_PARAMS로 고쳐주고 
사용할 데이터 타입도 row_major matrix matWVP; 라고 바꿔주었습니다. 
cbuffer TRANSFORM_PARAMS : register(b0)
{
    row_major matrix matWVP;
};
row_major matrix matWVP 는 어떻게 해석하면 되냐면 타입이 matrix인데 이름은 matWVP로 사용할 것이고 
row_major 부분은 어떤 의미냐면 DirectX에서 해석하는 matrix의 
해석 순서랑 쉐이더에서 해석하는 matrix의 해석순서가 다른데 row_major 라는 걸 붙여줘서 DirectX 기준으로 해석하도록 해준겁니다.
좀 더 자세히 설명하자면 DirectX에서 행렬을 해석할때는 row(행) 방향으로 11 -> 12 -> 13 순으로 읽어 나간다면 쉐이더는 column(열) 방향으로 11 -> 21 -> 31 순으로 
읽는게 기본인데 DirectX 기준으로 설정을 해주는 명령어? 입니다.
쉐이더 코드들 나머지도 수정해줄건데 이전에 베이가 그림의 좌표를 Matarial이 제대로 기능하는지 확인하는 코드가 있었는데 이걸 날려주었습니다. 그리고 쉐이더 파일을 처음 
작성할 때 Vecter3를 좌표값으로 삼고 마지막에 1.f 만 추가해서 그대로 출력을 했었는데 이 부분을 지금 생각하면 Local,World,View,Projection 변환 부분을 전부 
생략하고 모든 변환이 끝난 값처럼 사용하고 있던겁니다.
지금은 그렇게 하지않을것이고 matWVP를 가지고 변환을 해서 출력을 해줄 것이기 때문에 
output.pos = float4(input.pos, 1.f); 부분을  output.pos = mul(float4(input.pos, 1.f), matWVP); 이렇게 곱해주겠다고 바꿔 주었습니다.
(참고로 input.pos에서 마지막 1.f 부분은 행렬 곱을 해주면 방향 좌표 모두 구하고, 0.f 였다면 뱡향만 구하고 Translaiton 부분은 구하지 않는 겁니다.)



그리고 지금 나중에 핗요할 Engine.h 와 Camera.h 를 include
해주었습니다.

그런데 Camera 클래스는 아직 만들지 않았습니다. 오늘의 주제이기도 합니다. WVP중 World는 물체마다 각각 구해줘야하고 V,P는 카메라가 하나이고 고정이라면 변하지 않는다고 했는데
즉 카메라가 일단 있어야 한다는겁니다. Camera 를 만들어 주겠습니다.


# Camera

Camera 클래스도 Component로 활용할것이기 때문에 GameObject 필터 밑에 생성해주고 Component를 include, 상속해 줍니다. 
그리고 카메라의 투영법이 원근 투영법, 직교 투영법 두가지가 있다고 말 하기도 했는데 이걸 관리해주는 enum class를 만들어 줍니다.
enum class PROJECTION_TYPE
{
	PERSPECTIVE, // 원근 투영
	ORTHOGRAPHIC, // 직교 투영
};

카메라의 헤더를 작성할텐데 우선 카메라가 들고 있을 데이터는 위에서 말했던 어떤 투영 타입인지를 들고 있을겁니다.
그리고 카메라에서 필요한 데이터 near, far, fov(촬영각도), scale(이건 나중에 직교투영일때 사용합니다.) 
이 데이터를 가지고 카메라의 FinalUpdate 함수로 View 변환행렬과 Projection 변환행렬을 연산해 가지고 있을겁니다.
private:
	PROJECTION_TYPE _type = PROJECTION_TYPE::PERSPECTIVE;

	float _near = 1.f;
	float _far = 1000.f;
	float _fov = XM_PI / 4.f;
	float _scale = 1.f;

	Matrix _matView = {};
	Matrix _matProjection = {};
public:
	// TEMP
	static Matrix S_MatView;
	static Matrix S_MatProjection;

그런데 이 _matView와 _matProjection은 Transform::PushData 에서 WVP를 계산할때 필요한데 그렇다고 바로 전역으로 만들어 주는건 좋지 않습니다. 
왜냐면 카메라가 지금은 하나라서 전역으로 만들어도 문제가 없을 수 있지만 나중에는 카메라가 여러개가 될 수 있는데 그럴때 전역으로 각 카메라의 View,Projection 변환행렬을
관리하기가 힘듭니다. 그래서 어떤 처리를 통해 각 카메라의 _matView, _matProjection을 Trasform::PushData 로 건내 줄 수 있어야 하는데 
지금은 그것까지 구현하지는 않고 일단 static 변수를 하나더 만들어서 사용할겁니다.

다음으로 카메라의 기능, 함수를 선언하겠습니다. 
public:
	Camera();
	virtual ~Camera();

	virtual void FinalUpdate() override;
	void Render();
의미는 구현부에서 다루겠습니다.

구현부 Camera.cpp 에서는 우선 include들을 해줄겁니다. 기본 include인 pch,Camera 말고 
#include "Transform.h"
#include "Scene.h"
#include "SceneManager.h"
#include "GameObject.h"
#include "MeshRenderer.h"
#include "Engine.h"
이렇게 추가로 include해주었습니다.

그리고 밑으로 static 변수들을 구현해줄건데요 헤더에서는 등장 할거라고 선언만한거고 cpp에서 실제 구현을 해줘야 합니다.
Matrix Camera::S_MatView;
Matrix Camera::S_MatProjection;

다음은 생성자와 소멸자입니다. 카메라도 component로 사용될것 인데 component type을 생성자에서 지정해줘야 합니다.
Camera::Camera() : Component(COMPONENT_TYPE::CAMERA)
{
}

Camera::~Camera()
{
}
그런데 Compnent.h 에 enum class COMPONENT_TYPE에 아직 Camera가 없는데 추가해주었습니다.

다음으로 행렬을 계산하는 부분인 FinalUpdate 함수입니다. 
void Camera::FinalUpdate()
{
	_matView = GetTransform()->GetLocalToWorldMatrix().Invert();

	float width = static_cast<float>(GEngine->GetWindow().width);
	float height = static_cast<float>(GEngine->GetWindow().height);

	if (_type == PROJECTION_TYPE::PERSPECTIVE)
		_matProjection = ::XMMatrixPerspectiveFovLH(_fov, width / height, _near, _far);
	else
		_matProjection = ::XMMatrixOrthographicLH(width * _scale, height * _scale, _near, _far);

	S_MatView = _matView;
	S_MatProjection = _matProjection;
}
해석해보면 _matView 부터 채워주고 있는걸 볼 수 있습니다. Component의 함수인 GetTransform() 으로 이 오브젝트가 들고 있을 Transform을 가져오고 그 Transform의 
월드행렬의 .Invert() (역행렬) 를 _matView에 저장하고 있습니다. 왜 뜬금없이 월드행렬의 역행렬을 저장하는지는 게임수학 시간에 배웠습니다. 
카메라가 월드에 배치되는 월드 행렬에서 카메라 기준으로 다른 월드를 바라보는것은 월드 행렬의 역행렬이라고 봐도 된다고 배웠습니다. 그런 원리로 _matView를 손쉽게 
구해줬습니다.
다음으로 계산해줄 _matProjection 투영 변환입니다. 이 계산을 하기위해서는 Viewport의 width와 height의 비율인 ratio가 필요했는데 이걸 Engine의 GetWindow() 로 
가져오고 있지만 아직 만들어 주지 않은 기능입니다. 
Engine.h 로 가서 엔진이 가지고 있는 WindowInfo를 const 참조로 반환하는 함수를 만들어 줬습니다.
	const WindowInfo& GetWindow() { return _window; }
이렇게 가져온 Window 정보를 가지고 Projection 변환 행렬을 만들건데 PROJECTION_TYPE에 따라 변환 행렬을 구하는 방법이 다릅니다. 
우리가 게임수학에서 배웠던 Projection 변환행렬 구하는 방법은 PERSPECTIVE(원근 투영) 일때의 방법입니다. 필요했던 정보들 fov, ratio, near, far를 인자로 
넣어주면 알아서 계산해주는 함수::XMMatrixPerspectiveFovLH 를 사용했고 이 함수는 기본적인 DirectX 함수를 사용했는데 SimpleMath의 Projection 변환행렬


