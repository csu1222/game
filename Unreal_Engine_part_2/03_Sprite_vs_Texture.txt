


        Sprite vs Texture


현재 언리얼의 상태는 조명이 없기때문에 컴컴한 상태입니다. 그래서 조명과 배경을 깔아보겠습니다. 
인터넷에서 적당한 배경을 가져오던지 아니면 강의의 학습자료 이미지를 다운받고 다운받은 폴더를 엽니다. 
언리얼 엔진에 이 이미지 파일을 적용하는것은 굉장히 쉬운데 다운 폴더에서 드래그 드롬으로 언리얼 컨텐츠 브라우저 창에 놓거나 아니면 
컨텐츠 브라우저 우클릭후 윗쪽에 보면 프로젝트에 임포트 하기가 있습니다. 여기서 이미지가 있는 경로로 가 추가해주면됩니다. 

이미지 파일을 그냥 덩그라니 둬도 되지만 구조화를 하기 위해 따로 모아둘 폴더를 만들어도 좋습니다. 

이번에 추가한 이미지를 png 파일로 받았습니다. 
png 파일을 가져오고 커서를 가져다 대면 설명에 텍스쳐라고 되어있습니다. 
이 텍스쳐는 화면에 드래그 드롭을 하려고 해도 불가능하다고 커서가 엑스표가 됩니다. 

이제 Texture와 Sprite의 차이에 대해 알아보겠습니다. 

일단 껌껌한 맵에 큐브오브젝트 하나를 배치해보겠습니다. 
물테를 클릭하면 윤곽선은보이지만 실제로는 껌껌해서 안보입니다. 왼쪽 라이팅항목에서 포인트 라이트라고 전구같은 역할을합니다.

이제 큐브의 형태가 보이는데 처음에는 텅빈 텍스쳐파서 하얗게만 보이지만 아까 받은 png 파일을 큐브에 드래그 드롭하면 큐브의 각 면에 png 파일의 이미지가 씌워집니다. 
그 동시에 png 파일이 있는 폴더안에 Mat 라는 이름이 Material 재질이라는 파일이 만들어집니다. 

나중에 3D게임을 만들때 어떤 매쉬라는용어로 표현하는데 플레이어 캐릭터가 있다고했을때 이걸 단계별로 보면 처음에 큐브 오브젝트처럼 형태를 가지게 됩니다. 이걸 메쉬라고 하고 
모델러 직종분들이 조각을 만들듯 메쉬를 만들어주신다음 텍스쳐라고 불리는 이미지 파일을 붙혀서 색을 입힙니다. 이렇게 완성된 3D물체가 만들어집니다. 

이번시간에는 텍스쳐를 활용하진 안을것이기 때문에 잠시 알아봤던 포인트라이트와 큐브를 삭제해줍니다. 

그러면 2D게임을 만들기 위해 뭘해야하느냐 이미지 파일을 게임세상에 배치하고 싶은데 언리얼에서는 이런 기능들이 다 준비되어있다고했습니다. 
이미지 파일을 우클릭한 다음 스프라이트 액션 -> 페이퍼 2D 텍스쳐 세팅 적용 을 클릭합니다. 이것은 이 이미지 파일을 일반적인 3D 용 텍스쳐가 아닌 페이퍼 2D 용으로 사용하겠다고 
설정들을 바꿔준겁니다. 다시 이미지 파일 우클릭 -> 스프라이트 액션 -> 스프라이트 생성을 클릭해주면 새 파일이 생성되는데 
이미지 파일명 뒤에 _Sprite 가 붙는 파일이 생기고 각각 커서를 가져다 대면 원본은 텍스쳐이고 새로 생성한것은 스프라이트라고 나옵니다. 

이 스프라이트가 2D에서사용하는 리소스라고 볼 수 있습니다. 둘 다 아트 리소스, png 를 의미하는것은 맞지만 사용용도가 구별된것입니다. 
스프라이트는 이제 게임 세상에 드래그 드롭으로 배치할 수 있습니다. 

이쯤에서 다시 상기해야할 것은 언리얼엔진은 상속기반의 엔진이라는것입니다. 스프라이트 를 맵에 드래그 드롭하면 우리가 그냥 스프라이트를 만든것 처럼 보이지만 아웃라이너를 보면 
스프라이터의 타입이 PaperSpriteActor 라고 되어있습니다. 엑터이긴한데 스프라이트를 출력하기 위한 용도인것입니다. 
이전에 해봤던 블루프린트 클래스를 만드는 창에서 PaperSpriteActor를 찾아보면 오브젝트를 상속받은 액터 그리고 또 액터를 상속받은 PaperSpriteActor 라는 상속관계로 되어있는걸 볼 수 있습니다.

팁으로 배치한 스프라이트를 원점에 위치하고 싶다면 디테일중 로케이션 오른쪽 화살표를 누르면 원점에 배치가 된다고 합니다.
이렇게 배치한 맵을 쭉 줌인해서 게임이 진행될겁니다. 만약 슈퍼마리오와 같이 벨트 스크롤 게임이라면 스프라이트가 좌우로 더욱 길게 늘어서고 게임 진행에 맞춰 카메라가 따라 움직이는 방식일겁니다. 

여기서 눈여겨 볼만한 부분은 언리얼 엔진이나 유니티 엔진이나 사실 3D 게임용 엔진이라는 것입니다. 3D 엔진상에서 2D 게임을 만들다보면 사실 개발과정에서 카메라를 움직여보면 
스프라이트가 평면이긴하지만 카메라는 3D상에서 움직이다 보니 별로 다를게 없어보입니다. 
결국 3D엔진에서 2D 게임을 만든다는것은 특별한게 아니라 3D 게임 세상에서 평면만 사용해 만들고 카메라를 가까이 대서 진행하면 그게 결국 2D 게임이라고 할 수 있습니다. 

막연하게 게임을 만들고 싶다고할때 2D게임을 만들겠다 3D 게임을 만들겠다 정하고 배우는 경우도 있을수 있는데 어짜피 같은 엔진은 다루는거다 보니 표현의 차이가 있지 비슷하다는것입니다. 

그리고 이제 카메라가 마음대로 왔다 갔다 하지만 나중엔 플레이어캐릭터를 따라 다니게 될겁니다. 
언리얼 엔진이 조금 까다로운게 아직 따로 카메라를 배치 하지 않았지만 게임을 스타트 하게 되면 마치 FPS 게임 하듯이 움직일수 있고 오른쪽 아웃라이너에 카메라 액터라는 객체가 자동으로 추가되어있는걸 
볼 수 있습니다. 나중에 카메라를 고정시킬것이니까 지금은 그냥 넘어가줍니다. 

그리고 컨텐츠브라우저에 이미지 리소스들에 별표가 붙어 있는데 이건 아직 저장이 안되어있다는 표시입니다.

또 스프라이트에 이미지가 잘 뜨고 있는건 좋은데 너무 뽀얗습니다. 이건 3D엔진이다 보니 이미지 그대로 보여주는게 아닌 이런저런 조명과 관련된 연산한 후의 모습을 출력해주고 있는겁니다. 
이게 마음에 안들면 없앨수 있는 방법이 있긴합니다. 왼쪽 액터 배치란에서 비주얼 이펙트 -> 포스트 프로세스 볼륨이라는걸 꺼내옵니다. 위치는 상관엇으니 원점에 위치하고 이게 한마디로 
후처리와 관련된 객체입니다. 

포스트 프로세스 볼륨의 디테일중 Bloom옵션중 강도, Intensity 를 0으로 설정하면 뿌연것을 없애줄 수 있습니다. 실제로 해보면 아직도 뽀얀상태인데 왜그러냐면 
볼륨의 영역내에서만 적용되고 있는 중이라서 그렇습니다. 범위을 게임 월드 전체로 하고싶다면 옵션검색으로 무한규모(언바운드) 옵션을 체크해줍니다. 

거꾸로 이런저런 특수효과를 주고싶다면 옵션을 건드려주면 될겁니다. 

일단 이미지를 띄우고 스프라이트와 텍스쳐에 대해 알아보았고 다음시간에는 본격적으로 스프라이트를 확장시켜서 플레이어나 몬스터같은경우는 행동을하는 애니메이션이 있어야 할텐데 그럴땐 어떻게 해야할지 알아보겠습니다. 