


    매크로 


이전시간에 키보드 매핑을 하면서 반환값이 1.0 혹은 0 혹은 -1.0 이 반환되는걸 체크해 상하 좌우 움직임을 감지했었는데 
이 체크하는 코드가 비교연산, 브랜치가 두번씩 들어갔었습니다. 이 부분을 사실 더 깔끔하게 관리할 수 있습니다. 
Compare Float 라는 기능입니다. Compare비교를 Float타입끼리 해주겠다는 것입니다. 
하나의 노드에서 입력값과 비교할 값을 주면  두 값이 같은지 아니면 입력값이 큰지 작은지를 분기해주는 기능입니다. 

그냥 코딩하는것보다 우월한 기능입니다. 그러면 매크로가 무엇이냐 하면 지금 사용한 Compare Float 노드를 잘 보면 앞에 M이 붙어 있는데 이게 매크로라는 의미입니다. 

매크로란 무엇인가하면 함수와 유사하게 기능하지만 내부 동작이 좀 다릅니다. 
만드는 방법부터 실습을 해보자면 블루프린트 창 왼쪽에서 매크로 란에 +를 누르면 매크로를 추가한겁니다. 매우 간단한데 추가한 매크로를 더블클릭해 열어보면 함수가 그렇듯 인풋과 아웃풋을 
받고 있는걸 알 수 있습니다. 함수와 조금 다른점은 인풋 아웃풋의 타입으로 Exec 실행 타입을 고를 수 있습니다. 
벌써 함수와 다른점을 하나 찾았고 더 근본적으로 실행 관점에서 보면 함수나 매크로나 기능을 만들어 준다는것은 똑같은데 
먼저 함수를 만든다고 했을때 그 구현부의 코드는 메모리 어딘가에 저장되어서 이 함수가 호출될때 그 주소로 가 코드를 실행한다음 함수가 끝나면다시 원래 자리로 돌아오는 식으로 동작합니다.
하지만 매크로란 것은 사실 우리가 보기 편하도록 묶어 놓은 애들이지 게임 실행 시에는 매크로의 코드들이 각 매크로를 호출하는 곳마다 복사 붙여넣기 된다는 차이가 있습니다. 
그래서 아무리 매크로를 하나 만들었다고 해도 이 매크로를 열군데에서 사용한다고 치면 열개의 매크로를 사용하는 메모리를 차지하게 됩니다. 이건 성능적인 차이입니다. 

이것 말도 또 다른 점은 함수는 한번 호출되면 함수가 끝날때 까지 쭉 실행이 됩니다.
반면 이벤트는 그와 다르다고 했었습니다. 이벤트에 한번 들어온 다음 이어진 코드들을 쭉 실행해야 되는게 아니라 중간에 쉬다 갈 수도 있습니다. 그래서 언제 끝날지 예측할수 없다는 점이 있습니다. 

예를 들어서 InputAxis MoveUp 이벤트와 Compare Float 사이에 Delay 함수를 넣어서 2초 지연시킨다고하면 잘 동작할겁니다. 
거기에 이 Delay 까지 묶어서 매크로를 만든다고 해도 잘 동작합니다. 왜냐면 사실 매크로는 함수처럼 묶여있는것 처럼 보이지만 사실은 코드뭉치가 복사 되어있는 상태이기 때문에 이벤트에 연결된 것과 
다름이 없습니다. 

그래서 매크로와 함수의 가장 큰 차이는 매크로는 코드 복사 붙여넣기에 불과 하다는 것입니다. 위에서 말했던 것 처럼 중간에 딜레이를 할 수 있는 게 장점일 수 있고 단점은 호출할때마다 메모리를 차지한다는것
등이 있습니다. 

좀 더 자세히 알아보고 싶으면 역시 공식문서를 살펴보면 되는데 함수 와 매크로의 차이를 알아보는 공식문서가 있습니다. 
공식 문서에서는 위에서 말한것 외에 한가지 더 차이를 설명합니다. 블루프린트 클래스의 상속구조에서 함수는 자식 클래스에서 필요에 따라 다시 재정의를 해 사용할 수 있지만 매크로는 그런 개념이 아니라 
재정의가 불가능 한 점이 언급되었습니다. 

대부분의 경우에는 함수를 만들어 관리하는게 편하지만 일정 부분에서 는 매크로를 사용해야 하는 경우도 있다고 이해하면 되겠습니다. 

매크로와 함수의 차이때문에 매크로는 간단간단한 코드만 사용하는게 좋습니다. 대부분의 경우는 함수를 사용하는게 좋겠습니다. 