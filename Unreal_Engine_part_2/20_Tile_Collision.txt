

    타일 충돌 


이전시간까지 그냥 이미지를 맵으로사용하는 일명 통맵에서 타일 세트를 활용하는 타일맵을 적용시켜보았고 또 겸사 겸사 카메라의 시점을 Perspective에서 Orthographic으로 바꿔 봤습니다. 

이번시간에는 맵의 충돌을 도입해볼겁니다. 왜 이런게 필요하냐면 기왕 맵을 만들었는데 맵의 벽을 무시하고 캐릭터들이 움직일수 있는게 이상하기 때문입니다.

어떻게 시작해야 할까요 물론 이전에 배운 내용에서는 직접 블로킹 볼륨을 벽을 따라 배치해서 갈수 없는 영역을 지정할수도 있겠지만 이것은 하드코딩이라고 할 수 있고 
당연히 훨씬 더 효율적인 방법이 있습니다. 타일셋을 만들때 애당초 Collision을 설정할 수 있는 부분이 있습니다. 

이전시간에 만들었던 tiles_TileSet 파일을 열어보겠습니다. 
현재 사용하는 5칸의 타일이 을 각각 클릭해 선택하면 오른쪽에 한 타일만 따로 때서 볼 수도 있는 상태입니다. 이런 타일셋 화면에서 위쪽에 보면 Colliding Tiles 콜리전이 있는 타일 이라고 하는 버튼이 있습니다. 
충돌이 붙은 타일은 따로 초록색이 붙여서 표시될겁니다. 지금은 아무 타일에도 충돌을 적용하지 않아서 티가 안납니다. 

충돌을 적용시킬때는 오른쪽에 박스 추가, 폴리곤 추가, 원추가 기능으로 충돌을 추가할 수 있습니다.
가장 기본적인것은 박스추가 일겁니다. 하지만 일부러 다른것 부터 실습해보겠습니다. 
먼저 원 추가 입니다. 원 추가를 누르면 오른쪽 싱글 타일 에디터 창에 원형 선이 추가됩니다. 이상태에서 콜리전이 있는 타일 버튼을 눌러보면 원을 추가한 타일의 색이 달라져 있습니다. 
하지만 원을 추가했다고 원형으로 색이 달라지는게 아니라 타일 전체가 색이 바뀝니다. 원은 선택한 상태에서 딜리트를 하면 삭제할 수 있습니다.
다음으로 폴리곤 추가도 점을 추가하면서 점사이의 공간을 충돌공간으로 잡습니다.
마지막으로 진짜 우리가 사용할 가장 기본이 되는 박스 추가입니다. 타일을 딱 감싸는 모양을 적용할 수 있습니다. 박스 추가를 하고 저장해주면 이제 
이전에 만든 맵중 이 콜리전을 추가한 타일은 충돌이 됩니다. 

바로 실습을 하기전에 TileMap을 열어보겠습니다. 타일맵의 디테일중 내리다 보면 충돌과 관련된 부분은 Collision 부문으로 가면되고 그중에서도 Collision Thickness 콜리전 두께를 설정할 수 있습니다. 
이름에서도 알 수 있게 충돌체의 두깨인데 이 값을 극단적으로 200정도로 설정하고 DevMap으로 돌아가보겠습니다. 그냥 봤을때는 콜리전 두깨가 어떤 차이인지 모르겠지만 표시라는 버튼을 눌러 콜리전도 보이게끔 
설정하면 콜리전의 두께가 보입니다. 많이 뚜껍게 설정되어있는데 이 상태에서 정상적으로 게임이 동작하기는 어려워보입니다. 
그리고 또한가지 이상한점은 벽 타일 뿐만아니라 바닥 타일도 충돌범위가 설정되어 있는걸 볼 수 있습니다. 이건 우리가 의도한바가 아니기 때문에 다시 타일맵을 열어보겠습니다. 
우리가 처음에 레이어를 실습할때 Wall 이라는 레이어는 맵의 모든 타일을 덮고 있게 했고 그 위에 Ground 레이어를 깔아서 바닥을 표현했습니다. 그러니까 사실 모든 타일이 벽타일이 하나씩은 있는것입니다. 
이것을 수정해볼건데 Ground와 Wall 이어를 다 보이게 한 다음 선택은 Wall을 선택후 Ground 타일이 보이는 곳을 지워줍니다. 
이제 아까 설정했던 콜리전 두께 옵션값을 한 50정도로 해두겠습니다. 

게임을 실행해보면 의도한대로 Wall 타일은 이제 이동할수 없게 수정되었습니다. 하지만 캐릭터들이 맵에서 좁은 길목을 지나가려면 낑겨서 못지나가는걸 볼 수 있는데 
그 이유는 캐릭터들이 처음 만들어질때 캡슐모양의 Collider 를 지니고 있는데 이게 타일의 크기보다 커서 그렇습니다. 이걸 해결하려면 벽 타일의 Collider를 더 작게 만들던가 아니면 
캐릭터의 Collider를 작게 만들어야합니다. 

우리는 BP_Creature의 Collider를 줄이는 방법을 사용해보겠습니다. BP_Creature를 열고 뷰포트창으로 가보겠습니다. 컴포넌트중 캡슐 컴포넌트의 디테일을 보면 
캡슐 절반 높이와 캡슐 반경이 우리가 찾틑 캡슐 크기와 관련있습니다. 캡슐 절반 높이를 50정도로 줄여서 다시 테스트 해보겠습니다. 
이러면 이제 게임을 실행했을때 좁은 길목도 캐릭터들이 잘 지나다니는걸 볼 수 있습니다. 그런데 맵 모퉁이를 돌때 원형을 그리면서 미끄러지는것 도 마찬가지로 Collider가 캡슐모양이기 때문입니다. 
그러면 이 캡슐 컴포넌트를 지우고 사각형 콜라이더를 사용하면 되지 않을까 싶어서 캡슐 컴포넌트를 지워 보려니 지울수가 없습니다. 왜냐면 애당초 캐릭터라는 부모 클래스가 이 캡슐 컴포넌트를 포함해 딸려오는 
클래스이다 보니 교체 할 수가 없습니다. 

우리가 할 수 있는 방법은 여러가지가 있는데 애당초 Paper2D Character 를 상속받지 않고 Pawn 에서 부터 어떤 콜리전을 사용할지 따로 고른다음 상속, 상속 하는 식으로 교체 할 수는 있는데 
그렇게 까지는 너무 번거로우니 그냥 캡슐 컴포넌트를 사용하겠습니다. 

이렇게 해서 나름 먼길을 달려왔습니다. 횡 방식의 통맵에서 상하좌우 이동을 할수 있게 하고 타일맵도 깔아서 탑뷰 2D 게임으로 만들기도 했습니다. 
여기까지 어느정도 구현되었다 하면 이제 사람들이 포트폴리오로 많이 만드는 크레이지 아케이드도 충분히 만들 수 있지 않을까 생각합니다. 물론 설정을 충분히 하지 않아서 
어색한 부분들이 없잖아 있지만 이건 설정에 따라 바뀌는 것입니다. 그래도 아직 알아봐야할게 남았는데 맵에 대한 정보를 추출할 수 있는 방법도 필요할겁니다. 

다음으로 실습할것은 우리가 이동을 할때 소수점 단위로 미세하게 이동하고 있습니다. 이런 게임도 있을텐데 경우에 따라 옛날 고전게임들은 한 칸 단위로 움직이게끔 되어있는경우도 있습니다 
칸 단위로 가게끔하려면 어떻게 해야하는지 결국은 그려준 맵의 정보를 어떻게든 추출해서 내가 갈 수 있는 영역인지를 판별해 이동할수 있는지 없는지를 알아야하겠습니다.
오늘 했던 언리얼에서 제공하는 콜라이더를 사용한 벽을 구현하는게 아니라 맵의 정보를 추출해서 그 정보를 기반으로 판별해 벽을 구현하는 것도 가능합니다. 

미세하게 움직일수 있는게임도 있고 칸단위로 움직일수도 있는것이고 2D 3D 라는 분류도 있는데 무엇이 더 우월하다기 보다는 이런 저런 기법들을 조금이라도 훑어보는 식으로 배우고 있습니다. 
