


    몬스터 스폰


이제 몬스터 스폰에 대한 내용을 알아볼겁니다. 기존 몬스터 배치는 월드맵에 직접 드래그 드롭으로 배치하고 있었는데 
이런식으로 배치하는 게임이 아예 없지는 않겠지만 보통 몬스터는 게임 로직에서 알아서 배치해줄겁니다. 
거기에 더불어 몬스터와 플레이어가 겹치지 않도록 처리도 해줄겁니다. 

그래서 이번 시간에는 BP_TileMap 클래스 내부에서 몬스터를 스폰하는 기능을 만들어 보겠습니다. 
가장 시급한 기능은 맵의 비어있는 칸을 랜덤하게 찾는 기능이 필요할겁니다.

BP_TileMap에 함수를 추가합니다. 이름은 GetRandomEmptyGridPos 라고 합니다. 함수 이름이 길어졌는데 그 기능을 알아볼수 있도록 했습니다. 
이제 이 함수를 어떻게 만들어 줄지 생각해보겠습니다. 랜덤한 빈 타일을 가져오는것도 당연히 여러가지 방법이 있을 수 있는데 맵의 X좌표의 범위 그리고 Y좌표의 범위를 
랜덤으로 추출하고 그렇게 만든 랜덤 좌표가 이동할 수 있는 타일인지를 체크하는걸 반복하는 방법이 있겠고
나중에 맵이 커지면 이것은 좀 비효율적일 수 있으니 그때 그때 맵에서 배치가능한 타일을 어떤 배열같은데 모아서 관리하다가 이중에 랜덤으로 꺼내서 사용하는 방법도 있을겁니다. 

이중에서 좌표를 랜덤을 뽑아 유효체크를 하는 식으로 만들어 보겠습니다. 
먼저 좌표를 뽑는데 유효한 좌표가 뽑힐때 까지 반복해야 하니까 For Loop with Break를 사용하겠습니다. 루프 횟수는 한 1000번으로 해보겠습니다 아마 1000번 이내로는 가능할것입니다. 
이어서 랜덤한 숫자를 구해줘야하는데 Random Integer in Range 라는 함수가 있습니다. 일정 범위 내의 랜덤한 정수를 뱉어줍니다. 
범위는 이전에 BP_TileMap에서 GridPosToIndex 함수에서 사용하려고 변수화 한 MapWidth, MapHeight 를 범위로 정해주면 됩니다. 대신 맵의 좌표는 너비, 높이에서 1씩 빼준 값을 넘겨줘야합니다. 

그리고 랜덤으로 추출하고 이동 할 수도 있는 좌표를 구했으면 그 좌표를 반환해줘야 하니 함수 반환 값으로 GridPos 구조체로 뱉어 주겠습니다. 
이 반환값을 반환할때 한번 저장해야하는데 꼭 멤버 변수로 관리하기보다는 이 함수내에서만 변수가 유지 되면 될것이니까 로컬변수로 저장해주겠습니다. RandomPos 라는이름이고 EGridPos 타입으로 로컬변수를 만듭니다. 

RandomPos에 위에서 구한 랜덤 x, y 값을 넣어주겠습니다. 
이제 이 것이 캐릭터가 갈 수 있는 영역인지를 판별해줄 차례인데 이것은 이미 함수를 만들어 놨었습니다. CanGo 라는 함수였는데 이걸 이용해 보겠습니다. 
CanGo의 결과를 브랜치에 연결래서 True라고 하면 성공적으로 랜덤 좌표를 뽑은 것이니 For Loop With Break 의 Break 쪽으로 연결해주고 Completed를 반환 노드에 연결합니다. 

여기까지해서 우리가 맵의 랜덤하고 캐릭터를 배치 가능한 곳을 찾을 수 있게 되었습니다. 
랜덤 좌표를 구한 다음 뭘해야 하는지를 알아 보기 위 이벤트 그래프로 가보겠습니다. 

이벤트 그래프에서는 BeginPlay 이벤트에서 각 좌표를 1차원 불리언 배열로 갈수 있는지 없는지를 만들어 주고 있는데 
시퀀스를 사용해 0번 에서 MapGrid의 크기를 Resize 해주고 1번 시퀀스에서 맵의 각 타일을 순회해  벽 타일인지 바닥 타일인지를 추출해 MapGrid의 내용을 채워줬습니다. 
이어서 2번 시퀀스를 추가해 여기서 몬스터를 스폰하도록 해주려고 합니다. 

그런데 몬스터를 스폰하는 코드를 BeginPlay에 작성하기는 지저분하기 때문에 또 함수하나를 만들어 주겠습니다. SpawnCreature 이름으로 만들겠습니다. 
입력은 BP_Creature 를 받아줄건데 지금까지 당연하게 오브젝트 레퍼런스로 받아주고 있던걸 이번에는 클래스 레퍼런스로 받아주도록 하겠습니다 
이게 무슨 말이냐면 잠시 저장하고 이벤트 그래프에서 SpawnCreature을 호출하면 클래스를 골라주는 노드가 나오는데 이전에 사용했던 Get Actor Of Class 같은 선택창입니다. 
다시 SpawnCreature 함수내로 와서 GetRandomEmptyGridPos 함수를 호출해줄건데 사싱 이 랜덤 노드를 만들어주는 함수도 기존 데이터를 수정하거나하지는 않기 때문에 퓨어 함수로 만들어 주겠습니다. 

GetRandomEmptyGridPos 로 생성한 랜덤 좌표를 또 월드 기준 좌표로 수정하고 싶습니다. 이것도 이미 만들어 놨던 GetTilePos 함수로 변환할 수 있습니다. 
그러면 이 좌표가 유효한지와 변환한 벡터 값을 반환합니다. 좌표가 유효하다면 Spawn Actor From Class 노드로 크리쳐를 스폰해줄겁니다. 
입력 노드에서 어떤 클래스의 액터를 스폰할건지 골라줄 수 있는데 이 클래스는 입력때 받아준걸로 만들어 줍니다. 

또 Spawn Actor From Class 노드는 이전 파트1에서 사용해 봤는데 스폰 트랜스 폼을 연결해주지 않으면 컴파일이 통과 되지 않았었습니다. 
입력받는 트랜스폼 핀을 분할하면 Location, Rotation, Scale을 받고 있는데 이 중에 Rotation, Scale 은 안건드려도 될것 같고 Location을 GetTilePos로 변환한 값을 연결해주면 될것입니다. 
바로 넘겨주지 않고 핀들을 분할해 보겠습니다. 

이때 주의해야할것은 우리의 xy 좌표가 월드 좌표계에서 x축과 z축의 값이었습니다. y 축은 깊이를 뜻하고 있었는데 그래서 평소에 y값은 건드리지 않는게 좋을것입니다. 
또 TileMap 을 만들때 Wall 레이어와 Ground 레이어 사이에 4라는 틈을 주고 만들었는데 플레이어나 몬스터가 이 맵 뒤에 파뭍혀서 안보이게 되는걸 방지하기 위해 이 SpawnCreature에서 스폰될 
y값을 500정도를 줘버리겠습니다. 물론 이것도 나중에는 이렇게 하드코딩하는게 아니라 변수로 관리해주는게 좋을겁니다. 
랜덤좌표값은 x와 z에만 연결해주겠습니다. 

그런데 크리쳐를 스폰할때 TilePos만 가지고 만들어지더라도 이후 만들었던 여러 데이터들 GridPos나 DestLocation 같은 변수들도 정상적으로 값이 채워져 있어야 잘 동작하기 때문에 
여기서 그냥 끝내지 말고 무언가를 다시 해줘야합니다. Spawn Actor라는 노드는 지정한 Transform 에 지정한 Class 라는 도면대로 액터를 배치해주는 것까지 해줍니다. 
그러니까 이어서 만든 액터의 SetDestination 을 호출해주면 GridPos와 DestLocation을 같이 채워주게됩니다. 하면서 GridX와 GridY를 같이 채워주고 ForceMove 플래그 까지 켜주면 곧바로 생성이 될겁니다. 

그러면 크리쳐를 랜덤하게 배치하고 GridPos, DestLocation 를 채워 주는것까지 만들었으니 다시 BP_TileMap 이벤트 그래프로 돌아가 2번 시퀀스에 SpawnCreature 를 호출하는 테스트를 해보겠습니다. 
만들어줄 클래스를 BP_Skeleton으로 해주면 맵의 랜덤 위치에 해골을 만들어 주게 될겁니다. 이걸 두개 연달아 만들어 두마리를 배치해보겠습니다. 

그러면 배치하기는 했는데 이상하게 맵에 파묻혀서 보이지 않습니다. 왜 이런 버그가 발생했는지 돌아가 살펴보면 
BP_Creature 클래스에서 SetDestination 함수에서  GetTilePos 로 변환한 벡터를 그대로 GridPos와 DestLocation에 세팅해주고 있습니다. 그런데 이 타일 포지션이라는것은 말 그대로 타일의 포지션이기 때문에 
배치한 타일과 해골이 곂쳐서 제대로 화면에 나오질 않는것입니다. 게임을 실행할때마다 스켈레톤이 잘 출력될 수도 있고 아닐수도 있는 상태인데 
잠시 게임실행중 F8을 누르고 아웃라이너에서 해골 오브젝트의 디테일을보면 실제로  y값이 0임을 알 수 있습니다. 

어떻게 수정해줘야 하냐면 알아봤듯이 BP_Creature 쪽으로 돌아가 SetDestination 함수를 보겠습니다. 여기서 GetTilePos의 결과물 벡터를 핀 분할해서 DestLocation에 넘겨줘야합니다. 
y값은 원래 자신의 y 값을 넣어줘야하는데 Get Actor Location을 핀분할 해 y를 넘겨주고 x,z값은 GetTilePos를 핀분할해서 넘겨주겠습니다.
그리고 PlayerStart 같은경우도 통일성을 위해 y 좌표값을 500으로 수정해주겠습니다. 

그런데 테스트를 하다가 플레이어가 해골위치로 이동하려고하면 해골에 몸은 비비면서 제대로 이동이 되지 않는걸 볼 수 있는데 이것은 크리쳐간의 콜라이더때문에 충돌이일어나는데 이동코드상으로는 
현재 로케이션이 DestLocation까지 도달해야 이동이 끝나기 때문입니다. 
지금은 게임 사양을 타일단위 이동을 하게끔 해놨는데 아직도 이 콜라이더를 사용할 필요는 없습니다. 

BP_Creature 클래스를 열어서 컴포넌트를 보면 캡슐 컴포넌트가 사실 콜리더 충돌을 담당하고 있는 충돌체 역할인데 캡슐 컴포넌트의 디테일에서 Collision을 검색해서 콜리전 프리셋을 No Collision으로 설정해주면 
이제 아무 충돌이 없도록 동작하게 됩니다. 다시 게임을 테스트 해보면 이제 나이트와 해골이 서로 안부딛히고 그냥 통과해 이동하게 됩니다.

또 고쳐줄것이 뭐가 있을까 하다가 이전에 테스트하다가 나이트 배치하는 코드를 BP_Knight 클래스에서 BeginPlay 이벤트 끝에 SetDestination 으로 임의의 타일에 배치하도록 했었는데 
만약 나이트를 둘 이상 배치하게 되면 두 나이트가 곂치게 될것이니 이런 식은 좋지 않습니다. 

그래도 초기에 나이트를 배치하는 코드를 어디선가 만들기는 해야합니다. 그러지 않고 그냥 게임을 실행해보면 플레이어가 PlayerStart 에서 0,0 타일로 뚜벅뚜벅 걸어가는데 
왜 이런거냐면 배치되기는 햇는데 초기 GridPos와 DestLocation가 엉뚱하게 0,0 으로 초기값이 설정되어 있기 때문입니다. 

이것은 어떻게 고칠수 있냐면 BP_TileMap에서 SpawnCreature 하던 부분 앞에서 플레이어에 대한 처리를 한번 해주겠습니다. BP_Knight를 Get Actor Of Class로 가져오고 Set Destination을 하는데 ForceMove를 켜줘서 바로 이동하게 하고 
목적지는 아까 만든 GetRandomEmptyGridPos 으로 줘보겠습니다. 

이러면 정상적으로 플레이어와 해골을 랜덤한 위치에 스폰이 되도록 해줬습니다. 아직 캐릭터 끼리 곂치는 걸 안곂치게 해주지는 않았는데 그것은 다음 시간에 알아볼 내용입니다. 

이번시간에 꽤 흥미로운 작업을 했습니다. 크리쳐들을 맵에 배치하는걸 코드로 처리하도록 만들었는데 대부분의 게임 책에서는 드래그 드롭으로 배치하는게 편하기 때문에 그렇게 처리 하는 때도 많지만 
실제 업무에서는 코드로 배치하는게 기본입니다. 이런 코드를 어디에서 관리하는지도 고민이 많아질테지만 그것은 나중에 캐릭터 끼리 안부딛히도록 하기위해 만든다고 하면 타일맵 클래스에서 스폰하는 모든 애들을 
어딘가에 들고 있다가 그것들의 위치를 MapGrid에 적용해 CanGo 함수에서 갈 수 없다고 만드는 방법도 있습니다. 

이어서 해결할 문제는 지금까지 공격할때 Attack Range라는 박스 컬리전과 상대의 컬리전이 충돌했는지 여부로 공격이 성공할지 여부를 체크했는데 이것도 충돌판정이 아니라 타일 단위로 관리하게끔 구현할 수 도 있습니다. 
또 한가지 이상한것이 이번에 스폰한 해골들이 왜 안움직이는걸까 궁금해집니다. 해골의 이동을 담당하던 AIController를 들어가 디버깅을 해보면 됩니다. AIController에 중단점을 걸고 게임을 실행하면 
중단점에 안걸리고 진행이 되고 이상하게 해골을 드래그 드롭으로 배치하면 그때서야 AIController에 중단점이 걸리는걸 볼 수 있습니다. 이것으로 보아 왠지 모르게 드래그 드롭으로 배치해야 AIController가 동작하고 
코드로 스폰한 해골은 AIController로 조작을하지 못하는것 같습니다. 

이 AIController 문제만 한번 보자면 이전에 BP_Monster 클래스의 디테일즈에서 AIController를 BP_AIController로 세팅해준 적이 있습니다. AIController를 설정해주는 옵셩니 Pawn 항목아래에 있었는데 다른 옵션을 살펴보면 
Auto Possess AI 라고 해서 폰의 생성및 AI 컨트롤러의 빙의 시점을 고르는 옵션이 있습니다 기본값은 Placed in World 즉 직접 드래그 드롭으로 월드에 배치될때 빙의가 된다는겁니다. 
이것을 Placed in World or Spawned 로 해주면 다시 실행해보면 아마 될것 같지만 실제로는 여전히 해골이 움직이지 않을겁니다. 다만 게임실행을 마치면 에러메세지가 주르륵 뜨는데 
아예 안바꾼것도 아니고 뭔가 바뀌긴했는데 부족한것 같습니다. BP_AIController에 MyMonster가 없다고 뜨는걸 보니 여기서 어떤 문제가 있는것 같습니다. 자세한 내용은 다음 시간에 다뤄 보겠습니다. 