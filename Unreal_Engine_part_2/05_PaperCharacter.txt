


        Paper Character


이번시간에는 자유분방했던 카메라가 플레이어를 따라다니도록 해볼겁니다. 그리고 겸사 겸사 플레이어가 상하좌우로 움직이면 idle 애니메이션에서 
move 나 attack 같은 다른 애니메이션으로 바뀌는 작업을 해보겠습니다. 

먼저 BP_Knight 클래스를 열어보겠습니다. 카메라를 고정시키는 가장 쉬운 방법은 일종의 셀카봉을 붙이는겁니다. 
컴포넌트 들을 찾아보다보면 Spring Arm 이라는 컴포넌트가 있습니다. 이게 셀카봉의 역할을 한다고 보면 됩니다. 
추가한 스프링 암 아래로 카메라 컴포넌트를 추가하면 셀카봉 끝에 카메라를 단것 같은 역할을 할겁니다. 
그런데 처음 카메라 컴포넌트를 추가하면 우리가 원하는 방향을 보고 있지 않을 수 있습니다. 그럴 경우 스프링 암을 선택한 상태에서 Rotate 조작을 할건데 
z축으로 -90도를 돌려주면 될것같습니다. 그리고 플레이어와 카메라가 너무 가까운데 이것은 스프링암 디테일즈에 타겟 암 길이라는 옵션값을 주면됩니다. 1000정도를 줘보겠습니다. 

이상태로 레벨 맵으로 돌아가 BP_Knight 오브젝트를 배치해보면 화면에 왠 카메라가 나타나고 그 카메라의 화면도 구석에 같이 띄워집니다.
실행전에는 카메라 모양이 보이지만 게임을 실행하면 사라집니다. 

이제 카메라가 플레이어를 찍고 있는데 플레이어가 움직이도록 만들어 줘야합니다. 
그러기 위한 여러 방법이 있는데 최종적으로는 창 옵션에서 월드 세팅을 열어보면 그 안에 게임모드라는 옵션들이 있습니다. 이 게임모드가 무엇이냐면 이전에 말했듯이 
언리얼엔진은 원래 FPS를 개발하기위한 엔진이었다보니 데스메치 혹은 점령전, 깃발뺏기 같은 여러 게임룰들이 있엇을텐데 그런게 게임모드라고 할 수 있을겁니다. 

게임모드를 정하면서 게임모드와 관련된 여러가지 클래스를 정할수 있는데 각 역할별로 Default pawn Class, HUD Class 등등 이미 정해져있는 여러 부품들이 있고 이걸 
우리가 잘 만들어 사용해야합니다. 이게 언리얼의 특징인 이미 구조가 꽉잡혀있는 특징입니다. 

이중에 Default pawn Class 를 우리가 만든 BP_Knight 로 설정해줘야하는데 그러기 위해서는 게임모드를 만들어주고 폰을 또 연결해주고 하는 단계가 복잡합니다.
가장 쉽게 하는 방법은 BP_Knight 오브젝트를 강제로 주인공으로 인지 하겠다고 빙의 해버리는 방법이 있습니다. 

'빙의'라고 하는 용어가 나옵니다. 영어로 Possession 이라고 하는데 Knight 는 영혼없이 존재하는 물체인데 외부의 플레이어 컨트롤러라는 애가 Knight에 빙의 시켜줘서 조종하게끔 해줄겁니다. 
어쩌다 이 빙의를 풀어주게 되면 Knight는 더이상 움직이지 못하게 될겁니다. 

여기서 한가지 애매한게 BP_Knight 를 액터로 만들어 놨습니다. 그 중에 PaperFlipbookActor 였습니다. Actor는 게임 세상에 배치하거나 스폰할 수 있는 클래스라고 설명되어있는데 
한발짝 더 나아가 컨트롤러를 이용해 조종할 수있어야 한다면 그럴 경우에는 Pawn 클래스 까지 가야합니다. Pawn클래스의 설명을 보면 폰은 빙의하면 컨트롤러의 입력을 받을 수 있는 액터라고 되어있습니다. 
액터를 상속받아 빙의를 할수 있게끔 되어있는게 폰이라는것을 알 수 있습니다. 더 나아가서 폰을 상속받은 클래스가 캐릭터 인데 캐릭터의 설명을 또 보면 걸어다니는 기능이 포함된 폰 타입이라고 되어있습니다. 

결국 이제 오브젝트에 빙의를 하고 카메라를 고정하는것이 목적인데 빙의를 하기 위해서는 최소 폰 이상 혹은 캐릭터 까지 가야하는데 지금 BP_Knight는 액터까지만 상속받아서 빙의 기능이 없습니다. 

이제 어떻게 바꾸는가 하면 BP_Knight 를 열어서 상속을 바꿔 보도록 하겠습니다. 
상단에 보면 클래스 세팅이라는 옵션이 있는데 클릭해 열어보면 현재 부모 클래스가 무엇인지가 나오는데 이걸 다른 클래스로 바꿔보겠습니다. paper 까지 쳐서 검색해보면 
PaperSpriteActor, PaperFlipbookActor, PaperCharacter 등의 클래스들이 나오는데 아까 알아본 바로는 캐릭터가 폰을 상속받은 클래스 였으니 PaperCharacter를 상속받도록 수정해줬습니다.

컴포넌트 부분을 보면 조금 구조가 바뀌엇는데 캡슐 컴포넌트 아래의 스프라이트로 가 보면 소스 클립북이 날라갔는데 이걸 아무거나 샘플로 볼 수 있게 설정해줍니다. 
그리고 스케일도 다시 1로 초기화 되었으니 5로 키워주었습니다. 그리고 스프링암을 다시 체크해보면  타겟 암 길이도 나중에 필요한 만큼 늘이거나 줄일 수 있을겁니다. 

레벨 맵으로 돌아와 기존에 있던 BP_Knight 오브젝트를 지우고 새로 수정한 BP_Knight를 배치합니다. 이제는 PaperCharacter를 상속받은 상태의 BP_Knight를 배치한겁니다. 

이상태에서 BP_Knight의 디테일즈에서 possess 빙의 를 검색해보면 Auto possess Player 플레이어 자동 빙의 라는걸 Player0 으로 바꿔 치기 해보겠습니다. 

나중에 복습할때 이런 Auto possess Player 같은 키워드들을 한번씩 구글링 해보는것도 좋습니다. 각 기능에 대한 좋은 글들이 있을겁니다. 

기본적으로 플레이어 자동 빙의가 뭘하고 있는지를 설명을 읽어보면 폰이 배치된 레벨이 실행되던 아니면 실행중인 레벨에 폰이 스폰이 되면 그와 동시에 플레이어 컨트롤러에 빙의될지 여부를 정한다고 합니다. 
그러면 이 플레이어 자동 빙의 값들이 Diabled 와 Player 0,1,2 ... 이 있는데 이중 Player 0 으로 설정하면 Player 0 이라고 하는 플레이어 컨트롤러가 BP_Knight를 자동적으로 빙의 하게끔 해준다고 할 수 있습니다. 

언리얼엔진이 FPS 게임을 만들기 위해 한번에 여러 멀티플레이어를 조작하기위해서 플레이어 컨트롤러를 많이 많들어 놓았는데 0번이 기본적으로 로컬 콘트롤러 즉 자신이라는 의미입니다. 

이상태에서 게임을 시작하면 카메라가 BP_Knight 오브젝트를 따라가도록 되엇다는걸 알 수 있습니다. 이 시점에 문제는 캐릭터를 주시하는것 까지는 되었는데 게임을 시작하면 캐릭터가 바닥으로 추락해버리는것이 문제입니다. 
왜 이러냐면 이제 BP_Knight는 Actor가 아닌 Character를 상속받은 오브젝트이기때문에 이동기능이 있어서 떨어진다거나 물리적인 적용을 받게 되는 연산을 받을 준비가 되어 있기 때문에 추락하는겁니다. 
이문제를 해결하기 위해서는 다양한 방법이 있는데 그냥 바닥 부분 정도에 충돌체를 놔서 안보이는 바닥을 만들거나 아니면 캐릭터가 물리연산을 적용받지 않도록 만드는 방법도 있습니다. 
BP_Knight 오브젝트의 디테일에서 gravity 를 검색해 Gravity Scale이라는 옵션값을 0으로 두게 되면 중력영향을 받지 않게 됩니다. 
만들 게임이 물리연산이 필요없는 스타일이라면 이렇게 물리연산을 아예 꺼버릴수 있고 그게아니라 횡으로 움직이면서 점프같은 기능도 넣을거라면 물리연산이 의외로 유용합니다. 
가속도나 중력같은게 다 적용되어있기 때문에 게임 디자인에 따라 선택을 해야합니다.

일단 지금은 중력 스케일을 건드려서 떨어 지지 않도록 하겠습니다. 

지금까지 배경을 스프라이트로 배치하고 플레이어를 여러 모션을 모은 플립북을 나타내고 PaperCharacter 를 상속받은 클래스로 만들고 이 클래스에서 스프링 암으로 카메라를 들고 자신을 찍으면서 
게임을 시작함과 동시에 Player 0 를 빙의해 컨트롤 할 수 있게까지 했습니다. 

더욱 중요한건 계층구조입니다. 그냥 맵에 위치하기만하는 오브젝트다 하면 Actor 이고 거기에 맵에 배치 된 후 빙의를해서 그 아이를 컨트롤하는게 필요하다면 Pawn 까지 가야하고 
추가적으로 좀 더 고급 기능으로 움직이고 물리 연산이 필요하다고 하면 Character까지 가서 관리하는게 언리얼에서 제공하는 계층구조라고 할 수 있습니다. 
중요한 부분이니 꼭 확실히 가져가야하는 내용입니다. 

지금이야 간단하게 테스트 하기 위한 방식이고 정식으로는 월드 세팅의 게임모드에 하나하나 기능들을 추가해 만드는게 이후 시간에 배워볼 내용입니다. 