

    애니메이션 갱신


지금까지 캐릭터가 상하좌우로 방향을 바꾸는 상태까지 만들었고 그중 키 매핑기법중 축 매핑 방식에서 반환값을 Compare Float 매크로로 처리하는 것 까지 했습니다. 
여기에 추가로 상하좌우 키를 누르고 있는걸 유지하고 있을때는 걷는 모션을 틀어주는 것을 해보고싶습니다. 이동 자체는 나중에 만들고 모션만 재생하는 것 까지만 해볼겁니다. 

다시 BP_Knight 블루프린트로 돌아와서 보면 현재 상하좌우 입력을 받고 있는데 과영 이것만으로 충분할까요? 나중에는 이동같은걸 구현하기위해서는 향하는 방향도 관리해야 할것이기 때문에
구조를 조금 바꿔야합니다. 그냥 상하좌우로 이동하고 있는걸 반응하기만하는게 아니라 현재 방향 정보를 저장할 필요가 있고 또 다음은 키를 지금누르고 있는지 즉, 이동중인 상태인지를 알아야 합니다. 

키다운, 키다운 유지, 릴리즈를 구별하면 이동뿐만아니라 스킬을 사용할때 누르는 직시 사용되는 스킬, 누른채 유지해야하는 채널링스킬, 혹은 누르는 중에 조준하는 논타겟스킬과 키를 때면서 효과가 발생하는것도 
구현할 수 있을겁니다.

이걸 관리하기위해 Enum을 새로 만들어줄건데 컨텐츠 폴더 아래 BluePrints 폴더안에 BP_Knight 블루프린트 클래스 파일이 있을건데 그 위치에 추가로 EDirection이라는 Enum 파일을 추가합니다. 
EDirection을 열어주고 열거형 추가를 네번합니다. 각각  Up, Down, Left, Right 라고 이름지어줬습니다. 

그리고 나서 다시 BP_Knight 클래스를 열어줍니다. 
이제 키입력을 받은 다음에 그 방향을 저장해줄 차례입니다. 데이터를 저장하고 있을 변수를 하나 만들어 줘야하는데 EDirection 타입 변수로 만들어 현재 방향 하나만을 갱신하면서 가지고 있게 하겠습니다. 
이것을 Compare Float 와 Set Flipbook 사이에 위치하도록 해줬습니다. 이렇게 해서 현재 바라보고 있는방향을 저장하는것이 완성되었습니다. 

현재 코드에서는 Set Flipbook으로 idle 모션만 세팅해주고 있습니다. 나중에는 attack move 같은 모션도 사용해줘야 하는데 이걸 또 경우의 수를 사용해 각각 세팅해주는건 막막합니다. 지금이야 상하좌우 이동을 
관리만 하면되지만 나중에 누를 기능이 많아지면 모두 하드코딩을 해야하는건 아닐지 걱정이 되는데 그래서 이제 코드를 작성하다보면 기능적으로 쪼개서 기능별로 관리하는게 더 편한감이 있습니다. 
지금 InputAxis MoveUp, InputAxis MoveRight 이벤트와 Compare Float 후 방향을 저장하는 변수 Direction 을 Set 하고 있는것은 공통적인 동작인 느낌이고 이후 Set Flipbook 을 하는 코드는 약간 느낌이 다릅니다.
애니메이션을 다루는 부분이라고 나눌 수 있는데 이 기능을 따로 함수로 만들어 보겠습니다.

새 함수를 파는데 이름하야 UpdateAnimation 이라고 하겠습니다. 말그대로 애니메이션을 갱신해주는 역할을 맡을겁니다. 
애니메이션 갱신이라는 기능을 따로 빼서 관리하게 되면 좋은점이 지금은 이동만 다루는데 나중에는 굉장히 많아 질 수 있습니다. 예를들어 Hp가 0이되면 캐릭터가 죽는 애니메이션을 틀어야하는데 이전과 같은방식으로는 
죽는 애니메이션을 연결하기 난감했지만 공통으로 사용하는 함수로 빼면 더욱 수월할겁니다. 

먼저 BP_Knight에서 방향에 따라 플립북을 설정하던 코드 뭉치를 UpdateAnimation 로 복사 붙여넣기를 한 다음 각 애니메이션이 어떤 방향일때 틀어줄지를 알아야하는데 
아까 만들었던 Direction 변수를 Get 해와서 Switch문을 사용해보겠습니다. 

이 함수를 적용해보자면 각 키 입력에 따른 Direction 저장을 한다은 UpdateAnimation 함수를 공용으로 호출하게끔 해줍니다. 
지금처럼 함수로 묶어서 관리하면 좋은점은 애니메이션 갱신코드는 이 함수에 몰빵해 넣어 놨기 때문에 나중에 혹시 애니메이션을 갱신해야 한다면 그때 다시 UpdateAnimation를 호출해 갱신해주면 됩니다. 

이어서 하고 싶은것은 키보드를 누르고 있을때 그냥 멈춰있는게 아닌 걸어가는 모션을 사용하고싶습니다. 어떻게 누르고 있는중인걸 판별 할까요? 
키보드를 누르닌 입력이벤트인 InputAxis MoveUp, InputAxis MoveRight 에서 아무입력없으면 0을 반환하고 위나 오른쪽이면 1을 반환 아래나 왼쪽이면 -1을 반환한다고 했습니다. 이것을 이용해서 
매틱 반환값이 같은 값으로 유지된다면 계속 누르고 있는 상태인겁니다. 

거기에 추가로 신경써야 하는것이 있는데 InputAxis MoveUp 으로 진행될때 만약 반환값이 0이었다고 하면 얼핏보면 아무런 방향이 눌리지 않았구나 할 수 있지만 그게 아닌게 
InputAxis MoveRight 를 입력하고 있는 중 일 수 도 있습니다. 그래서 두 경우를 모두 봐야하는데 같이 보기위해서 AxisValue 라고 하는 InputAxis 이벤트의 반환 값을 사실 따로 꺼낼 수 있습니다. 
블루프린트 빈곳을 우클릭해 MoveUp을 검색해보면 이벤트 말고 AxixVlaue 란에 Get MoveUp 함수가 있습니다. MoveRight도 마찬가지입니다. 이 두 값을 체크해서 둘 모두 0이라면 진짜 입력이 없는 상태이고 
둘 중 하나가 값이 있다면 입력중인 상태입니다. 입력이 있는지 없는지를 저장할 불리언 변수 bKeyBoardPressed 를 만들었습니다. 이걸 어떻게 세팅할것이냐면 매 프레임 마다 계속 갱신을 해주겠습니다. 

Tick 이벤트에 Set bKeyBoardPressed 를 이어줄건데 어떤 값으로 세팅해줄것이냐면 Get MoveUp 과 Get MoveRight의 값이 둘 중 하나라도 0이 아니면 입력이 있는 중이니 True로 세팅해줄 것이고 
둘다 0일때만 False 로 세팅해주면 됩니다. 둘 중 하나라도 0이 아니라는것은 Get MoveUp,Get MoveRight 둘다 != 0 를 체크해서 그 값이 OR 연산한 값입니다. 
이대로 만든다음 확인차 뒤에 PrintText 로 bKeyBoardPressed의 값을 출력해보면 매 프레임당 bKeyBoardPressed의 값을 출력하는데 아무것도 안누르면 false, WSAD 중 하나라도 누르면 True가 출력됩니다. 

이렇게 기능을 만들때는 중간중간 내가 의도한대로 동작하는지 체크하는것도 좋습니다.

이제 bKeyBoardPressed라는 값을 구할 수 있었으니 다시 UpdateAnimation 함수로 돌아가 보겠습니다. 지금까지 UpdateAnimation에서 하고 있던 것은 idle 동작의 방향을 정해주는 것이었습니다. 
여기로 들어오기전에 브랜치로 분기를 나눕니다. 기준은 bKeyBoardPressed의 값에 따라 나누면 될것인데 bKeyBoardPressed의 값이 True다 라고하면 이동을 하는것이니 이후 move 애니메이션을 붙혀주면 되고 
False라면 서있는것이니 이미 만든 idle로 보냅니다. 그리고 move 애니메이션은 idle의 코드를 복사하고 Set Flipbook 에서 세팅할 플립북을 move류 플립북으로 설정해주면 됩니다. 

다시 테스트를 해보면 누른 방향으로 걷기는 하지만 키보드를 때도 다시 idle로 돌아오진 않습니다. 이렇게 의도하지 않은 버그가 생겼을때 해결법을 잠시 알아보면 
가장 먼저 발생한 버그가 100퍼센트 확률로 다시 재현되는지를 확인합니다. 확인했다면 맵에서 F8을 누르면 화면에서 커서가 빠져나오고 그 상태에서 BP_Knight의 블루프린트를 가보면 재미있게도 
어떻게 실행되고 있는지 그래픽적으로 보여줍니다. 이중에 어딘가에서 멈춰 보고 싶다면 그 노드를 누른 상태에서 살펴 볼수 있습니다. 

일단 어느 부분이 문제냐면 bKeyBoardPressed가 True 일때 호출된 UpdateAnimation에서는 move 계열 애니메이션이 실행되는데 InputAxis 이벤트들의 반환값이 0일때 따로 호출해달라고 해놓지 않았기 때문에
한번 움직이면 계속 움직이는 상태로 유지 되는겁니다. 해결하려면 InputAxis의 값이 0일때 다시 Idle로 돌아가도록 해주는 무언가를 하면 될것같습니다.
InputAxis 값이 0일때도 UpdateAnimation을 호출하도록 해주면 어찌 됬건 덮어 씌워지면서 땔때도 갱신을 시켜주게 될겁니다. 
다만 이렇게 되면 InputAxis 이벤트는 매 틱마다 호출되는 문제가 아쉽기는 하지만 일단은 이렇게 해결하고 나중에 수정해주겠습니다. 


이번시간을 정리해보겠습니다. 핵심적인 부분은 캐릭터의 방향을 Enum으로 관리하게 Direction이라는 변수를 만들었고 Set Flipbook을 하는 코드들을 UpdateAnimation 이라는 함수로 만들어 
애니메이션을 담당하는 함수에 뭉쳐서 관리했고 또 매 틱마다 체크하면서 지금 키가 눌리고 있는지를 추적하는 bKeyBoardPressed도 도입해 idle 상태 뿐만아니라 move 애니메이션도 동작하도록 했습니다. 