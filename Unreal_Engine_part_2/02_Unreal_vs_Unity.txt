

    언리얼 vs 유니티


본격적으로 리소스를 가져와 2D게임을 만들기 이전에 언리얼엔진의 계층구조에 대해 이야기를 해보겠습니다.

어떻게 되든 결국 리소스를가져와 블루프린트 클래스를 만들고 클래스가 액터를 상속받게 될겁니다. 이런 언리얼엔진의 구조 철학을 말해볼건데 

언리얼이 기능이 많이 있고 하기도 하지만 어떻게 보면 언리얼은 이미 구조가 타이트하게 짜여있다는 느낌을 받기도 합니다. 
그것을 체감하기 위해서 유니티 엔진을 보면서 비교해볼겁니다. 

유니티에서는 굉장히 자유롭게 게임을 만들수 있는부분이 있는데 먼저 언리얼이나 유니티나 둘다 게임엔진이다보니 월드와 좌표가 있고 물체를 찍는 카메라와 빛을 배치할수 
등 게임엔진의 기본이되는 기능들은 공통적으로 갖춰져있습니다. 유니티는 여기서 아예 빈 깡통에서 시작해 필요한 부품 Component를 조립해 만듭니다 그만큼 자유롭게 만들수 있습니다. 

유니티에서는 빈 깡통 오브젝트를 만들수 있는데 그럼 그냥 Transform이라고해서 Position, Rotate, Scale 이 합쳐진 개념만 있습니다. 여기에 추가로 Mesh Filter, Mesh Renderer, Box Colider 등등을 
추가할 수 있습니다. Mesh Filter에서는 Cube, Sphere 같은 물체 형태를 말하고 Mesh Renderer에서는 Material 이라고 해서 말 그대로 이 물체의 재질이 어떻게 보일지 하는 걸 고를 수 있습니다. 

직접 큐브 매쉬에 디폴트 머테리얼을 추가하면 기본 프리셋에 있는 큐브 오브젝트와 똑같아 집니다. 거기에 카메라 오브젝트, 광원 오브젝트도 마찬가지로 빈 오브젝트에 카메라 컴포넌트를 추가하면 카메라 오브젝트가 되고,
광원 컴포넌트를 추가하면 광원 오브젝트가 되는 식입니다. 

그래서 진짜 월드에서 눈에 보이는 물체나 아니면 추상적인 빛이라거나 또 찍고 있는 주체인 카메라 마저도 다 빈 오브젝트부터 시작해 하나씩 만들어낸것이 유니티 엔진입니다. 


그러면 이제 언리얼로 돌아가보겠습니다. 
언리얼에서는 빈 깡통 오브젝트라는것이 없습니다. 언리얼엔진은 신분제가 확실합니다. 어떤 오브젝트를 만들때 어떤 목적으로 만드는지 확실히해야합니다. 
예를 들어 큐브 셰이프 오브젝트를 하나 만들어보면 맵에도 배치되고 오른쪽 아웃라이너 창에도 큐브의 타입이 StaticMeshActor 라는 타입이라는걸 확인할 수 있습니다. 
큐브를 만들자마자 그냥 큐브가 아니라 StaticMeshActor를 상속받아 만들어진 객체라는것입니다.

여기서 액터라는것은 이전 파트 강의에서 슬라임이 상속받은 클래스였습니다. 게임의 등장인물로 사용하는 클래스인데 비슷한 클래스가 Actor, Pawn, Character 가 있습니다. 
이런 캐릭터들을 관리하는 추상적인 개념인 Player Contruller 도 있었습니다. 

언리얼 엔진은 처음 만들어진 이유가 FPS게임을 만들기 위함이었습니다. 언리얼 토너먼트라는 게임을 만들다가 그 엔진이 너무 좋아서 공개를 하게된 경우입니다. 
그래서 상위클래스중에  Game Mode Base 라는것이 있습니다 이건 FPS 게임에서 데스매치모드나 점령전모드, 깃발뺏기 모드등이 있을텐데 이런걸 담당하는 클래스입니다. 


정리하면 유니티 엔진은 처음부터 자신만의 구조로 컴포넌트를 쌓아 올려가는 엔진인 반면 언리얼엔진은 이미 다 완성되어있는 클래스를 잘 골라 사용해야하는것입니다. 
