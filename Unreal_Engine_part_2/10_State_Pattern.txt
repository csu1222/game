


    State 패턴


이번시간도 이전시간에 작업한 Attack Animation을 리팩토링하면서 시작하겠습니다. 
지금 강의를 진행하는 과정이 처음부터 코드를 최적의 구조로 한번에 만드는게 아니라 처음 구현하는 사람 입장에서 무작정 구현하고 리팩토링하고 하는 식으로 
진행하고 있습니다. 

예를 들어서 지금 여러 상태를 관리하기 위해서 불리언 변수를 늘리고 있습니다. 키보드가 눌렸는지를 관리하는 bKeyBoardPressed, 공격키를 눌렀는지를 관리하는 bAttack등이 있는데 
지금은 두개 지만 앞으로 누를 키가 많아질수로 이 불리언 변수도 비례해 늘어날겁니다. 
초보자들이 많이 만드는 게임으로 횡스크롤 플랫포머 게임 슈퍼마리오나, 록맨 같은 게임을 만드는데 그럴때는 캐릭터가 점프 중인 상태, 벽에 달라붙어있는 상태, 대쉬중인 상태등 
이 생길건데 이러면 상태를 나타내는 불리언이 십수개가 될수도 있습니다. 여기서 불리언 변수들끼리 역여있을겁니다. 무슨 말이냐면 가령 이동을 하는도중 공격키를 누르면 
보통 이동이 멈추고 공격모션이 나갈겁니다. 이런식으로 불리언변수들끼리 독립적으로 동작하지 않고 서로 영향을 주는데 지금같은 방식이면 안좋을 수도 있습니다. 
이부분은 고쳐볼건데 

그전에 일단 먼저 UpdateAnimation으로 가보겠습니다. 이 함수의 코드를보면 반복되는 코드도 많고 그냥 코드량 자체도 많아졌습니다. 
지금을일단 되는대로 만들다보니깐 idle, move, attack 각각 4개의 Set Flipbook를 사용하니깐 12개의 코드가 곂치는 셈입니다. 이걸 문제 삼는것은 프로그래밍 성능상의 문제라기보다는 
프로그래머입장에서 관리하기가 불편합니다. 

그 대안으로 Select 라는 노드에 대해 알아보고 실습을 해보겠습니다. 
참고로 지금 Set Flipbook에 넣어주고 있는 up_idle, down_idle 같은것은 어짜피 따로 데이터로 빼서 관리해야합니다. 
왜냐면 나중에 가면 BP_Knight 뿐만아니라 스켈레톤같은 몬스터의 애니메이션도 관리해줄건데 이런경우마다 직접 코드를 작성하는건 좋지 않습니다. 
셀렉트란 노드는 단순한데 입력 인덱스를 넣어주고 그값에 따라 여러 옵션중에 하나를 골라주게되는데 이 옵션에 어떤 플립북을 사용할건지를 골라주도록 하면 됩니다.

이제 셀렉트의 인덱스 값으로 Direction을 넣어주면 Direction 자체도 사실 Enum 이었으니까 우리가 보기에는 up,down,right,left 지만 컴퓨터에서 인식하기로는 0,1,2,3 입니다. 그래서 
인덱스로 사용할수 있습니다. 옵션에 해당하는 입력핀을 이제 Flipbook 을 이을수 있게 해줘야하는데 옵션 핀을 우클릭후 핀 타입 변경이라는 기능을 클릭합니다. 
여기서 핀의 타입을 검색할 수 있는데 Flipbook 을 검색해보면 Paper Flipbook이 있을겁니다. 이걸로 설정해주면 이제 원하던대로 Flipbook을 골라줄 수 있습니다. 
각 방향에 맞는 idle 플립북을 골라주고 여기까지 하면 이전에 Direction의 Switch 문을해 각각 Set Flipbook을 해주던 부분을 Select로 대체할수 있습니다. 이어서 Sprite와 Set Flipbook 하나만 꺼내 연결하면 
완료됩니다. 이전 보다 더욱 깔끔해졌습니다. 물론 좌우 모션을 Rotation으로 반전시키는건 다른 부분에서 해줘야할겁니다. 
이렇게 Select 라는 새로운 노드를 배웠습니다. 이 Select는 꼭 Enum을 인덱스로 삼아 사용해야하는것은아니고 실제 배열의 인덱스를 연결해도 되고 아니면 불리언을 연결해 true, false 두가지 상황에 대해
사용해도 좋습니다. 

마찬가지로 move 플립북 부분도 수정합니다. 대칭적으로 플립북만 move 류로 설정하였습니다. 

이어서 알아볼것은 Set Relative Rotation을 수정해 좌우 방향을 맞춰주겠습니다. Rotation의 z축값을 180으로 돌리면 왼쪽을 보게 만들고 그냥 사용하면 오른쪽이었습니다. 
위와 같이 셀렉트 문을 사용해 구현해보겠습니다. 왼쪽인지 오른쪽인지 두가지로 관리하면 될것이기때문에 불리언으로 인덱스 핀에 연결해주겠습니다. 
그러면 Select 노드에 True인경우와 False인경우만 남고 다시 핀 타입을 Rotator로 설정하면 곧바로 Rotation을 수정할 수 있습니다. 
수정한 Rotator를 Set Relative Rotation에 연결해주고 이것들을 또 함수 흐름내에 끼워넣어줘야합니다. 
UpdateAnimation을 시작하자 마자 방향을 체크해 수정하게끔 해주겠습니다.

마지막으로 공격 모션부분도 마찬가지로 수정해줍니다. 

이렇게 해서 이전시간내용을 똑같이 동작하면서 더 보기쉬운 방법으로 코드를 정리해봤습니다. Select 노드를 활용해 코드량을 줄일 수 있었습니다. 여기까지가 이전 공격 모션추가한 후 리팩토링한것이고 

다음으로 이전에 불리언변수로 상태들을 관리하는건 좋지 않다고 하였습니다. 그럼 어떻게 해야하는가 하면 State 패턴이라고 해서 상태를 기반으로 관리하는겁니다. 
예를들어 지금 관리하고 있는 BP_Knight는 idle 상태가 있을것이고 move 상태가 있을것이고 attack 상태가 있을겁니다. 

세가지 상태를 기반으로 생갈할겁니다. 
새로 Enum을 만들어서 EState라고 해주겠습니다. Idle, Move, Skill 이라는 이넘들을 추가하고 다시 BP_Knight로 돌아오겠습니다. 
그리고 State라는 이름의 EState 변수를 만들어주겠습니다. 그래서 이 State로 기존에 사용하던 불리언 변수들을 없애는게 목적입니다. 

코드를 보면 이제 InputAction Attack 이벤트로 부터 Attack 불리언을 True로 세팅하고 있는데 이부분을 이제 Set State를 해서 Skill 이라고 설정해보겠습니다. 
지금은 스킬이 공격밖에없기때문에 그냥 사용하겠습니다. 그런데 나중에 케어해줘야 하는것은 캐릭터가 공격중인 상태에서는 다른 idle이나 move를 못하고 반대로 
idle 이나 move 중에는 스킬을 사용할 수 있게 해줄건데 이렇게 어떤 상태에서는 뭘 할수 있고 어떤상태에서는 뭘 할 수 없고를 구분해야하는데 일단은 이렇게만 하고 넘어가겠습니다. 
그리고 나서 공격모션의 길이만큼 플립북을 실행한다음 Attack 불리언을 다시 False로 세팅하는 부분을 이제는 State 변수에서 Move로 세팅하도록 해주겠습니다. 
Idle 이나 Move나 상관없을것같은데 결국 이동키 입력이 없으면 Idle일것이고 입력이 있으면 Move가 될겁니다. 

수정해줄 다른곳은  UpdateInput 함수로 가보겠습니다 여기서는 Sequence 로 세가지 코드를 순차적으로 실행해주고 있습니다. 먼저 MoveUp, MoveRight 라는 이동키 입력을 주시하면서 
이동 키 입력이 있는지를 체크해 bKeyBoardPressed를 세팅해주고 있습니다. 입력이 있는지 없는지를 관리한다는것은 다시 말해 State 변수중 Idle인지 Move인지를 관리한다는것입니다. 
그전에 한가지 더 고려해야할점은 지금 상태가 공격중, Skill 중이라면 move 혹은 idle로 들어가지 않아야 한다는것입니다. 그렇기 때문에 앞에 브랜치를 하나 추가하고 
State의 값이 Skill이라면 아무것도 안하고 Skill이 아니라면 이어서 idle인지 move인지를 판별해주겠습니다. 

idle, move 판별은 (MoveUp != 0 || MoveRight != 0) 가 참이라면 움직인다는것이니 Move이고 거짓이라면 Idle로 세팅해주겠습니다. 
작업을 하다보니 오히려 코드가 복잡해지는데 이것도 나중에 리팩토링을 하면되고 최대한 bKeyBoardPressed를 사용하지 않는 방향으로 수정하고 있습니다. 

이제 기존에 있던 bAttack과 bKeyBoardPressed 를 사용하던 부분은 다 날린것 같고 남은건 UpdateAnimation쪽에서 브랜치의 조건 부분을 수정할 차례입니다. 
bAttack을 체크하고 다시 bKeyBoardPressed를 체크하던 브랜치를 다 날리고 이제 더욱 쉽게 State를 Get 해오고 Switch문을 사용하면 지금 State가 Idle인지 Move인지 Skill인지 분기할수 있습니다.

이렇게 State라는 Enum과 Switch를 사용해서 코드를 정리하고 불리언을사용하지 않는식으로 정리되었습니다. 
여기서 남은것은 내가 어떤 상황일때에 따라 특정 코드를 실행하는겁니다.
얘를 들어 내가 이미 공격중일때 어떤 입력을하면 방어자세를 취하고 걸어다니거나 서있을때 입력하면 무기를 꺼내는 모션을한다는등 을 추가적으로 코드를 사용할 수 있습니다. 

이번시간에 무언가 새로운 기능을 만들었다기보다는 기존 기능을 다시 좀더 효율적으로 정리하는 시간을 가져봤습니다.