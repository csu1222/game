



    Flipbook 


지난시간에 스프라이트를 배치하고 포스트 프로세스 볼륨의 bloom->intence 를 0으로 조절하고 무한규모도 체크해 뽀얀느낌의 효과를 없앴는데 
이것 외에도 방법이 있습니다. 
상단 옵션중 편집 -> 프로젝트 세팅으로 갑니다. 그러면 이 프로젝트 세팅에서도 직접적으로 조명과 관련된 세팅을 할 수 있는게 굉장히 많습니다. 
포스트 프로세스 볼륨에서 건드렸던 세팅들도 다 포함되어있습니다. 프로젝트 진행할때는 포스트 프로세스 볼륨은 삭제한 상태에서 진행하겠습니다. 


이번시간에 하고 싶은것은 주인공을 배치하려고합니다. 학습자료로 배포해주신 Knight 라는 폴더를 Sprite 폴더로 드래그 드롭해줍니다. 
그러면 굉장히 많은양의 리소스가 추가되는데 하나씩 살펴보면 Knight 폴더안에 down-attack, down-idle, down-move, side-attack, side-idle, side-move,
up-attack, up-idle, up-move 로 상하 양측면 으로 나뉘어져있습니다. 분류는 딱히 언리얼의 문법같은건 아니고 알아 보기 쉽게 정리해본겁니다. 

이렇게 추가한 이미지 파일들을 하나하나 직접 페이퍼 2D 텍스쳐 세팅 적용을 하기에는 너무 많으니 Knight의 모든 폴더를 쉬프트를 눌러 다중 선택을 하면 
그 안에 들은 모든 이미지가 나타나고 또 이 이미지들을 ctrl + a 로 전부 선택을 합니다. 이상태로 스프라이트 액션 -> 페이퍼 2D 텍스쳐 세틱 적용을 해주면 됩니다. 

다음은 뭘해야하냐면 이렇게 가져온 텍스쳐는 그냥 맵에 배치할수 있는게 아니라고 했었습니다. 스프라이트를 만들어야 맵에 배치할수 있엇는데 마찬가지로 한번에 선택해 만들어줍니다. 
여기서 아까와 다른 것은 배경같은경우는 스프라이트 하나만 배치하면 끝이었는데 캐릭터의 경우는 수많은 스프라이트중 하나를 배치한다고 해서 뭐가 되지 않습니다. 

아무 스프라이트나 맵에 배치한다음 원점에 놓고 앞으로 조금 땡기면 배경위로 캐릭이 있는것 같습니다. 기본 캐릭터 크기는 너무 작을 텐데 스케일 값을 각각 5.0으로 세팅해봅니다. 
문제는 이미지 리소스들이 애니메이션기법으로 빠르게 전환되야지만 캐릭터가 움직이는모션이 완성됩니다. 그래서 지금같이 배치하는것 말고 리소스들을 차례대로 오고 가야지 원하는 화면이 나타날겁니다.
그 방법으로 직접 코드로 ticktime을 재서 리소스를 가져오는 방법도 있지만 이것은 Window API를 활용해 상용엔진을 사용하지 않고 포트폴리오를 만들때 사용하는 방법이고 
상용엔진에서는 당연히 스르륵 알아서 로딩하는 방법이 있을겁니다. 

컨텐츠 브라우저에서 한동작에 해당하는 스프라이트 들을 전부 선택한다음 우 클릭을해보면 플립북 생성이라는 버튼이 있습니다. 
이름그대로 넘기는 책같은 기능인데 초창기 애니메이션도 이렇게 종이다발을 스르륵넘기는게 시초였습니다. 

생성한 플립북을 스프라이트 배치하듯이 배치해보면 아까와 다르게 휙휙 칼을 휘두르는 모습이 보입니다. 
참고로 이 모션의 속도는 조절할수 있습니다. 컨텐츠 브라우저의 플립북을 더블 클릭해 열어보면 초당 프레임의 값을 설정하면되는데 

이런식으로 모션들을 플립북으로 만들어 계속 사용할 예정입니다. 그런데 플립북을 만들었던 리소스들을 삭제해서는 안됩니다 플립북에서 이 리소스들을 참조하고 있기 때문입니다. 
마찬가지로 나머지 모션들도 플립북으로 만들어주겠습니다. 

이제 궁금한점은 플립북을 사용한다고 했는데 그 중 다운 어택을 하던중 상황이 바뀌어서 다운 무브를 해야한다면 다운 무브 플립북이 실행되어야하는 식이어야 합니다. 
그러니까 상황이나 입력에 따라 각기 다른 플립북을 사용해야한다는겁니다. 

여기서 발생하는 고민은 파일 구조에 대한 문제입니다. 지금 컨텐츠 폴더 안에 Sprite 폴더 또 그안에 Knight 폴더를 만들었고 그안에 각 모션의 플립북들을 만들었습니다.
결국 사용할것은 플립북기 때문에 그냥 따로 빼서 플립북만 관리하는 것도 방법일겁니다. 그래서 플립북들을 다 상위폴더인 Knight 로 옮겨봤습니다.

여기서 하고싶은 이야기는 플립북들을 Knight에 관리를 하고 있는데 결국은 이 플립북들을 코드기능을 추가해 입력에 따라 방향이 달라지고 리소스도 바꿔치기 해줘야합니다. 
사용하고 있는 엔진이 유니티였다면 새로운 스크립트를 만들어 플레이어 객체에 붙여 넣었을겁니다. 
하지만 언리얼엔진은 기본적으로 상속구조로 동작한다고 했었습니다. 

실제로 배치했던 플립북 객체의 타입을 보면 PaperFlipbookActor 로 되어있습니다. PaperFlipbook 기능을 가지고 있는 Actor다 라고 짐작할 수 있습니다. 
이어서 이 플립북 액터들을 관리할 블루프린트 클래스를 만들어 볼겁니다. 이때 또 이 클래스를 어디서 관리할것인지가 항상하는 고민입니다. Knight와 관련된 클래스다보니 Knight 폴더에 관리한다고 하면
클래스와 리소스들이 같이 위치해있게 되는데 이게 괜찮다면 그렇게 해도 되는것이고 그게 아니라고하면 아예 컨텐츠 폴더아래에 Blueprints들을 모아서 관리하도록 할수도 있습니다. 
장단점이 있습니다. 선택의 영역입니다. 

이제 블루프린트 클래스를 만들어볼건데 무엇을 상속받아 만들어야 할지 고민해보겠습니다. 일단 배치해야하니 액터이긴 할것 같고 플립북 기능을 사용해야하니 혹시 PaperFlipbookActor를 상속받으면 되지 않을까
해서 만들어보겠습니다. 이름을 BP_Knight라고 지어서 열어보겠습니다. 

BP_Knight의 컴포넌트중 랜터 컴포넌트를 살펴보면 플립북과 관련된 기능들이 있습니다. 내려보면 source filpbook 이라고 해서 이걸 바꿔 치면 되지 않ㅇ르까합니다. 한번 down_attack 플립북을 선택하고 
스케일도 아까처럼 5의 크리로 설정하였습니다. 
이제는 이벤트 그래프로 가 블루프린트 코딩을 할 수 있게 된겁니다. 

그냥 단순하게 플립북을 드래그 드롭했을때는 단순히 그 플립북의 애니메이션만 반복하는 물체가 배치된것입니다. 원래 같은동작만 반복해도 괜찮은 물체라면 상관없겠지만 진짜 기능을 넣거나 입력을 받아주도록하려면 
블루 프린트 클래스로 만들어야 한다는겁니다. 클래스를 맵에 배치한 상태에서 source filpbook 을 다른 모션으로 바꾸면 같은 물체가 모션이 달라져 있는걸 볼 수 있습니다.

(테스트중에 idle 모션들이 15 프레임이면 모션이 어색하기때문에 2프레임 정도로 다 수정했습니다.)

이제는 어느정도 준비가 된것같은데 다음시간에는 이제 카메라를 Knight에 붙여서 이동하는걸 해볼겁니다. 

정리해보자면 언리얼엔진에서 가장 기초가되는 기능을 알아봤는데 2D 게임의 모션들을 png 파일로 받아오는데 이때는 그냥 텍스쳐로 인식하기때문에 페이퍼 2D 텍스쳐 세팅 적용을 해줘서 설정을 수정할 수 있게 해주고 
스프라이트 생성으로 텍스쳐가 아닌 바로 배치할수 있는 스프라이트로 만들어 줍니다. 이후 한가지 모션을 만들수 있도록 플립북으로 묶어 줬습니다. 
이때의 플립북은 그냥 한가지 모션을 반복할 뿐이기 때문에 방향에 따른 모션 변화를 주기 위해 BP_Knight라는 PaperFlipbookActor를 상속받은 블루프린트 클래스를 만들어봤습니다. 
