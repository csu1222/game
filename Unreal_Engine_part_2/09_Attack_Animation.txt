

        공격 애니메이션


이어서 이번시간에는 아이들, 이동 애니메이션 까지 적용했으니 공격 애니메이션 작업까지 하고 실제 캐릭터 이동은 다음시간에 구현해보겠습니다. 
그리고 추가로 리팩토링이라고 해서 코드를 작성하다가 좀 더 알아보기쉽게 정리하거나 구조를 정리하는 작업도 해볼겁니다. 
원래 이렇게 기능을 하나씩 만들고 나서 이후 리팩토링하는게 더 낫고 처음부터 완벽한 구조를 한번에 만들려고 해봤자 거의 불가능하고 의미가 없습니다. 

지금 까지 코드를 보면 딱히 방대하다거나 그렇지는 않지만 유심히 보면 Tick 이벤트와 InputAxis 이벤트들도 매틱마다 호출되고 면서 bKeyBoardPressed와 Direction, Sprite의 플립북을 
세팅해주고 있습니다. 

이중 Tick이벤트에서 매틱마다 키보드를 누르는 중인지를 체크하는 부분을 하나의 함수로 묶어버리면 어떨까 싶습니다. 
BP_Knight 클래스에 새로 함수를 만드는데 이름은 UpdateInput이라고 하겠습니다. 함수 시작노드에 Sequence 노드를 연결해줍니다. Sequence노드는 출력핀을 돌아가면서 계속 실행해주는 노드였습니다. 
이중 Then 0 이라고 하는 첫 번재 출력핀에 아까 그 bKeyBoardPressed를 연산해주는 코드를 연결하였습니다. 
Then 1 에는 MoveUp의 값에 따라 Direction을 Up, Down을 정해주는 코드를 연결하였고 Then 2 에는 MoveRight의 그것을 연결했습니다. 
지금 구조로는 사실 위와 오른쪽을 동시에 누르고 있을때 순차적으로 Direction을 갱신하기때문에 값이 덮어 씌워질수 있는데 일단은 그냥 진행하겠습니다. 
UpdateInput에서는 이제 키보드 입력에 관한 코드들을 모두 관리해준다고 할 수 있습니다. 이렇게 기능단위로 코드를 정리해 가면서 리팩토링하면 이후 코드가 방대해졌을때 좀 더 보기 쉽습니다. 


이제 간단한 리팩토링을 마치고 오늘의 주제인 공격모션을 작업해보겠습니다. 
가장먼저 키매핑부터 해보겠습니다. 편집->프로젝트 세팅->엔진란의 입력옵션으로 가면 키맵핑을 할수 있는데 이동은 축 매핑을 사용했지만 공격키는 액션 매핑을 사용하겠습니다. 
공격은 공격한다 안한다 두가지 상태만 있는 사양으로 할것이기 때문입니다. 액션 매핑을 추가하고 이름을 Attack 이라고 간단하게 짓고 스페이스바에 매핑하였습니다. 
다음순서는 다시 BP_Knight 블루프린트로 돌아가 코드를 만든 다음 리팩토링하는 순서로 해보겟습니다. 

InputAction Attack 이라는 이벤트를 찾아보면 Pressed, Release 두가지 실행핀이 출력되고 있습니다. 이어서 생각해보면 공격 애니메이션을 교체해줘야 하는지를 생각해보니 
사실 UpdataAnimation 함수에서 플립북을 교체하는 부분을 관리해주고 있기때문에 여기서 공격애니메이션도 같이 관리해주도록 할겁니다.
그럼 공격중이다 라는 상태를 변수로 관리해주면 매 틱 마다 UpdateAnimation을 호출하면됩니다.

공격중라는 상태를 관리하기 위해 불리언 변수를 하나더 늘려서 bAttack 이라고 하겠습니다. (자꾸 이렇게 불리언 변수를 늘리면 어떤 문제가 생기는지 좀 있다가 알아볼겁니다.)
간단하게 생각해서 InputAction Attack 에서 Pressed 일때 bAttack을 True로 세팅해주고 UpdataAnimation을 호출해봤습니다.

이제 UpdateAnimation 코드를 수정할 차례인데 이동하는 코드를 실행하기전에 먼저 bAttack을 체크해 지금 공격중인지를 브랜치로 분기해 공격중이라면 공격 플립북을 세팅해주겠습니다. 
공격모션도 역시 상하좌우 구분되어 있으니까 이전 Idle 모션이나 Move 모션처럼 Direction의 값에 따른 Switch 문으로 각각 모션을 세팅해줄겁니다. 대신 attack 계열 플립북을 사용하면 될것입니다

일단은 이정도로 만들면 되지 않을까 싶으니까 컴파일 저장을 하고 테스트 해보겠습니다. 
상하좌우 방향, 아이들 까지는 여전히 잘 실행되고 이어서 스페이스바를 누르면 공격모션도 동작합니다. 동작하긴하는데 스페이스바를 땐 상태에서도 공격모션이 끝나지 않고 이어지는걸 확인했습니다. 

이제 애니메이션을 멈추는 부분을 만들어주면 될것입니다. 그리고 이런부분이 눈여겨 볼 부분입니다. 지금까지의 모션들 idle이나 move 모션들은 한번만 행동하고 끝나는게 아니라 계속해서 지속되는 
모션들이었습니다. 그런데 공격같은경우에는 딱 한번만 실행하고 멈춰야 하는데 누르는 동안 유지되서 조금 어색합니다. 
그렇다면 여기서 InputAction Attack을 눌렀을때 한번 칼을 휘두르는 모션을 모두 실행한 후 다시 Set bAttack 을 False로 꺼 줘야 할것같습니다. 

어떻게 구현할지 생각해보면 가장 직관적으로는 UpdataAnimation 에서 공격모션을 세팅하는 코드에서 플립북을 세팅해주고 있었습니다. 여기서 플립북은 따로 Contents/Sprites/Knight 경로에 만들어뒀던
플립북을 열어 살펴보면 한 모션이 실행되는 길이가 정해져 있을겁니다. 그러면 왠지 이미 기능중에 이 플립북의 재생길이를 가져올수 있는 기능이 있지 않을까 생각이 듭니다. 
실제로 BP_Knight 블루프린트로 돌아가 검색해보면 Get Flipbook Length 라는 노드를 배치해보면 Sprite 오브젝트가 이어진상태로 배치됩니다. 
한번 공격키를 눌르면 공격 애니메이션을 공격 플립북 길이 만큼 실행했다가 bAttack의 값을 다시 False로 수정해주면 될것 같습니다. 그리고 공격 버튼을 누르는 것도 이벤트인 만큼 딜레이를 시킬 수 있습니다. 
딜레이시키는 시간을 플립북의 길이만큼 지연시키면 될것같습니다. 

이렇게 해서 이번시간에는 지금까지 만든 코드를 리팩토링해보고 공격키를 스페이스바에 할당하고 공격 애니메이션을 실행하는 부분까지 했습니다. 
이어서 이동하는 모션에 실제로 캐릭터의 좌표가 이동하는 기능