


    Set Actor Location


이어서 본격적으로 캐릭터의 이동을 만들어 볼건데 
그전에 한가지 수정해야할것이 있는데 지금 코드에서 캐릭터가 공격도중에 방향을 틀어버리면 공격모션이 끝나기전에 방향전환 되면서 전환된 방향으로 공격하는 모션이 이어집니다.
이러면 조작을 하는 도중에 판정과 애니메이션이 달라지는 문제가 생길 수 있습니다. 

경우에 따라서는 문제없다고 할 수 있겠지만 여기서는 수정하는 방향으로 해보겠습니다. 
지금 BP_Knight 블루프린트를 보면 공격키를 누르면 공격 플립북의 길이동안은 Skill State가 유지되고 그 중간에 Direction이 바뀌면 바뀐 Direction 의 State 플립북을 실행해주고 있는 상황인데 
그래서 공격키를 누르고 Skill을 쓰는 동안은 방향키 입력을 무시해 주도록 해주면 되겠습니다. 
이 코드를 어디서 관리하는가 하면 UpdateAnimation에서는 입력받은 키에 따라 갱신된 Direction과 State를 보고 그에 맞는 애니메이션을 실행해주고 있고 
키 입력을 받는 것은 UpdateInput 함수에서 입니다. 

UpdateInput의 코드를 보면 State가 Skill인 동안에는 Move, Idle 스테이트로 가지 않게 해줬지만 그 밑에 Direction을 수정하는부분은 건드리지 않았었습니다. 
여기도 Skill 상태인지를 체크하기 위해 아예 처음에 체크를 하도록 해보겠습니다. 
UpdateInput 시작 노드에서 State의 Switch 노드로 연결하고 Switch 의 Idle, Move 인경우에면 이후 Idle, Move 스테이트와 Direction을 정해주는 Sequence로 진입하도록 수정했습니다. 
이제는 BP_Knight의 블루프린트에서 Skill 이 끝날때까지 다른 입력이 되지 않을겁니다. 

그리고 스페이스바를 계속 누를 때에는 InputAction Attack 를 계속 호출하게 되는데 이분도 이미 공격상태중이라면 다시 공격할 수없도록 State Switch 를 다시 꺼내서 Idle, Move일때만 
다음 코드로 이어지도록 해주었습니다. 

테스트를 해보면 의도한대로 모션이 나오고 있습니다. 만약 조금 답답하다고 하면 키 예약 시스템을 도입해줄 수도 있긴한데 일단은 이것은 구현하지 않을겁니다. 


이어서 진짜로 캐릭터가 좌 우로 이동하는 기능을 만들어 보겠습니다. 일단은 좌 우로만 움직이는 코드를 만들어 볼겁니다. 
이제 이동코드는 어디서 만들어야 할지가 고민이 됩니다. 그런데 이미 언리얼을 어느정도 아는 사람이라면 이미 구조가 타이트하게 잡혀있다는걸 압니다. 
BP_Knight는 이미 Paper Character 를 상속받았고 이 Character에는 이미 Character Movement 라는 컴포넌트가 상속되어있습니다.
이 캐릭터 무브먼트는 이동과 관련된 부품이기때문에 이걸 사용해 이동하는게 일반적입니다. 근데 이번 시간에서는 이것 말고 블루프린트를 처음 찾아보면서 Set Location으로 좌표를 이동하던 방식으로 
구현해보고 다음에 이어서 개선점을 찾아보는 방법으로 해보겠습니다. 

결국 Set Actor Location 함수로 이동한다는건데 아까 하던 고민을 다시 떠올려보면 이 이동 함수를 어디서 관리해야할지가 고민입니다. 
현재 BP_Knight의 코드를 보면 State 패턴으로 관리를하고 있는데 이렇게 관리하는게 상당히 편리합니다. 당연히 State가 Attack 이나 Idle 일때는 캐릭터가 이동하면 안될것 같습니다. 
Move State 일때 Direction에 따라 어느 정도의 속도로 이동하면 될것 같습니다. 

지금 Tick 이벤트에서 UpdateInput 에서 입력을 받아 주고 있고 이어서 UpdateAnimation에서는 애니메이션을 골라주고 있으니 이 사이에서 게임로직을 담당하는 함수를 하나 더 파주겠습니다.

UpdateLogic 이라는 이름으로 함수를 만들었습니다. 가장먼저 캐릭터의 State를 확인해야 할겁니다. 그래서 Move 일때에 무언가 이동코드를 작성하면 되지 않을까 싶습니다. 
이동 코드도 아까 언급했던 Set Actor Location을 사용하면 될것 같은데 어디로 이동할지는 또 Direction에서 관리하고 있으니 가져와 Direction도 Switch 문을 사용해보겠습니다. 
일단 Left, Right 로만 움직일 것이라고 햇으니 그렇게 해줘도 되는데 그러면 Set Actor Location을 각각 한번씩 호출해줘야하는데 
좀 더 깔끔하게 작성하려면 Select 문을 사용하면 되었습니다. Switch 대신 Select 문으로 교체하겠습니다. 

그리고 Select 노드의 핀 타입을 애당초 Vector 타입으로 바꿔 줘보겠습니다. 그러면 Direction에 따라 어느 방향으로 얼마나 이동할지를 꺼내 연산해주겠습니다. 
이동하는 코드는 이렇게 프레임당 이동할 거리와 액터의 현재 위치를 더해 Set Actor Location을 하면 되었습니다. 현재 액터의 위치는 Get Actor Location으로 가져올 수 있었습니다. 
그럼 이제 코드는 UpdateLogic 시작노드에서 State의 Switch 노드가 연결되고 Switch 노드에서는 Move 일때 Set Actor Location이 연결됩니다. 이때 이동 하는 벡터값은 
Get Actor Location한 값과 Direction의 Select 노드를 꺼내 좌우로 프레임당 이동할 거리를 더해 Set Actor Location에 줍니다. 

이제 이동할 수치를 넣어주면 되겠습니다. 참고로 다시 맵으로 돌아가 보면 캐릭터 이동방향이 X축으로 움직이면 왼쪽 오른쪽으로 이동합니다. 이 점을 보고 이동 좌표를 계산해주면되겠습니다. 
그리고 이런 이동과 같은 부분은 직접 수치를 입력하는 하드코딩보다는 따로 이동속도를 변수같은걸로 관리하고 거기에 프레임당 걸린시간을 곱해서 사용해야합니다. 
프레임사이의 시간은 Tick 이벤트에서 Delta Time 이라고 반환을 해주고 있었습니다. 이거 UpdateLogic 에서 인자로 받아도 되고 아니면 
GetWorldDeltaSeconds 라는 함수로 프레임사이에 걸리는 시간을 가져올수 있습니다. 이값에다가 Speed라는 Float 변수를 만들어 이동속도를 저장하고 둘을 곱해서 이동 거리를 구해줍니다.

입력을 받고 로직을 실행하고 애니메이션을 틀어주는 전형적인 패턴으로 동작하고있습니다. 

여기까지 해서 Set Actor Location으로 캐릭터를 움직이는 실습을 해봤는데 이런 방식도 가능하다는걸 알아봤습니다. 
흥미로운점은 Set Actor Location 함수의 입력받는 것중에 불리언 타입으로 Sweep, Teleport 라는 것들을 받아주고 있습니다. 
먼저 Sweep은 캐릭터가 어딘가에 부딛혔을 경우에 이동을 멈출지에 대한 플래그입니다. 예를들어 맵에 캐릭터 이동 방향으로 큐브를 배치해 앞을 가로 막아 봤습니다. 
기본 설정인 Sweep을 꺼놓은 상태에서는 캐릭터가 그냥 큐브를 무시하고 이동하는데 Sweep을 켜고 다시 해보면 캐릭터가 큐브에 막힌다는걸 볼 수 있습니다. 
이런 옵션이 있는것도 겸사겸사 알아봤습니다. 

간단한 2D 게임의 경우에는 그냥 이렇게 Set Actor Location으로 구현해도상관이없습니다. 

오늘한 내용을 요약하자면 Set Actor Location은 우리가 계산해서 이동할 좌표를 지정해준 상태입니다.
그런데 만약에 만들고 싶은 게임에 물리가 많이 개입한다고 해보겠습니다. 사방에서 미사일이 날라오고 미사일을 맞은 방향 반대로 튕겨나가고또 한번에 여러발 맞으면 그 반발력의 합만큼을 날라가야할겁니다. 
거기에 3D게임이면 말할것도 없을겁니다. 이럴때는 Set Actor Location을 사용하는것은 무리가 있을겁니다. 이런저런 물리를 다 적용한 좌표를 직접넣어줘야하는데 
이런걸 직접 계산하는것은 본말전도입니다. 

경우에 따라 더욱 복잡한 이동을 사용할때는 처음에 언급했던 Character Movement Component를 사용해야합니다.

