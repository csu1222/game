


        키맵핑


지금까지 배경, 캐릭터, 스피링 암과 카메라, 그리고 Player 0 라는 플레이어 컨트롤러가 캐릭터에 빙의 되도록 하는것까지 했습니다.

그런데 캐릭터 설정할때 디테일즈에서 이것 저것 수치를 건드려 놨습니다. 예를 들어 Gravity Scale을 0으로 수정해 떨어지지 않게 한다거나 
Auto Posess Player 를 Player 0으로 설정한것도 직접 수정한겁니다. 

이렇게 하면 간단하게 테스트 하기에는 좋지만 혹시라도 지금 테스트하고 있는 Knight를 삭제하고 다시 배치하면 수정했던 값들을 또 손수 수정해줘야 합니다. 
그래서 클래스에서 설정을 해줘도 되긴하지만 나중에가면 클래스에 말고 밖에서 다른 설정도 해야하기때문에 지금 시점에서는 그냥 간편하게 테스트하는 용도로 지금 처럼 사용하겠습니다. 

나중에 좀 더 큰 그림이 그려지만 다른 방식으로 해결할겁니다. 

이제 이번시간에는 뭐할것이냐면 
게임은 우리가 입력하는값에 따라 모션이 달라지는게 일반적입니다. 이런걸 추가해볼것입니다. 

우선 wsad 를 가지고 캐릭터를 조종해볼겁니다.

BP_Knight 클래스 파일을 열어서 여기서 뭔가 작업을해보겠습니다. 

처음 작업을 하다보면 어디서 부터 시작해야할지 막막할겁니다. 하지만 계속 게임개발을 하다보면 어떤 용기가 생깁니다. 하다보면 다 통한다라는 용기가 생기기 때문에 
겁먹지 말고 생각을 천천히 해보면서 한발짝 한발짝 나아가 보겠습니다. 

이번시간의 목표인 wsad 를 누르면 그에 맞는 Sprite Filpbook을 틀어주고 싶은겁니다. 
우리가 컴포넌트중에 Sprite 항목에서 Source Filpbook에서 원하는 모션을 틀어주면 캐릭터의 모션이 달라졌었습니다. 
그렇다는것은 블루프린트 창에서 우클릭을해 소스 클립북을 다루는 기능이 있지 않을까 의심해볼수 있고 그래서 Set Filpbook 이라는 기능을 찾으면 아 이거구나 할 수 있을겁니다. 
Set Filpbook을 배치하면 컴포넌트인 Sprite도 Get 해와서 연결되는걸 볼수 있습니다. 

그 다음은 어떤 플립북을 넣어주고 싶은지 정해주고 이벤트에 연결해주면 실행할때 적용될겁니다. 

플립북을 어떻게 수정하면 될지를 알았으니 이제 WSAD 입력을 어떻게 받을지를 알아보겠습니다. 
일단은 이동하는걸 구현하기 전에 방향을 전환하는것 까지만 해보겠습니다. 
입력은 이미 알고 있습니다 키보드 이벤트 에서 원하는 버튼을 검색하면 됩니다. 그렇게 WSAD 이벤트를 배치 해두고 Set Filpbook 을 각각 연결해주겠습니다. 
W 입력했을때는 up_idle, S 입력시에는 down_idle 을 연결해주면 되는데 AD 입력시에는 side_idle을 해주면 좌우 구분없이 그냥 오른쪽만 보게 됩니다. 일단은 여기까지 잘 동작하는지 테스트 해보겠습니다. 
그러면 입력에 따라 의도한대로 잘 움직이는것은 확인 했는데 아직 A 와 D의 입력때 좌우가 아닌 우측만 보고 있는걸 어떻게 해결해야 할까요 

이런 이미지 반전 방법을 구글링해도 되고 직접 부딛혀봐도 됩니다. 
side_idle 상태에서 좌우하는 방법으로 Knight 오브젝트 자체의 좌우를 바꾸는 방법도 있을겁니다. 오브젝트의 Rotate 값중 z축으로 180도 회전을 하던가 아니면 Scale 에서 X축으로 -1 값을 주는 방법이 있습니다. 
둘중 어느걸로 사용해도 괜찮을것 같은데 Rotate를 수정하는 방법으로 해보겠습니다. 나중에 문제가 생기면 그때 수정하면 되겠습니다. 

이 Rotate 회전은 사실 오브젝트가 아닌 그 컴포넌트중 스프라이트를 회전시키면 되겠습니다. 

이제 코드작업을 해보면 회전하는 기능이 있을것 같은데 A 를 눌렀을때 스프라이트와 관련된 기능중 Rotation 을 검색해보면 Set Relative Rotation 이라는 기능이 있습니다. 
이것을 A에서 이어진 Set Filpbook 이후로 이어주고 z값을 180도 회전 시켜줍니다. 
D 이벤트에도 대칭적으로 만들어 주고 값은 그대로 0으로 두면 되지않을까 합니다. 

다시 테스트를 해보면 4방향으로 캐릭터의 방향을 트는 것 까지 완성했습니다. 

사실 이런 부분을 배울때 어떤 언어를 배우느냐에 따라 얼마나 깊게 배워야 할지가 다른데 C++을 배우거나 DirectX를 배우게 되면 정말 깊게 들어가서 하나하나 자세히 배우는게 중요한데 
상용 엔진의 경우는 기능 중심으로 실제 어떻게 사용하면 되는지 까지만 알면 됩니다. 



지금까지 WSAD 를 누를때 방향전환하는것까지 진행 했는데 WSAD 키보드 이벤트를 사용하는것에 아쉬운점이 있습니다. 키보드를 누를때 만 이벤트가 일어난다는것인데 
나중에 만약에 이 것을 PC가 아니라 모바일 버전을 만든다거나 콘솔로 진출해 게임패드입력을 받는다거나 아니면 VR게임으로 만든다거나 할때 지금 구조로는 딱 PC에서만 사용할수 있는 방법이기 때문에 아쉬운데 
언리얼에서는 이것을 다른 방법으로 하는걸 권장합니다. DevMap에서 편집 옵션 -> 프로젝트 설정 으로 간다음 입력을 설정할 수 있는 부분이 있습니다. 

엔진 -> 입력 옵션을 열어보면 이 중에 액션 매핑과 축 매핑이라는 옵션이 있습니다. 이 두 개를 이용하는 방법을 권장합니다. 
이것을 언리얼 공식 문서에서 찾아보면 왜 사용해야 하는지 뭐가 다른지를 알아볼 수 있습니다. 

결국 입력할때 동시에 동작시키는게 아니라 입력과 실행을 레이어화 시켜서 관리를 한다고 합니다. 
액션 매핑의 경우에는 그냥 키 값, 누르고 땐다 두가지 상태가 있고 축 매핑의 경우는 두가지 상태 외에 그 사이에 이어지는 상태가 있다고 합니다. 자세한 설명은 이후 다시 하겠습니다.  
여기서 하고 싶은 이야기기는 나중에 라도 다른 키로 매핑하고 싶다 예로 들어 롤이라는 게임을 만든다고 하면 롤에서는 기본적으로 QWER 키로 스킬을 사용하는것이지만 내가 원한다면 다른 키로 설정을 할 수 있을겁니다. 
입력과 기능을 분리해 관리하게 되면 이런식으로 유저가 직접 키 맵핑을 할 수 있는 것입니다. 이게 커맨드 패턴이라는 것의 기본정신입니다. 

다시 언리얼 엔진으로 돌아와 액션 매핑과 축 매핑을 사용하면 기능과 입력을 분리할 수 있게 되는데 액션 매핑을 추가해보면 말 그대로 눌렀다 땠다 두가지 상태밖에 없는데 
축 매핑의 경우는 거기에 Scale이라는 값이 같이 있어서 -1 에서 1 까지의 float를 입력할 수 있는데 어떻게 응용할수 있냐면 
예를 들어 위로 움직이는 기능 MoveUp 이라고 가정을 해보겠습니다. 근데 아래로 가는것도 이 MoveUp에 포함시켜서 스케일을 -1.0 을 줄 수도 있는겁니다. 
그러면 MoveUp라는 한가지 기능을 가지고 위 아래 두가지 방향을 관리할 수 있게 된겁니다. 심지어 만약 캐릭터가 빠르게 이동한다 느리게 이동한다 이런 사양이 있다면 Scale 값을 조절할 수 있을겁니다. 
지금은 정방향과 역방향 두가지만 사용할겁니다. 그래서 MoveUp 정방향을 W로 역방향을 S로 설정하고 축매핑을 하나 더 추가해 MoveRight 라고 이름짓고 정방향 D 역방향 A로 설정합니다. 

그다음 다시 BP_Knight 블루 프린트로 돌아가서 키보드 이벤트로 만드는게 아니라 MoveUp을 찾아보면 InputAxis MoveUp 이라는 Axis 이벤트를 추가할 수 있게 되어 있습니다. 
이제 WSAD 이벤트를 각각 하드 코딩할 필요 없이 축 매핑으로 사용할 수 있게 되었고 이 값이 평소에는 계속 0이라는 값이 반환 되고 입력이 있으면 그에 맞는 1.0 혹은 -1.0 이라는 값이 반환됩니다. 
평상시에는 계속 0을 반환하기 때문에 성능을 좀 더 향상 시키기 위해서는 이걸 막아줄 필요가 있습니다. 

무슨말이냐면 테스트를 위해 InputAxis MoveUp 이벤트에 PrintText 함수를 연결하고 출력을 이벤트의 반환값을 연결해줍니다. 
이대로 게임을 실행하면 아무것도 안해도 0이 계속 출력되고 W를 눌르면 1이 또 계속 출력되는 모습을 볼 수 있습니다. 

이게 평상시에도 계속 호출된다는 것입니다. 그래서 아무것도 안할때 즉 0일때는 이 호출을 막아주는겁니다. 
처음에 엑시스 이벤트의 반환값이 0인지 아닌지를 비교 연산자로 비교해서 브랜치로 그 값이 0이 아닐때 라면 다시 그러면 그값이 0보다 큰지 작은지도 체크해 0보다 크다면 W혹은 D로 연결하고 
아니라면 S 혹은 A로 연결해주는 식으로 해줍니다. 

다시 테스트 해보면 정상적으로 원하는 방법으로 방향을 트는걸 알아 봤습니다. 

처음에는 플립북을 세팅하는 Set Filpbook 함수를 알아봤고 이것을 이제 키보드 이벤트에 연결해 상하좌우로 방향을 바꿀수 있게 되었고 
더 나아가 하드 코딩을 하는게 아닌 커맨트 패턴에 따른 액션 매핑과 축 매핑을 알아보았습니다. 이 매핑들은 입력과 기능을 나누어 관리해 그때 그때 매핑을 자유롭게 수정할수 있는 방법들이었고 
이중 축 매핑을 방금 테스트 코드에 도입해 보았습니다. 

남은것은 무엇이냐 지금까지는 방향만 틀었지만 이동을하고 그에 맞는 애니메이션을 틀어주는 것도 해볼겁니다. 