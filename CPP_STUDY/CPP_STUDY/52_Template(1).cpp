#include <iostream>
using namespace std;

// 오늘의 주제 : 템플릿 기초

/*
	왜 그냥 템플릿이 아니고 템플릿 기초라고 강조하느냐
	- C++에서 템플릿이 정말 어려운 부분이고 응용할것과 알아야 할 것이 정말 많습니다. (C++ 에서 템플릿 만으로 책한권이 나오는정도)
	- 이후 배울 STL에서 사용할 기초만 일단 알고 지나가는 의미입니다.

	그럼 템플릿은 무었인가?
	
	템플릿 : 함수나 클래스를 찍어내는 틀
	1) 함수 템플릿 *
	2) 클래스 템플릿

	
	간단히 Print라는 이름의 함수를 만들었다고 해보겠습니다. 시그니쳐는 이렇습니다.
	void Print(int a);	기능은 인자로 받은 a를 로그 출력하는 것 입니다.

	그런데 이 Print함수는 정수 인자만 받습니다. 다른 타입도 출력하고 싶어서 오버로딩을 하였습니다.
	void Print(float a);
	void Print(double a);
	void Print(const char* a); 
	등등 이러면 여러 타입의 인자들도 Print로 출력할 수 있게되었습니다. 
	하지만, 타입마다 함수를 손수 입력하면 반복되는 코드가 많아집니다. 코드를 줄이고 더 간편히 기능을 만들고 싶으면 
	함수가 받는 인자 자리만 용도에 맞게 바꿔주면 될 것입니다.

	그럴때 쓰는게 [템플릿] 이라고 합니다.

	템플릿을 사용할 기초 문법은 
	template<typename T>  // T 자리는 템플릿에 이름을 지어준것 T가 아니라 원하는 이름으로 해도 됩니다

	위의 Print함수로 예를들면
	Print(T a) { cout << a << endl; }
	이렇게 매개변수의 타입이 들어갈 곳에 템플릿을 넣어주면 아 한개의 함수로도 int, float, double, strig등 타입의 
	인자를 잘 출력해주었습니다.

	템플릿은 하나의 함수의 매개변수를 여러가지를 쓰게 하는것이 아니고,
	하나의 틀을만들어 함수가 어떤 타입의 인자를 사용할때 그 타입의 함수를 만들어 내고 있습니다.
	컴파일러가 컴파일 당시에 인자의 타입을 추론을 해서 해당하는 함수를 만들어 줍니다.

	컴파일러에게 다 맞기지 않고 사용자가 지정하고 싶을 때는 이렇게 합니다.
	Print<int>(50); 

	용도에 맞게 직접 타입을 지정하고 싶을 때, 컴파일러에게 맡기고 싶을 때 구분해서 사용하면 되겠습니다.

	그리고 템플릿의 기본 문법은 template<typename T> 이긴 한데
	c++에서 지원하는 문법으로 templaye<class T> 도 위 타입네임과 같은 의미라고 합니다.
	
*/

// 템플릿 사용 기본 문법
template<typename T>

void Print(T a)	//인자의 타입대신 템플릿을 넣어줍니다.
{
	cout << a << endl;
}

int main()
{

	Print(50);
	Print(50.0f);
	Print(50.0);
	Print("Hello World");

	return 0;
}