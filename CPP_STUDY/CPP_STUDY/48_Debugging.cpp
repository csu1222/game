#include <iostream>
using namespace std;

// 오늘의 주제 : 디버깅 

/*
- F10 (프로시저 단위 실행) : 중단점에 커서를 진행시키는데 프로시저(함수)단위로 진행합니다. 함수내부까지는 안들어 가고 스킵
- F11 (한 단계 씩 실행) : 중단점에 있는 커서부터 한 프로세스씩 실행합니다. 함수나 객체를 만나면 그 내부까지 들어가서 진행합니다.
- F5 (디버깅 시작) : 말그대로 디버깅 시작, 코드진행이 멈출때 까지 쭉 실행하고(중단점을 만나거나 프로그램에서 입력을 받기위해 멈춘경우)
	멈춘 후 부터 여러 디버깅 도구를 이용해 디버깅 할 수 있습니다.
- Shift + F5 : 디버깅 중지 
- 조사식 : 디버깅 상황에서 어떤 변수나 메모리의 값을 보는 기능 (값들을 조사식에서 연산도 가능합니다.) 
	심지어 조사식에서 그 데이터의 값을 수정해볼 수도 있습니다.(임시적으로)
- 호출 스택 : 메인 함수에서부터 여러개의 함수가 곂쳐서 동작 할 경우 호출 스택 도구가 여태껏 타고들어온 함수들을 전부 알려줍니다. 
	더블클릭으로 그 함수로 이동 할 수도 있습니다. 또 중요한 역할이 프로그램이 어느곳에서 크래쉬가 날 경우 크래쉬 난 곳을 덤프라고 하는데
	그때도 호출스택으로 어떤 코드가 문제였는지 확인하는데 도움을 줄 것입니다.
- 중단점 : 디버깅 실행시 이곳에서 코드 진행을 멈춥니다.
- 중단점 도구 : 내가 여태껏 걸어놓은 중단점들을 확인, 관리할 수 있습니다.
- 중단점(조건 걸기) : 이후에 MMORPG를 만든다고 했을때 어떤 특정아이디를 가진 몬스터 하나가 문제여서 그 몬스터에게 딱 중단점을 걸어야 하는데
	일일히 확인해가면서 중단점 걸기가 힘들 것입니다. 그럴때 중단점을 우클릭 후 조건메뉴(혹은 Alt + F9, C)로 조건을 걸 수 있고 조건이 해당
	할 경우에만 중단되게끔 합니다.
- 중단점 (작업) : 코드를 진행하면서 중단점으로 멈추지는 않고 어떤 로그만 출력하고 싶다면 우선 중단점을 만들고 우클리 후 작업을 만들면 따로
	소스코드에 직접 적지 않고 로그를 출력할 수 있습니다.
- 중단점 (커서 옮기기) : 만약 어떤중단점에 도달하기까지 여러 과정을 거치고 여러 조건을 만족해야 올 수 있다고 할때, 이 중단점을 다시 실행
	하기 귀찮을때가 있을 것입니다. 그러면 디버깅중 중단점에는 빨간 동그라미위에 화살표가 있는데 이 화살표를 드래그 드롭으로 다시 실행할 코
	드 위치로 옮기면 그 위치부터 코드가 다시 실행 됩니다. 다시 실행시 이전 시행과 조건이 달라져 본 의도대로 실행되지 않을수 있습니다.

- 한솔루션에서 여러 프로젝트 열기 : 솔루션 탐색기의 최상위 솔루션 항목을 우클릭해 추가 새 프로젝트로 한번에 여러 프로젝트를 만들 수 있습니다.
	사용하려는 프로젝트를 우클릭해서 시작 프로젝트로 설정을 하면서 각 프로젝트를 실행 할 수 있습니다.
- 한번에 여러 프로젝트 실행하기 : 최상위 솔루션 항목을 우클릭후 -> 속성 -> 시작프로젝트 속성 -> 여러개의 시작 프로젝트 설정으로 한번에 여러
	프로젝트를 실행할 수 있습니다.
- 프로젝트 삭제하기 : 삭제할 프로젝트를 선택하고 delete키로 삭제합니다. 그러나 컴퓨터 메모리에서 완전히 삭제된것은 아니고 솔루션 탐색기에서만 
	삭제된 것입니다. 직접 디렉토리로 가서 삭제해주어야 합니다.
*/

void Test2()
{
	int b = 0;
}

void Test1()
{
	int a = 0;
	
	Test2();
}


int main()
{
	int number = 10;

	Test1();

	return 0;
}