#include <iostream>
using namespace std;
#include "32_test_1.h"
// 오늘의 주제 : 파일 분할 관리
// - 파일이 커질 수록 스크롤도 길어지고 찾고자하는 부분을 찾기 힘들어 질 것입니다.
// - 그래서 코드의 부분부분을 다른 파일로 나누어 관리하면 가독성도 늘고 성능과 안정성이 늘어 납니다
// .
// 이전에는 함수를 선언하거나 할 때 main함수 밑에 구현부를 두고 main위쪽에 선언을 해두었었는데요
// 이것을 소스 파일 디렉토리에 헤더파일을 생성해 관리 해보겠습니다.
// 32_test_1.h 헤더파일과 32_test_1.cpp 파일을 만들었고 테스트용 간단한 함수들을 만들었습니다.
// 그리고 코드 상단에 #inlude "32_test_1.h" (헤더파일)을 가져왔고 
// 테스트 1 CPP 파일에 구현부를 두고 지금 이 파일에서 Test_1함수를 실행하였습니다.

// 한가지 더 궁금한 것은 테스트1 헤더파일을 만들때 처음부터 #pragma once 라는 코드가 있었습니다.
// - 헤더파일에 함수 선언만 있다면 실수로 헤더파일을 여러번 인클루드 해도 문제없이 코드가 실행 될 것입니다.
// - 하지만 헤더파일에는 함수 선언만이 아니라 구조체(struct)같은 재정의 하면 에러가 뜨는 것들도 선언 하는 경우도 있습니다.
// - 그럴때 #pragma once 가 한번 인클루드한 헤드파일은 이후로 다시 가져와도 무시해주는 명령어 입니다.
// - 헤더파일을 두개 이상 호출할 때 헤더파일끼리 서로를 호출하였다면 중복 선언이 되는 경우가 있는데 그럴때도 도움이 됩니다.
// - #pragma 문법은 공식 C++ 문법이아닌 컴파일러의 문법입니다.
// - #pragma once의 작동방식은 헤더파일들을 추적하면서 main파일에 아예 추가되지 않게 하는것
// -- 비슷한 옛날 문법으로 코드상단에 #ifndef (헤더 식별자) #define (헤더 식별자) 코드 하단에 #endif 
// -- 로 비슷한 역할을 할 수 있습니다.
// -- #ifdef-#define-#endif 문의 작동방식은 일단 main파일에 헤더들을 복사하고 한번 정의된 헤더 이후로는 삭제하는 방법
// #pragma once가 속도가 더 빠르긴 하다

// 주의사항 ) 
// 헤더파일은 최대한 간단하게 유지하는게 좋다. 꼭 필요한 라리브러리만 include 하기, 
// 왜냐하면, 헤더에 여러 라이브러리를 include해놓으면 헤더파일이 쓰일 때마다 불필요하게 include되어 용량이 커질 수 있기 때문



int main()
{
	Test_1();



	return 0;
}
